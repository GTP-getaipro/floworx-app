{
  "name": "floworx-invite",
  "version": "1.0.0",
  "description": "SaaS application with secure backend and React frontend",
  "main": "index.js",
  "scripts": {
    "install-all": "npm install && cd frontend && npm install && cd ../backend && npm install",
    "setup": "node setup.js",
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "cd backend && npm run dev",
    "client": "cd frontend && npm start",
    "build": "npm install --prefix frontend && npm run build --prefix frontend",
    "vercel-build": "cd frontend && npm run build",
    "start": "npm start --prefix backend",
    "test": "cd backend && npm test && cd ../frontend && npm test",
    "test:regression": "node tests/regression/run-regression.js",
    "test:regression:verbose": "node tests/regression/run-regression.js --verbose",
    "test:regression:keep-server": "node tests/regression/run-regression.js --keep-server",
    "test:regression:direct": "node tests/regression/api-regression-suite.js",
    "test:comprehensive": "npm run validate:hybrid-setup && npx playwright test tests/business-logic.spec.js tests/api-integration.spec.js tests/edge-cases.spec.js tests/mobile-responsive.spec.js",
    "test:comprehensive:verbose": "node tests/regression/run-comprehensive-regression.js --verbose",
    "test:comprehensive:keep-server": "node tests/regression/run-comprehensive-regression.js --keep-server",
    "test:comprehensive:skip-frontend": "node tests/regression/run-comprehensive-regression.js --skip-frontend",
    "test:comprehensive:security-only": "node tests/regression/run-comprehensive-regression.js --skip-frontend --skip-performance --skip-quality --skip-deployment",
    "test:comprehensive:performance-only": "node tests/regression/run-comprehensive-regression.js --skip-frontend --skip-security --skip-quality --skip-deployment",
    "test:coverage": "jest --coverage",
    "db:setup": "psql -d floworx_db -f backend/database/schema.sql",
    "structure:analyze": "node scripts/align-structure.js",
    "structure:fix": "node scripts/align-structure.js --create-dirs --execute",
    "utils:check": "node scripts/check-utils-usage.js",
    "refactor:consolidate": "npm run structure:analyze && npm run utils:check",
    "test:e2e": "node tests/e2e/runner.js",
    "test:e2e:headless": "E2E_HEADLESS=true node tests/e2e/runner.js",
    "test:e2e:debug": "E2E_HEADLESS=false E2E_SLOW_MO=100 DEBUG_E2E=true node tests/e2e/runner.js",
    "test:e2e:auth": "node tests/e2e/runner.js --suite authentication",
    "test:e2e:business": "node tests/e2e/runner.js --suite business-logic",
    "test:e2e:api": "node tests/e2e/runner.js --suite api-integration",
    "test:e2e:frontend": "node tests/e2e/runner.js --suite frontend-integration",
    "test:security": "npm run validate:hybrid-setup && npx playwright test tests/edge-cases.spec.js --grep=\"Security|XSS|SQL\"",
    "test:performance": "npm run validate:hybrid-setup && npx playwright test tests/mobile-responsive.spec.js --grep=\"Performance\"",
    "test:all": "npm run test:backend && npm run test:frontend && npm run test:e2e",
    "test:regression:full": "node run-e2e-tests.js",
    "test:playwright": "playwright test",
    "test:playwright:headed": "playwright test --headed",
    "test:ci": "npm run test:backend && npm run test:frontend && npx playwright test --reporter=junit",
    "test:backend": "cd backend && npm test",
    "test:frontend": "cd frontend && npm test -- --coverage --watchAll=false",
    "test:playwright:debug": "playwright test --debug",
    "test:playwright:auth": "playwright test tests/auth.spec.js",
    "test:playwright:onboarding": "playwright test tests/onboarding.spec.js",
    "test:playwright:dashboard": "playwright test tests/dashboard.spec.js",
    "test:playwright:workflows": "playwright test tests/email-workflows.spec.js",
    "test:playwright:errors": "playwright test tests/error-handling.spec.js",
    "test:playwright:performance": "playwright test tests/performance.spec.js",
    "test:playwright:smoke": "playwright test --grep @smoke",
    "test:playwright:regression": "playwright test --grep @regression",
    "test:playwright:ci": "playwright test --reporter=junit",
    "test:playwright:report": "playwright show-report",
    "test:playwright:install": "playwright install",
    "start:backend": "cd backend && npm start",
    "start:frontend": "cd frontend && npm start",
    "start:test-servers": "concurrently \"npm run start:backend\" \"npm run start:frontend\"",
    "validate:hybrid-setup": "node validate-hybrid-setup.js",
    "test:hybrid": "npm run validate:hybrid-setup && node run-playwright-tests.js all",
    "test:hybrid:auth": "npm run validate:hybrid-setup && node run-playwright-tests.js auth",
    "test:hybrid:security": "npm run test:hybrid:auth",
    "test:business-logic": "npm run validate:hybrid-setup && npx playwright test tests/business-logic.spec.js",
    "test:api-integration": "npm run validate:hybrid-setup && npx playwright test tests/api-integration.spec.js",
    "test:edge-cases": "npm run validate:hybrid-setup && npx playwright test tests/edge-cases.spec.js",
    "test:mobile-responsive": "npm run validate:hybrid-setup && npx playwright test tests/mobile-responsive.spec.js",
    "test:concurrent": "npm run validate:hybrid-setup && npx playwright test tests/edge-cases.spec.js --grep=\"Concurrent\"",
    "lint": "npm run lint:backend && npm run lint:frontend",
    "lint:fix": "npm run lint:backend -- --fix && npm run lint:frontend -- --fix",
    "lint:backend": "cd backend && npx eslint . --ext .js --max-warnings 0",
    "lint:frontend": "cd frontend && npx eslint src --ext .js,.jsx --max-warnings 0",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "format:backend": "cd backend && npm run format",
    "format:frontend": "cd frontend && npm run format",
    "quality:check": "npm run lint && npm run format:check",
    "quality:fix": "npm run lint:fix && npm run format"
  },
  "keywords": [
    "saas",
    "oauth",
    "automation"
  ],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@babel/core": "^7.28.3",
    "@babel/preset-env": "^7.28.3",
    "@babel/preset-react": "^7.27.1",
    "@badeball/cypress-cucumber-preprocessor": "^23.0.0",
    "@bahmutov/cypress-esbuild-preprocessor": "^2.2.5",
    "@playwright/test": "^1.55.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "babel-jest": "^30.1.2",
    "chai": "^4.3.7",
    "chalk": "^5.6.0",
    "concurrently": "^8.2.2",
    "cross-env": "^10.0.0",
    "cypress": "^15.0.0",
    "cypress-mochawesome-reporter": "^4.0.2",
    "dotenv": "^17.2.2",
    "esbuild": "^0.25.9",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-jsx-a11y": "^6.8.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-react": "^7.34.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-security": "^2.1.1",
    "express": "^5.1.0",
    "husky": "^9.0.11",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^30.1.3",
    "jest-cli": "^30.1.3",
    "jest-environment-jsdom": "^30.1.2",
    "jest-environment-node": "^30.1.2",
    "jest-html-reporters": "^3.1.7",
    "jest-junit": "^16.0.0",
    "jest-watch-typeahead": "^3.0.1",
    "joi": "^17.11.0",
    "jsonwebtoken": "^9.0.2",
    "lint-staged": "^15.2.2",
    "mocha": "^10.2.0",
    "multiple-cucumber-html-reporter": "^3.9.3",
    "prettier": "^3.2.5",
    "puppeteer": "^24.19.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2",
    "supertest": "^7.1.4",
    "uuid": "^9.0.0"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.57.0",
    "axios": "^1.11.0",
    "bcryptjs": "^3.0.2",
    "body-parser": "^2.2.0",
    "cors": "^2.8.5",
    "faker": "^5.5.3",
    "googleapis": "^159.0.0",
    "morgan": "^1.10.1",
    "nodemailer": "^7.0.6",
    "pg": "^8.16.3",
    "playwright": "^1.55.0"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "lint-staged": {
    "*.{js,jsx}": [
      "eslint --fix --max-warnings 200",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml,css,scss,html}": [
      "prettier --write"
    ],
    "*.sql": [
      "prettier --write"
    ]
  }
}
