name: Floworx Test Automation - Business Type & Password Reset

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'tests/**'
      - 'package*.json'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Database Integration Tests
  database-tests:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: floworx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Setup test database
        run: |
          npm run db:setup:test
          npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test

      - name: Run database integration tests
        run: npm run test:db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          SUPABASE_URL: http://localhost:54321
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Upload database test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: database-test-results
          path: |
            tests/results/database-tests.xml
            tests/coverage/database-coverage.json

  # Backend API Tests
  api-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: database-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: floworx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Setup test environment
        run: |
          npm run db:setup:test
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          REDIS_URL: redis://localhost:6379

      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          SUPABASE_URL: http://localhost:54321
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Run API integration tests
        run: npm run test:api
        env:
          API_BASE_URL: http://localhost:3001
          TEST_USER_EMAIL: test@floworx-ci.com
          TEST_USER_PASSWORD: TestPassword123!

      - name: Run API performance tests
        run: npm run test:api:performance
        env:
          API_BASE_URL: http://localhost:3001

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            tests/results/api-tests.xml
            tests/coverage/api-coverage.json
            tests/performance/api-performance.json

  # Frontend Component Tests
  frontend-tests:
    name: Frontend Component Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:unit -- --coverage --watchAll=false
        env:
          CI: true

      - name: Run frontend component tests
        run: |
          cd frontend
          npm run test:components -- --coverage --watchAll=false
        env:
          CI: true

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:a11y
        env:
          CI: true

      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/accessibility-report.json

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: floworx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test environment
        run: |
          npm run db:setup:test
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: http://localhost:3001
          REACT_APP_ENVIRONMENT: test

      - name: Start application
        run: |
          # Start backend
          cd backend
          npm start &
          
          # Start frontend
          cd ../frontend
          npm run serve &
          
          # Wait for services to be ready
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          FRONTEND_URL: http://localhost:3000
          BACKEND_URL: http://localhost:3001

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./
          wait-on: 'http://localhost:3000, http://localhost:3001/health'
          wait-on-timeout: 120
          spec: tests/e2e/**/*.spec.js
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/reports/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: api-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          cd backend && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Floworx'
          path: '.'
          format: 'JSON'

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            reports/dependency-check-report.json
            security-audit.json

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run load tests
        run: npm run test:load
        env:
          TARGET_URL: ${{ secrets.STAGING_URL }}
          LOAD_TEST_DURATION: 60s
          LOAD_TEST_VUS: 10

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [database-tests, api-tests, frontend-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Database Tests
          if [ -f "database-test-results/database-tests.xml" ]; then
            echo "✅ Database Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Database Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # API Tests
          if [ -f "api-test-results/api-tests.xml" ]; then
            echo "✅ API Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Frontend Tests
          if [ -f "frontend-test-results/coverage/coverage-summary.json" ]; then
            echo "✅ Frontend Component Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend Component Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # E2E Tests
          if [ -d "e2e-test-results" ]; then
            echo "✅ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- [Database Coverage](./database-test-results/coverage/)" >> $GITHUB_STEP_SUMMARY
          echo "- [API Coverage](./api-test-results/coverage/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Frontend Coverage](./frontend-test-results/coverage/)" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Deployment Gate
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [database-tests, api-tests, frontend-tests, e2e-tests, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Check all tests passed
        run: |
          echo "All tests passed! Ready for deployment."
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV

      - name: Trigger deployment
        if: env.DEPLOYMENT_READY == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'deploy-production',
              client_payload: {
                sha: context.sha,
                ref: context.ref
              }
            });
