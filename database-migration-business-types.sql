-- Floworx Business Type Selection Migration
-- Run this AFTER the password reset migration is complete
-- Adds business type selection to support multi-industry expansion

-- =====================================================
-- 1. BUSINESS TYPES TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS business_types (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description TEXT,
    slug VARCHAR(100) NOT NULL UNIQUE, -- URL-friendly identifier
    is_active BOOLEAN DEFAULT true,
    sort_order INTEGER DEFAULT 0,
    
    -- Industry-specific configuration
    default_categories JSONB DEFAULT '[]', -- Default email categories for this industry
    workflow_template_id VARCHAR(255), -- n8n template identifier
    
    -- Metadata
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for business_types
CREATE INDEX IF NOT EXISTS idx_business_types_active ON business_types (is_active);
CREATE INDEX IF NOT EXISTS idx_business_types_slug ON business_types (slug);
CREATE INDEX IF NOT EXISTS idx_business_types_sort_order ON business_types (sort_order);

-- =====================================================
-- 2. WORKFLOW TEMPLATES TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS workflow_templates (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_type_id BIGINT NOT NULL REFERENCES business_types(id),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    template_json JSONB NOT NULL, -- n8n workflow template
    version VARCHAR(20) DEFAULT '1.0.0',
    is_active BOOLEAN DEFAULT true,
    
    -- Template metadata
    features JSONB DEFAULT '{}', -- Supported features for this template
    requirements JSONB DEFAULT '{}', -- Required integrations/settings
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Ensure unique template per business type
    UNIQUE(business_type_id, version)
);

-- Create indexes for workflow_templates
CREATE INDEX IF NOT EXISTS idx_workflow_templates_business_type ON workflow_templates (business_type_id);
CREATE INDEX IF NOT EXISTS idx_workflow_templates_active ON workflow_templates (is_active);

-- =====================================================
-- 3. ADD BUSINESS TYPE TO USERS TABLE
-- =====================================================
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS business_type_id BIGINT REFERENCES business_types(id);

-- Create index for user business type lookups
CREATE INDEX IF NOT EXISTS idx_users_business_type ON users (business_type_id);

-- =====================================================
-- 4. UPDATE ONBOARDING PROGRESS TRACKING
-- =====================================================
-- Add business type step to existing onboarding progress
-- This integrates with your existing onboarding system

-- =====================================================
-- 5. ENABLE RLS ON NEW TABLES
-- =====================================================
ALTER TABLE business_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE workflow_templates ENABLE ROW LEVEL SECURITY;

-- RLS Policies for business_types (public read access for active types)
CREATE POLICY "Anyone can view active business types" ON business_types
    FOR SELECT USING (is_active = true);

-- RLS Policies for workflow_templates (public read access for active templates)
CREATE POLICY "Anyone can view active workflow templates" ON workflow_templates
    FOR SELECT USING (is_active = true);

-- =====================================================
-- 6. SEED INITIAL DATA
-- =====================================================

-- Insert Hot Tub & Spa business type
INSERT INTO business_types (
    name, 
    description, 
    slug, 
    sort_order,
    default_categories,
    workflow_template_id
) VALUES (
    'Hot Tub & Spa',
    'Email automation for hot tub dealers, service companies, and spa retailers specializing in sales, service calls, parts orders, and warranty claims',
    'hot-tub-spa',
    1,
    '[
        {"name": "Service Calls", "description": "Emergency repairs and maintenance requests", "priority": "high"},
        {"name": "Sales Inquiries", "description": "New customer quotes and product information", "priority": "medium"},
        {"name": "Parts Orders", "description": "Replacement parts and accessories", "priority": "medium"},
        {"name": "Warranty Claims", "description": "Product warranty and support issues", "priority": "high"},
        {"name": "General Support", "description": "General questions and customer support", "priority": "low"}
    ]'::jsonb,
    'floworx-hot-tub-automation-v1'
);

-- Insert workflow template for hot tub businesses
INSERT INTO workflow_templates (
    business_type_id,
    name,
    description,
    template_json,
    version,
    features,
    requirements
) VALUES (
    1, -- Hot Tub & Spa business type
    'Hot Tub Email Automation',
    'Comprehensive email automation for hot tub businesses including service call prioritization, sales lead routing, and warranty claim processing',
    '{
        "name": "Floworx Hot Tub Email Automation",
        "nodes": [
            {
                "parameters": {},
                "name": "Gmail Trigger",
                "type": "n8n-nodes-base.gmailTrigger",
                "typeVersion": 1,
                "position": [250, 300],
                "webhookId": "gmail-webhook",
                "credentials": {
                    "gmailOAuth2": "gmail_oauth"
                }
            },
            {
                "parameters": {
                    "conditions": {
                        "string": [
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "service"
                            },
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "repair"
                            },
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "emergency"
                            }
                        ]
                    }
                },
                "name": "Is Service Call?",
                "type": "n8n-nodes-base.if",
                "typeVersion": 1,
                "position": [450, 300]
            },
            {
                "parameters": {
                    "labelIds": ["URGENT_SERVICE"]
                },
                "name": "Label as Urgent Service",
                "type": "n8n-nodes-base.gmail",
                "typeVersion": 1,
                "position": [650, 200]
            },
            {
                "parameters": {
                    "conditions": {
                        "string": [
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "quote"
                            },
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "price"
                            },
                            {
                                "value1": "={{$json.subject.toLowerCase()}}",
                                "operation": "contains",
                                "value2": "interested"
                            }
                        ]
                    }
                },
                "name": "Is Sales Inquiry?",
                "type": "n8n-nodes-base.if",
                "typeVersion": 1,
                "position": [650, 400]
            },
            {
                "parameters": {
                    "labelIds": ["SALES_LEAD"]
                },
                "name": "Label as Sales Lead",
                "type": "n8n-nodes-base.gmail",
                "typeVersion": 1,
                "position": [850, 400]
            }
        ],
        "connections": {
            "Gmail Trigger": {
                "main": [
                    [
                        {
                            "node": "Is Service Call?",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Is Service Call?": {
                "main": [
                    [
                        {
                            "node": "Label as Urgent Service",
                            "type": "main",
                            "index": 0
                        }
                    ],
                    [
                        {
                            "node": "Is Sales Inquiry?",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Is Sales Inquiry?": {
                "main": [
                    [
                        {
                            "node": "Label as Sales Lead",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            }
        },
        "active": false,
        "settings": {},
        "staticData": {}
    }'::jsonb,
    '1.0.0',
    '{
        "email_categorization": true,
        "priority_routing": true,
        "team_notifications": true,
        "gmail_labeling": true,
        "service_call_detection": true,
        "sales_lead_routing": true,
        "warranty_processing": true
    }'::jsonb,
    '{
        "gmail_oauth": true,
        "team_email_addresses": true,
        "business_categories": ["Service Calls", "Sales Inquiries", "Parts Orders", "Warranty Claims"]
    }'::jsonb
);

-- =====================================================
-- 7. UTILITY FUNCTIONS
-- =====================================================

-- Function to get business types for selection UI
CREATE OR REPLACE FUNCTION get_active_business_types()
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(255),
    description TEXT,
    slug VARCHAR(100),
    default_categories JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        bt.id,
        bt.name,
        bt.description,
        bt.slug,
        bt.default_categories
    FROM business_types bt
    WHERE bt.is_active = true
    ORDER BY bt.sort_order, bt.name;
END;
$$ LANGUAGE plpgsql;

-- Function to get workflow template for business type
CREATE OR REPLACE FUNCTION get_workflow_template_for_business_type(p_business_type_id BIGINT)
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(255),
    template_json JSONB,
    features JSONB,
    requirements JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        wt.id,
        wt.name,
        wt.template_json,
        wt.features,
        wt.requirements
    FROM workflow_templates wt
    WHERE wt.business_type_id = p_business_type_id
    AND wt.is_active = true
    ORDER BY wt.created_at DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 8. VERIFICATION QUERY
-- =====================================================
SELECT 
    table_name,
    column_name,
    data_type,
    is_nullable
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name IN ('business_types', 'workflow_templates')
ORDER BY table_name, ordinal_position;
