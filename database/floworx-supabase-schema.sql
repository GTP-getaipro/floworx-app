-- =====================================================
-- FLOWORX SAAS MULTI-TENANT DATABASE SCHEMA
-- Dynamic n8n Workflow Configuration System
-- =====================================================

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =====================================================
-- 1. SUPABASE AUTH INTEGRATION
-- =====================================================
-- Note: Supabase automatically manages auth.users table
-- We'll reference it for our foreign keys
-- Ensure JWT_SECRET matches your backend configuration

-- =====================================================
-- 2. CREDENTIALS TABLE - Secure OAuth Token Storage
-- =====================================================
CREATE TABLE IF NOT EXISTS public.credentials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  service_name TEXT NOT NULL CHECK (service_name IN ('google', 'microsoft', 'n8n')),
  access_token TEXT NOT NULL, -- Encrypted using ENCRYPTION_KEY
  refresh_token TEXT, -- Encrypted using ENCRYPTION_KEY (nullable for some services)
  token_type TEXT DEFAULT 'Bearer',
  scope TEXT, -- OAuth scopes granted
  expiry_date TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Ensure one credential per service per user
  UNIQUE(user_id, service_name)
);

-- Add indexes for performance
CREATE INDEX idx_credentials_user_id ON public.credentials(user_id);
CREATE INDEX idx_credentials_service ON public.credentials(service_name);
CREATE INDEX idx_credentials_expiry ON public.credentials(expiry_date);

-- =====================================================
-- 3. BUSINESS CONFIGS - Core Dynamic Configuration
-- =====================================================
CREATE TABLE IF NOT EXISTS public.business_configs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  config_json JSONB NOT NULL,
  version INTEGER DEFAULT 1, -- For configuration versioning
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add unique constraint for one active config per user
CREATE UNIQUE INDEX idx_business_configs_user_active ON public.business_configs(user_id) WHERE is_active = true;

-- Add indexes for JSONB queries and performance
CREATE INDEX idx_business_configs_user_id ON public.business_configs(user_id);
CREATE INDEX idx_business_configs_active ON public.business_configs(is_active) WHERE is_active = true;
CREATE INDEX idx_business_configs_json ON public.business_configs USING GIN (config_json);

-- =====================================================
-- 4. WORKFLOW DEPLOYMENTS - n8n Workflow Tracking
-- =====================================================
CREATE TABLE IF NOT EXISTS public.workflow_deployments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  business_config_id BIGINT REFERENCES public.business_configs(id) ON DELETE CASCADE NOT NULL,
  n8n_workflow_id TEXT NOT NULL, -- n8n's internal workflow ID
  workflow_name TEXT NOT NULL,
  webhook_url TEXT, -- n8n webhook URL for this workflow
  status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'paused', 'error', 'deleted')),
  deployment_data JSONB, -- Store n8n deployment response
  last_execution TIMESTAMPTZ,
  execution_count INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add indexes
CREATE INDEX idx_workflow_deployments_user_id ON public.workflow_deployments(user_id);
CREATE INDEX idx_workflow_deployments_status ON public.workflow_deployments(status);
CREATE INDEX idx_workflow_deployments_n8n_id ON public.workflow_deployments(n8n_workflow_id);

-- =====================================================
-- 5. ONBOARDING PROGRESS - Track User Journey
-- =====================================================
CREATE TABLE IF NOT EXISTS public.onboarding_progress (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  current_step TEXT NOT NULL DEFAULT 'welcome',
  completed_steps TEXT[] DEFAULT '{}',
  step_data JSONB DEFAULT '{}', -- Store data from each step
  google_connected BOOLEAN DEFAULT false,
  workflow_deployed BOOLEAN DEFAULT false,
  onboarding_completed BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- One onboarding record per user
  UNIQUE(user_id)
);

-- Add indexes
CREATE INDEX idx_onboarding_progress_user_id ON public.onboarding_progress(user_id);
CREATE INDEX idx_onboarding_progress_step ON public.onboarding_progress(current_step);
CREATE INDEX idx_onboarding_progress_completed ON public.onboarding_progress(onboarding_completed);

-- =====================================================
-- 6. ANALYTICS & USAGE TRACKING
-- =====================================================
CREATE TABLE IF NOT EXISTS public.user_analytics (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  event_type TEXT NOT NULL, -- 'onboarding_start', 'step_completion', 'workflow_execution', etc.
  event_data JSONB,
  session_id TEXT,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Add indexes for analytics queries
CREATE INDEX idx_user_analytics_user_id ON public.user_analytics(user_id);
CREATE INDEX idx_user_analytics_event_type ON public.user_analytics(event_type);
CREATE INDEX idx_user_analytics_created_at ON public.user_analytics(created_at);

-- =====================================================
-- 7. ROW LEVEL SECURITY (RLS) POLICIES
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE public.credentials ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.business_configs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workflow_deployments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.onboarding_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_analytics ENABLE ROW LEVEL SECURITY;

-- RLS Policies for CREDENTIALS table
CREATE POLICY "Users can only access their own credentials" ON public.credentials
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for BUSINESS_CONFIGS table
CREATE POLICY "Users can only access their own business configs" ON public.business_configs
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for WORKFLOW_DEPLOYMENTS table
CREATE POLICY "Users can only access their own workflow deployments" ON public.workflow_deployments
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for ONBOARDING_PROGRESS table
CREATE POLICY "Users can only access their own onboarding progress" ON public.onboarding_progress
  FOR ALL USING (auth.uid() = user_id);

-- RLS Policies for USER_ANALYTICS table
CREATE POLICY "Users can only access their own analytics" ON public.user_analytics
  FOR ALL USING (auth.uid() = user_id);

-- =====================================================
-- 8. CONFIGURATION VALIDATION FUNCTIONS
-- =====================================================

-- Function to validate business config JSON structure
CREATE OR REPLACE FUNCTION validate_business_config(config_data JSONB)
RETURNS BOOLEAN AS $$
BEGIN
  -- Check required fields exist
  IF NOT (config_data ? 'business_name' AND
          config_data ? 'contact_email' AND
          config_data ? 'email_categories' AND
          config_data ? 'gmail_label_mappings') THEN
    RETURN FALSE;
  END IF;

  -- Validate email format
  IF NOT (config_data->>'contact_email' ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN
    RETURN FALSE;
  END IF;

  -- Validate email_categories is an array
  IF NOT (jsonb_typeof(config_data->'email_categories') = 'array') THEN
    RETURN FALSE;
  END IF;

  -- Validate gmail_label_mappings is an object
  IF NOT (jsonb_typeof(config_data->'gmail_label_mappings') = 'object') THEN
    RETURN FALSE;
  END IF;

  RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- Add constraint to business_configs table
ALTER TABLE public.business_configs
ADD CONSTRAINT valid_config_json
CHECK (validate_business_config(config_json));

-- =====================================================
-- 9. TRIGGER FUNCTIONS FOR AUTOMATION
-- =====================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add triggers to update updated_at columns
CREATE TRIGGER update_credentials_updated_at
  BEFORE UPDATE ON public.credentials
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_business_configs_updated_at
  BEFORE UPDATE ON public.business_configs
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_workflow_deployments_updated_at
  BEFORE UPDATE ON public.workflow_deployments
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_onboarding_progress_updated_at
  BEFORE UPDATE ON public.onboarding_progress
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- 10. UTILITY FUNCTIONS FOR n8n INTEGRATION
-- =====================================================

-- Function to get active business config for a user
CREATE OR REPLACE FUNCTION get_user_business_config(p_user_id UUID)
RETURNS JSONB AS $$
DECLARE
  config_data JSONB;
BEGIN
  SELECT config_json INTO config_data
  FROM public.business_configs
  WHERE user_id = p_user_id AND is_active = true
  LIMIT 1;

  RETURN COALESCE(config_data, '{}'::JSONB);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get decrypted credentials for a user and service
CREATE OR REPLACE FUNCTION get_user_credentials(p_user_id UUID, p_service_name TEXT)
RETURNS TABLE(
  access_token TEXT,
  refresh_token TEXT,
  expiry_date TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    pgp_sym_decrypt(c.access_token::BYTEA, current_setting('app.encryption_key')) as access_token,
    CASE
      WHEN c.refresh_token IS NOT NULL THEN
        pgp_sym_decrypt(c.refresh_token::BYTEA, current_setting('app.encryption_key'))
      ELSE NULL
    END as refresh_token,
    c.expiry_date
  FROM public.credentials c
  WHERE c.user_id = p_user_id AND c.service_name = p_service_name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 11. SAMPLE BUSINESS CONFIG STRUCTURE
-- =====================================================

-- This is the exact JSON structure your onboarding wizard should populate
-- and your n8n workflow template should consume

/*
SAMPLE business_configs.config_json structure:

{
  "business_name": "Acme Corp Solutions",
  "contact_phone": "+1-555-123-4567",
  "contact_email": "info@acmecorp.com",
  "internal_domains": ["acmecorp.com", "acme-solutions.com"],
  "website_links": {
    "homepage": "https://www.acmecorp.com",
    "services": "https://www.acmecorp.com/services",
    "contact": "https://www.acmecorp.com/contact",
    "about": "https://www.acmecorp.com/about"
  },
  "email_categories": ["SALES", "SUPPORT", "BILLING", "GENERAL", "URGENT"],
  "personnel": [
    {
      "name": "John Smith",
      "role": "Sales Manager",
      "email": "john.smith@acmecorp.com",
      "phone": "+1-555-123-4568",
      "categories": ["SALES"]
    },
    {
      "name": "Sarah Johnson",
      "role": "Support Lead",
      "email": "sarah.johnson@acmecorp.com",
      "phone": "+1-555-123-4569",
      "categories": ["SUPPORT", "URGENT"]
    }
  ],
  "gmail_label_mappings": {
    "SALES": "Label_1234567890",
    "SUPPORT": "Label_0987654321",
    "BILLING": "Label_1122334455",
    "GENERAL": "Label_5566778899",
    "URGENT": "Label_9988776655"
  },
  "notification_preferences": {
    "email_routing": true,
    "team_notifications": true,
    "sms_alerts": false,
    "slack_integration": false
  },
  "business_hours": {
    "timezone": "America/New_York",
    "monday": {"start": "09:00", "end": "17:00"},
    "tuesday": {"start": "09:00", "end": "17:00"},
    "wednesday": {"start": "09:00", "end": "17:00"},
    "thursday": {"start": "09:00", "end": "17:00"},
    "friday": {"start": "09:00", "end": "17:00"},
    "saturday": null,
    "sunday": null
  },
  "auto_response_templates": {
    "SALES": "Thank you for your interest! A sales representative will contact you within 2 business hours.",
    "SUPPORT": "We've received your support request. Our team will respond within 4 hours during business hours.",
    "BILLING": "Your billing inquiry has been received. Our accounting team will respond within 1 business day."
  }
}
*/
