{
  "info": {
    "name": "FloWorx API Security & Validation Tests",
    "description": "Comprehensive API testing for error handling and input validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "Valid Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"companyName\": \"Test Company Inc.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201 or 409', function () {",
                  "    pm.expect([201, 409]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has consistent error format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (pm.response.code !== 201) {",
                  "        pm.expect(jsonData).to.have.property('success', false);",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "        pm.expect(jsonData.error).to.have.property('type');",
                  "        pm.expect(jsonData.error).to.have.property('message');",
                  "        pm.expect(jsonData.error).to.have.property('code');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Email - Validation Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error format is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.type).to.eql('VALIDATION_ERROR');",
                  "    pm.expect(jsonData.error.details).to.be.an('array');",
                  "    pm.expect(jsonData.error.details[0]).to.have.property('field', 'email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Weak Password - Security Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Weak password rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.details.some(d => d.field === 'password')).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Disposable Email - Security Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@tempmail.org\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Disposable email rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.details.some(d => d.message.includes('Disposable email'))).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "XSS Attack - Security Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"<script>alert('xss')</script>John\",\n  \"lastName\": \"Doe<img src=x onerror=alert(1)>\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('XSS content sanitized or rejected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (pm.response.code === 201) {",
                  "        pm.expect(jsonData.user.firstName).to.not.include('<script>');",
                  "        pm.expect(jsonData.user.lastName).to.not.include('<img');",
                  "    } else {",
                  "        pm.expect(pm.response.code).to.eql(400);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "SQL Injection - Security Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com'; DROP TABLE users; --\",\n  \"password\": \"' OR '1'='1\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('SQL injection attempt blocked', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.type).to.eql('VALIDATION_ERROR');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Malformed JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"invalid\": json}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Malformed JSON handled gracefully', function () {",
                  "    pm.expect([400, 500]).to.include(pm.response.code);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error).to.have.property('type');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "404 Not Found",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/auth/non-existent-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "non-existent-route"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('404 error format is correct', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.error.type).to.eql('NOT_FOUND_ERROR');",
                  "    pm.expect(jsonData.error.code).to.eql(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Security Headers Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/auth/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Security headers present', function () {",
                  "    pm.expect(pm.response.headers.get('x-content-type-options')).to.eql('nosniff');",
                  "    pm.expect(pm.response.headers.get('x-frame-options')).to.be.oneOf(['DENY', 'SAMEORIGIN']);",
                  "    pm.expect(pm.response.headers.get('x-xss-protection')).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "Rate Limit Test - Multiple Requests",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"ratelimit@example.com\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"Rate\",\n  \"lastName\": \"Limit\",\n  \"companyName\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rate limiting working', function () {",
                  "    // After multiple requests, should get 429",
                  "    if (pm.response.code === 429) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.be.false;",
                  "        pm.expect(jsonData.error.type).to.eql('RATE_LIMIT_ERROR');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
