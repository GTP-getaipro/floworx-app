version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: floworx-app
    ports:
      - "80:5000"
    environment:
      # Core Application Settings
      - NODE_ENV=production
      - PORT=5000
      - BUILD_ENV=production
      - DEPLOYMENT_PLATFORM=coolify

      # Database Configuration (Coolify managed PostgreSQL)
      - DATABASE_URL=${DATABASE_URL}

      # Redis/KeyDB Configuration (Coolify managed)
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_URL=${REDIS_URL}

      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}

      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}

      # Application URLs
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}

      # N8N Integration (optional)
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_API_KEY=${N8N_API_KEY}
      - N8N_BASE_URL=${N8N_BASE_URL}

      # Performance Configuration
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE}
      - COMPRESSION_LEVEL=${COMPRESSION_LEVEL}
      - CACHE_TTL=${CACHE_TTL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL}

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    restart: unless-stopped

    # Resource limits for Coolify
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

# Note: PostgreSQL and Redis services are managed by Coolify
# Remove the local postgres-db and redis-db services for Coolify deployment
