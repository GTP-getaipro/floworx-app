[
  {
    "filePath": "C:\\FloworxInvite\\backend\\.eslintrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\.prettierrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\config\\database.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\block-navigation.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 20,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 20,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 67,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 67,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 67,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 67,
        "endColumn": 63,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 68,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 68,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 87,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 87,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\lcov-report\\block-navigation.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 20,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 20,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 67,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 67,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 67,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 67,
        "endColumn": 63,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 68,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 68,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 87,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 87,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\lcov-report\\prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 3893,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 3895,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 4061,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4063,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'at' is already defined.",
        "line": 2,
        "column": 4089,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4091,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4604,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4606,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4665,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4667,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4670,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4672,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4691,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4693,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'af' is already defined.",
        "line": 2,
        "column": 4789,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4791,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4854,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4856,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4859,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4861,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4949,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4951,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4970,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4972,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'V' is already defined.",
        "line": 2,
        "column": 5216,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5217,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'U' is already defined.",
        "line": 2,
        "column": 5220,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5221,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ae' is already defined.",
        "line": 2,
        "column": 5244,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5246,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 5512,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 5518,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 5539,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 5547,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 6621,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 6635,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [6638, 6656],
              "text": "Object.prototype.hasOwnProperty.call(ag, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7590,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7591,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7610, 7611], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7610, 7610], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7592,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7593,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7612, 7613], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7612, 7612], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7594,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7595,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7614, 7615], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7614, 7614], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7601,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7602,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7621, 7622], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7621, 7621], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7616,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7617,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7636, 7637], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7636, 7636], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7628,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7629,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7648, 7649], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7648, 7648], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7637,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7638,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7657, 7658], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7657, 7657], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7639,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7640,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7659, 7660], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7659, 7659], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7641,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7642,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7661, 7662], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7661, 7661], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7647,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7648,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7667, 7668], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7667, 7667], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7649,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7650,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7669, 7670], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7669, 7669], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7651,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7652,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7671, 7672], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7671, 7671], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7658,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7659,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7678, 7679], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7678, 7678], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7673,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7674,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7693, 7694], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7693, 7693], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7705, 7706], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7705, 7705], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7694,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7695,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7714, 7715], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7714, 7714], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7696,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7697,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7716, 7717], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7716, 7716], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7698,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7699,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7718, 7719], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7718, 7718], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7704,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7705,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7724, 7725], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7724, 7724], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7713,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7714,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7733, 7734], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7733, 7733], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7730,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7731,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7750, 7751], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7750, 7750], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7736,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7737,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7756, 7757], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7756, 7756], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7745,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7746,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7765, 7766], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7765, 7765], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7762,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7763,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7782, 7783], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7782, 7782], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7826,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7827,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7846, 7847], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7846, 7846], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7855, 7856], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7855, 7855], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7852,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7853,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7872, 7873], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7872, 7872], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7858,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7859,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7878, 7879], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7878, 7878], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7867,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7868,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7887, 7888], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7887, 7887], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7884,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7885,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7904, 7905], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7904, 7904], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7890,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7891,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7910, 7911], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7910, 7910], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7899,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7900,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7919, 7920], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7919, 7919], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7916,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7917,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7936, 7937], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7936, 7936], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7958,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7959,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7978, 7979], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7978, 7978], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7967,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7968,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7987, 7988], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7987, 7987], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7983,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7984,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8003, 8004], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8003, 8003], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7989,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7990,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8009, 8010], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8009, 8009], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8018, 8019], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8018, 8018], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8014,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8015,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8034, 8035], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8034, 8034], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8071,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8072,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8091, 8092], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8091, 8091], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8078,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8079,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8098, 8099], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8098, 8098], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8082,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8083,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8102, 8103], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8102, 8102], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8084,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8085,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8104, 8105], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8104, 8104], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8091,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8092,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8111, 8112], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8111, 8111], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\..",
        "line": 2,
        "column": 9231,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9232,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9251, 9252], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9251, 9251], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 9235,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9236,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9255, 9256], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9255, 9255], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 9237,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9238,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9257, 9258], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9257, 9257], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 9239,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9240,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9259, 9260], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9259, 9259], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 9241,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9242,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9261, 9262], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9261, 9261], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\#.",
        "line": 2,
        "column": 9243,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9244,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9263, 9264], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9263, 9263], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 9523,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 9529,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'Y' is already defined.",
        "line": 2,
        "column": 10812,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 10813,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'navigator' is not defined.",
        "line": 2,
        "column": 11008,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 11017,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 11414,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11416,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ae" },
            "fix": { "range": [11430, 11442], "text": "" },
            "desc": "Remove unused variable 'ae'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'af' is assigned a value but never used.",
        "line": 2,
        "column": 11438,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11440,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "af" },
            "fix": { "range": [11454, 11468], "text": "" },
            "desc": "Remove unused variable 'af'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ag' is assigned a value but never used.",
        "line": 2,
        "column": 11471,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11473,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ag" },
            "fix": { "range": [11487, 11499], "text": "" },
            "desc": "Remove unused variable 'ag'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'W' is already defined.",
        "line": 2,
        "column": 11501,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 11502,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 11964,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 11978,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [11982, 11999],
              "text": "Object.prototype.hasOwnProperty.call(t, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 11998,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 12004,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'console' is not defined.",
        "line": 2,
        "column": 12014,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 12021,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 12097,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 12111,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [12115, 12132],
              "text": "Object.prototype.hasOwnProperty.call(t, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 12253,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12254,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12273, 12274], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12273, 12273], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 12269,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12270,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12289, 12290], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12289, 12289], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12705, 12706], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12705, 12705], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12689,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12690,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12709, 12710], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12709, 12709], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12693,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12694,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12713, 12714], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12713, 12713], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12697,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12698,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12717, 12718], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12717, 12717], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12701,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12702,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12721, 12722], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12721, 12721], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12705,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12706,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12725, 12726], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12725, 12725], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12855, 12856], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12855, 12855], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12837,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12838,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12857, 12858], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12857, 12857], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12849,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12850,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12869, 12870], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12869, 12869], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12851,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12852,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12871, 12872], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12871, 12871], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12855,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12856,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12875, 12876], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12875, 12875], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12881,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12882,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12901, 12902], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12901, 12901], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12913,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12914,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12933, 12934], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12933, 12933], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12918,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12919,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12938, 12939], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12938, 12938], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12923,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12924,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12943, 12944], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12943, 12943], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12954,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12955,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12974, 12975], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12974, 12974], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12959,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12960,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12979, 12980], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12979, 12979], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12964,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12965,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12984, 12985], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12984, 12984], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13018, 13019], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13018, 13018], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13000,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13001,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13020, 13021], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13020, 13020], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13038,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13039,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13058, 13059], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13058, 13058], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13043,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13044,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13063, 13064], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13063, 13063], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13048,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13049,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13068, 13069], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13068, 13068], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13080,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13081,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13100, 13101], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13100, 13100], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13085,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13086,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13105, 13106], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13105, 13105], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13090,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13091,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13110, 13111], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13110, 13110], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13125,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13126,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13145, 13146], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13145, 13145], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13127,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13128,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13147, 13148], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13147, 13147], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 14225,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14231,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'console' is not defined.",
        "line": 2,
        "column": 14233,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14240,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 14293,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14301,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 14462,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14470,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 14757,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14759,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ae" },
            "fix": { "range": [14773, 14798], "text": "" },
            "desc": "Remove unused variable 'ae'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 14799,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14805,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setTimeout' is not defined.",
        "line": 2,
        "column": 15450,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15460,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15491,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15497,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15515,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15521,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15536,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15542,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15786,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15788,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15809,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15811,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15835,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15837,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15875,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15877,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 15892,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15893,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [15912, 15913], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [15912, 15912], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 15908,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15909,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [15928, 15929], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [15928, 15928], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15918,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15920,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16362,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16364,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16410,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16412,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16453,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16455,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16498,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16500,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16551,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16553,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16574,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16576,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16597,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16599,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16646,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16648,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16661,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16662,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16681, 16682], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16681, 16681], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16676,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16677,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16696, 16697], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16696, 16696], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16708,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16709,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16728, 16729], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16728, 16728], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16719,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16721,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16734,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16735,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16754, 16755], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16754, 16754], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16749,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16750,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16769, 16770], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16769, 16769], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16781,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16782,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16801, 16802], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16801, 16801], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 16817,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16818,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16837, 16838], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16837, 16837], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16819,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16820,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16839, 16840], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16839, 16839], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16821,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16822,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16841, 16842], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16841, 16841], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16833,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16835,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 16860,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16861,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16880, 16881], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16880, 16880], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 16991,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16992,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17011, 17012], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17011, 17011], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17026,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17028,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 17059,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17060,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17079, 17080], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17079, 17079], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17079,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17081,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17111,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17113,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17161,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17163,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17203,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17205,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17256,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17257,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17276, 17277], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17276, 17276], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17285,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17287,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17311,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17312,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17331, 17332], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17331, 17331], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17313,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17314,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17333, 17334], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17333, 17333], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17331,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17333,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17354,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17356,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17380,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17382,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17435,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17436,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17455, 17456], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17455, 17455], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17477,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17479,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17500,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17502,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17526,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17528,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 17543,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17544,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17563, 17564], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17563, 17563], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17545,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17546,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17565, 17566], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17565, 17565], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17547,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17548,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17567, 17568], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17567, 17567], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\lcov-report\\sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 12,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 12,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 28,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 28,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 29,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 29,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 36,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 60,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 60,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 128,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 128,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 210,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 210,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 3893,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 3895,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ar' is already defined.",
        "line": 2,
        "column": 4061,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4063,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'at' is already defined.",
        "line": 2,
        "column": 4089,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4091,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4604,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4606,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4665,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4667,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4670,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4672,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4691,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4693,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'af' is already defined.",
        "line": 2,
        "column": 4789,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4791,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4854,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4856,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'am' is already defined.",
        "line": 2,
        "column": 4859,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4861,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ak' is already defined.",
        "line": 2,
        "column": 4949,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4951,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ag' is already defined.",
        "line": 2,
        "column": 4970,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 4972,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'V' is already defined.",
        "line": 2,
        "column": 5216,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5217,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'U' is already defined.",
        "line": 2,
        "column": 5220,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5221,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'ae' is already defined.",
        "line": 2,
        "column": 5244,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 5246,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 5512,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 5518,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 5539,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 5547,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 6621,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 6635,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [6638, 6656],
              "text": "Object.prototype.hasOwnProperty.call(ag, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7590,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7591,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7610, 7611], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7610, 7610], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7592,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7593,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7612, 7613], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7612, 7612], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7594,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7595,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7614, 7615], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7614, 7614], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7601,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7602,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7621, 7622], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7621, 7621], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7616,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7617,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7636, 7637], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7636, 7636], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7628,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7629,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7648, 7649], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7648, 7648], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7637,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7638,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7657, 7658], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7657, 7657], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7639,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7640,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7659, 7660], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7659, 7659], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7641,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7642,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7661, 7662], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7661, 7661], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7647,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7648,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7667, 7668], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7667, 7667], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7649,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7650,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7669, 7670], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7669, 7669], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7651,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7652,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7671, 7672], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7671, 7671], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7658,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7659,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7678, 7679], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7678, 7678], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7673,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7674,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7693, 7694], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7693, 7693], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7705, 7706], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7705, 7705], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7694,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7695,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7714, 7715], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7714, 7714], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7696,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7697,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7716, 7717], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7716, 7716], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7698,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7699,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7718, 7719], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7718, 7718], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7704,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7705,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7724, 7725], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7724, 7724], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7713,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7714,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7733, 7734], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7733, 7733], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7730,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7731,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7750, 7751], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7750, 7750], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7736,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7737,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7756, 7757], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7756, 7756], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7745,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7746,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7765, 7766], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7765, 7765], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7762,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7763,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7782, 7783], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7782, 7782], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7826,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7827,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7846, 7847], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7846, 7846], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7855, 7856], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7855, 7855], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7852,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7853,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7872, 7873], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7872, 7872], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7858,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7859,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7878, 7879], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7878, 7878], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7867,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7868,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7887, 7888], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7887, 7887], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7884,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7885,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7904, 7905], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7904, 7904], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7890,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7891,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7910, 7911], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7910, 7910], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7899,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7900,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7919, 7920], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7919, 7919], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 7916,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7917,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7936, 7937], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7936, 7936], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7958,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7959,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7978, 7979], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7978, 7978], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7967,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7968,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [7987, 7988], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [7987, 7987], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 7983,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7984,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8003, 8004], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8003, 8003], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7989,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7990,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8009, 8010], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8009, 8009], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 7998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 7999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8018, 8019], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8018, 8018], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8014,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8015,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8034, 8035], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8034, 8034], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8071,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8072,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8091, 8092], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8091, 8091], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8078,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8079,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8098, 8099], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8098, 8098], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8082,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8083,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8102, 8103], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8102, 8102], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8084,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8085,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8104, 8105], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8104, 8104], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 8091,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 8092,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [8111, 8112], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [8111, 8111], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\..",
        "line": 2,
        "column": 9231,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9232,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9251, 9252], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9251, 9251], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 9235,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9236,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9255, 9256], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9255, 9255], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 9237,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9238,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9257, 9258], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9257, 9257], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\`.",
        "line": 2,
        "column": 9239,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9240,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9259, 9260], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9259, 9259], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 9241,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9242,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9261, 9262], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9261, 9261], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\#.",
        "line": 2,
        "column": 9243,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 9244,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [9263, 9264], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [9263, 9263], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 9523,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 9529,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'Y' is already defined.",
        "line": 2,
        "column": 10812,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 10813,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'navigator' is not defined.",
        "line": 2,
        "column": 11008,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 11017,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 11414,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11416,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ae" },
            "fix": { "range": [11430, 11442], "text": "" },
            "desc": "Remove unused variable 'ae'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'af' is assigned a value but never used.",
        "line": 2,
        "column": 11438,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11440,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "af" },
            "fix": { "range": [11454, 11468], "text": "" },
            "desc": "Remove unused variable 'af'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ag' is assigned a value but never used.",
        "line": 2,
        "column": 11471,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11473,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ag" },
            "fix": { "range": [11487, 11499], "text": "" },
            "desc": "Remove unused variable 'ag'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-redeclare",
        "severity": 2,
        "message": "'W' is already defined.",
        "line": 2,
        "column": 11501,
        "nodeType": "Identifier",
        "messageId": "redeclared",
        "endLine": 2,
        "endColumn": 11502,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 11964,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 11978,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [11982, 11999],
              "text": "Object.prototype.hasOwnProperty.call(t, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 11998,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 12004,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'console' is not defined.",
        "line": 2,
        "column": 12014,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 12021,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-prototype-builtins",
        "severity": 2,
        "message": "Do not access Object.prototype method 'hasOwnProperty' from target object.",
        "line": 2,
        "column": 12097,
        "nodeType": "CallExpression",
        "messageId": "prototypeBuildIn",
        "endLine": 2,
        "endColumn": 12111,
        "suggestions": [
          {
            "messageId": "callObjectPrototype",
            "data": { "prop": "hasOwnProperty" },
            "fix": {
              "range": [12115, 12132],
              "text": "Object.prototype.hasOwnProperty.call(t, "
            },
            "desc": "Call Object.prototype.hasOwnProperty explicitly."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 12253,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12254,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12273, 12274], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12273, 12273], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 12269,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12270,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12289, 12290], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12289, 12289], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12685,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12686,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12705, 12706], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12705, 12705], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12689,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12690,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12709, 12710], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12709, 12709], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12693,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12694,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12713, 12714], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12713, 12713], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12697,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12698,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12717, 12718], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12717, 12717], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12701,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12702,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12721, 12722], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12721, 12721], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12705,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12706,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12725, 12726], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12725, 12725], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12835,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12836,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12855, 12856], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12855, 12855], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12837,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12838,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12857, 12858], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12857, 12857], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12849,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12850,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12869, 12870], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12869, 12869], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12851,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12852,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12871, 12872], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12871, 12871], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12855,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12856,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12875, 12876], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12875, 12875], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 12881,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12882,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12901, 12902], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12901, 12901], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12913,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12914,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12933, 12934], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12933, 12933], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12918,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12919,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12938, 12939], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12938, 12938], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12923,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12924,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12943, 12944], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12943, 12943], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12954,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12955,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12974, 12975], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12974, 12974], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12959,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12960,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12979, 12980], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12979, 12979], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 12964,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12965,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [12984, 12985], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [12984, 12984], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 12998,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 12999,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13018, 13019], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13018, 13018], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13000,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13001,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13020, 13021], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13020, 13020], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13038,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13039,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13058, 13059], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13058, 13058], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13043,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13044,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13063, 13064], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13063, 13063], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13048,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13049,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13068, 13069], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13068, 13068], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13080,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13081,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13100, 13101], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13100, 13100], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13085,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13086,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13105, 13106], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13105, 13105], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13090,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13091,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13110, 13111], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13110, 13110], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 13125,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13126,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13145, 13146], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13145, 13145], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 13127,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 13128,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [13147, 13148], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [13147, 13147], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 14225,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14231,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'console' is not defined.",
        "line": 2,
        "column": 14233,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14240,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 14293,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14301,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 2,
        "column": 14462,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14470,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 14757,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14759,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ae" },
            "fix": { "range": [14773, 14798], "text": "" },
            "desc": "Remove unused variable 'ae'."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 14799,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 14805,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setTimeout' is not defined.",
        "line": 2,
        "column": 15450,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15460,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15491,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15497,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15515,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15521,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 2,
        "column": 15536,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15542,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15786,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15788,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15809,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15811,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15835,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15837,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15875,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15877,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 15892,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15893,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [15912, 15913], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [15912, 15912], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 15908,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 15909,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [15928, 15929], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [15928, 15928], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 15918,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 15920,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16362,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16364,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16410,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16412,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16453,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16455,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16498,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16500,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16551,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16553,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16574,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16576,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16597,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16599,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16646,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16648,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16661,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16662,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16681, 16682], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16681, 16681], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16676,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16677,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16696, 16697], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16696, 16696], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16708,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16709,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16728, 16729], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16728, 16728], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16719,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16721,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16734,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16735,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16754, 16755], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16754, 16754], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16749,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16750,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16769, 16770], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16769, 16769], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16781,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16782,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16801, 16802], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16801, 16801], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 16817,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16818,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16837, 16838], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16837, 16837], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 16819,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16820,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16839, 16840], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16839, 16839], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 16821,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16822,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16841, 16842], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16841, 16841], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 16833,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 16835,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\!.",
        "line": 2,
        "column": 16860,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16861,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [16880, 16881], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [16880, 16880], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 16991,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 16992,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17011, 17012], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17011, 17011], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17026,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17028,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\/.",
        "line": 2,
        "column": 17059,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17060,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17079, 17080], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17079, 17079], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17079,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17081,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17111,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17113,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17161,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17163,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17203,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17205,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17256,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17257,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17276, 17277], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17276, 17276], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17285,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17287,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17311,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17312,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17331, 17332], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17331, 17331], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17313,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17314,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17333, 17334], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17333, 17333], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17331,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17333,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17354,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17356,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17380,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17382,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 2,
        "column": 17435,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17436,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17455, 17456], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17455, 17455], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17477,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17479,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17500,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17502,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'PR' is not defined.",
        "line": 2,
        "column": 17526,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 2,
        "endColumn": 17528,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 2,
        "column": 17543,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17544,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17563, 17564], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17563, 17563], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\\".",
        "line": 2,
        "column": 17545,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17546,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17565, 17566], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17565, 17565], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\'.",
        "line": 2,
        "column": 17547,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 2,
        "endColumn": 17548,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [17567, 17568], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [17567, 17567], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\coverage\\sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 12,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 12,
        "endColumn": 24,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 28,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 28,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 29,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 29,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 36,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 60,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 60,
        "endColumn": 32,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'document' is not defined.",
        "line": 128,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 128,
        "endColumn": 33,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'window' is not defined.",
        "line": 210,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 210,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\database\\connection.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\database\\supabase-client.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\database\\unified-connection.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\eslint.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\jest.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\middleware\\auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\middleware\\errorHandler.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\middleware\\rateLimiter.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\middleware\\validation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\accountRecovery.js",
    "messages": [
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 236,
        "column": 53,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 236,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [6410, 6416], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 264,
        "column": 73,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 264,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [7218, 7224], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'limit' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 267,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "limit" },
            "fix": { "range": [7295, 7306], "text": "" },
            "desc": "Remove unused variable 'limit'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'offset' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 267,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "offset" },
            "fix": { "range": [7305, 7317], "text": "" },
            "desc": "Remove unused variable 'offset'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const express = require('express');\nconst router = express.Router();\nconst accountRecoveryService = require('../services/accountRecoveryService');\nconst passwordResetService = require('../services/passwordResetService');\nconst { authenticateToken } = require('../middleware/auth');\nconst rateLimit = require('express-rate-limit');\n\n// Rate limiting for recovery requests\nconst recoveryRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many recovery requests. Please try again later.',\n    retryAfter: 15 * 60 // seconds\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\n// Rate limiting for token verification\nconst verifyRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 10, // limit each IP to 10 requests per windowMs\n  message: {\n    success: false,\n    error: 'Too many verification attempts. Please try again later.'\n  }\n});\n\n// POST /api/account-recovery/initiate\n// Initiate account recovery process\nrouter.post('/initiate', recoveryRateLimit, async (req, res) => {\n  try {\n    const { email, recoveryType, recoveryData } = req.body;\n    const ipAddress = req.ip || req.connection.remoteAddress;\n    const userAgent = req.get('User-Agent');\n\n    if (!email || !recoveryType) {\n      return res.status(400).json({\n        success: false,\n        error: 'Email and recovery type are required'\n      });\n    }\n\n    // Validate recovery type\n    const validTypes = ['email_change', 'account_recovery', 'emergency_access', 'account_lockout'];\n    if (!validTypes.includes(recoveryType)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid recovery type'\n      });\n    }\n\n    const result = await accountRecoveryService.initiateAccountRecovery(\n      email,\n      recoveryType,\n      recoveryData || {},\n      ipAddress,\n      userAgent\n    );\n\n    res.json(result);\n  } catch (error) {\n    console.error('Recovery initiation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to initiate account recovery'\n    });\n  }\n});\n\n// POST /api/account-recovery/verify-token\n// Verify recovery token\nrouter.post('/verify-token', verifyRateLimit, async (req, res) => {\n  try {\n    const { token } = req.body;\n\n    if (!token) {\n      return res.status(400).json({\n        valid: false,\n        error: 'Recovery token is required'\n      });\n    }\n\n    const result = await accountRecoveryService.verifyRecoveryToken(token);\n    res.json(result);\n  } catch (error) {\n    console.error('Token verification error:', error);\n    res.status(500).json({\n      valid: false,\n      error: 'Failed to verify recovery token'\n    });\n  }\n});\n\n// POST /api/account-recovery/complete\n// Complete account recovery\nrouter.post('/complete', async (req, res) => {\n  try {\n    const { token, recoveryActions } = req.body;\n    const ipAddress = req.ip || req.connection.remoteAddress;\n    const userAgent = req.get('User-Agent');\n\n    if (!token) {\n      return res.status(400).json({\n        success: false,\n        error: 'Recovery token is required'\n      });\n    }\n\n    if (!recoveryActions || typeof recoveryActions !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: 'Recovery actions are required'\n      });\n    }\n\n    const result = await accountRecoveryService.completeAccountRecovery(\n      token,\n      recoveryActions,\n      ipAddress,\n      userAgent\n    );\n\n    res.json(result);\n  } catch (error) {\n    console.error('Recovery completion error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to complete account recovery'\n    });\n  }\n});\n\n// POST /api/account-recovery/check-lockout\n// Check account lockout status\nrouter.post('/check-lockout', async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({\n        success: false,\n        error: 'Email is required'\n      });\n    }\n\n    const result = await passwordResetService.checkAccountLockout(email);\n    res.json({\n      success: true,\n      ...result\n    });\n  } catch (error) {\n    console.error('Lockout check error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to check account lockout status'\n    });\n  }\n});\n\n// POST /api/account-recovery/unlock-account\n// Unlock account (admin or recovery process)\nrouter.post('/unlock-account', authenticateToken, async (req, res) => {\n  try {\n    const { userId, reason } = req.body;\n    const adminId = req.user.id;\n\n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: 'User ID is required'\n      });\n    }\n\n    // Check if user has admin privileges or is unlocking their own account\n    if (req.user.role !== 'admin' && req.user.id !== userId) {\n      return res.status(403).json({\n        success: false,\n        error: 'Insufficient permissions'\n      });\n    }\n\n    const result = await passwordResetService.unlockAccount(\n      userId,\n      reason || 'manual_unlock',\n      adminId\n    );\n\n    res.json(result);\n  } catch (error) {\n    console.error('Account unlock error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to unlock account'\n    });\n  }\n});\n\n// GET /api/account-recovery/backup-codes\n// Generate backup codes for account recovery\nrouter.get('/backup-codes', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const codes = await accountRecoveryService.generateBackupCodes(10);\n\n    // Store encrypted backup codes in database\n    const backupResult = await accountRecoveryService.createCredentialBackup(\n      userId,\n      'backup_codes',\n      { codes, generatedAt: new Date().toISOString() }\n    );\n\n    if (backupResult.success) {\n      res.json({\n        success: true,\n        codes,\n        message: 'Backup codes generated successfully. Store these in a safe place.',\n        backupId: backupResult.backupId\n      });\n    } else {\n      throw new Error('Failed to store backup codes');\n    }\n  } catch (error) {\n    console.error('Backup codes generation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate backup codes'\n    });\n  }\n});\n\n// POST /api/account-recovery/verify-backup-code\n// Verify backup code for recovery\nrouter.post('/verify-backup-code', async (req, res) => {\n  try {\n    const { email, backupCode } = req.body;\n\n    if (!email || !backupCode) {\n      return res.status(400).json({\n        success: false,\n        error: 'Email and backup code are required'\n      });\n    }\n\n    // This would need to be implemented in the account recovery service\n    // For now, return a placeholder response\n    res.json({\n      success: false,\n      error: 'Backup code verification not yet implemented'\n    });\n  } catch (error) {\n    console.error('Backup code verification error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to verify backup code'\n    });\n  }\n});\n\n// GET /api/account-recovery/security-log/:userId\n// Get security audit log for user (admin or self)\nrouter.get('/security-log/:userId', authenticateToken, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const { limit = 50, offset = 0 } = req.query;\n\n    // Check permissions\n    if (req.user.role !== 'admin' && req.user.id !== userId) {\n      return res.status(403).json({\n        success: false,\n        error: 'Insufficient permissions'\n      });\n    }\n\n    // This would query the security_audit_log table\n    // For now, return a placeholder response\n    res.json({\n      success: true,\n      logs: [],\n      total: 0,\n      message: 'Security log retrieval not yet implemented'\n    });\n  } catch (error) {\n    console.error('Security log retrieval error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve security log'\n    });\n  }\n});\n\nmodule.exports = router;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\analytics.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\businessTypes.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\oauth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\onboarding-v2.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\onboarding.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\passwordReset.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\recovery.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\routes\\workflows.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\scheduler\\n8nScheduler.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\scripts\\quality-check.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'spawn' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "spawn" },
            "fix": { "range": [170, 177], "text": "" },
            "desc": "Remove unused variable 'spawn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'colors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "colors" },
            "fix": { "range": [264, 297], "text": "" },
            "desc": "Remove unused variable 'colors'."
          }
        ]
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 29,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 29,
        "endColumn": 5,
        "fix": { "range": [626, 630], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 30,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 30,
        "endColumn": 7,
        "fix": { "range": [646, 652], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 31,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 31,
        "endColumn": 7,
        "fix": { "range": [702, 708], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 32,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 32,
        "endColumn": 5,
        "fix": { "range": [715, 719], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 33,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 33,
        "endColumn": 7,
        "fix": { "range": [733, 739], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 34,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 34,
        "endColumn": 7,
        "fix": { "range": [787, 793], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 35,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 35,
        "endColumn": 5,
        "fix": { "range": [800, 804], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 36,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 36,
        "endColumn": 7,
        "fix": { "range": [820, 826], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 37,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 37,
        "endColumn": 7,
        "fix": { "range": [879, 885], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 38,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 38,
        "endColumn": 5,
        "fix": { "range": [892, 896], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 39,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 39,
        "endColumn": 5,
        "fix": { "range": [909, 913], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 40,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 40,
        "endColumn": 7,
        "fix": { "range": [922, 928], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 41,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 41,
        "endColumn": 7,
        "fix": { "range": [979, 985], "text": "    " }
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'htmlResult' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "htmlResult" },
            "fix": { "range": [2197, 2313], "text": "" },
            "desc": "Remove unused variable 'htmlResult'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'auditResult' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 146,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "auditResult" },
            "fix": { "range": [4203, 4288], "text": "" },
            "desc": "Remove unused variable 'auditResult'."
          }
        ]
      },
      {
        "ruleId": "curly",
        "severity": 2,
        "message": "Expected { after 'if' condition.",
        "line": 278,
        "column": 35,
        "nodeType": "IfStatement",
        "messageId": "missingCurlyAfterCondition",
        "endLine": 278,
        "endColumn": 96,
        "fix": {
          "range": [8955, 9016],
          "text": "{console.log(`  • ESLint: ${summary.eslint.reportFile}`.blue);}"
        }
      },
      {
        "ruleId": "curly",
        "severity": 2,
        "message": "Expected { after 'if' condition.",
        "line": 279,
        "column": 37,
        "nodeType": "IfStatement",
        "messageId": "missingCurlyAfterCondition",
        "endLine": 279,
        "endColumn": 102,
        "fix": {
          "range": [9053, 9118],
          "text": "{console.log(`  • Security: ${summary.security.reportFile}`.blue);}"
        }
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 283,
        "column": 23,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 283,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [9154, 9160], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 15,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\n/**\n * Comprehensive Code Quality & Security Check Script\n * Automates ESLint, Prettier, security audits, and generates reports\n */\n\nconst { execSync, spawn } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nconst colors = require('colors');\n\n// Configuration\nconst CONFIG = {\n  reportsDir: 'reports',\n  eslintConfig: '.eslintrc.js',\n  prettierConfig: '.prettierrc.js',\n  maxIssues: {\n    eslint: 50,\n    security: 5,\n    coverage: 80\n  }\n};\n\n// Utility functions\nconst log = (message, type = 'info') => {\n  const timestamp = new Date().toISOString();\n  switch (type) {\n    case 'success':\n      console.log(`[${timestamp}] ✅ ${message}`.green);\n      break;\n    case 'error':\n      console.log(`[${timestamp}] ❌ ${message}`.red);\n      break;\n    case 'warning':\n      console.log(`[${timestamp}] ⚠️  ${message}`.yellow);\n      break;\n    case 'info':\n    default:\n      console.log(`[${timestamp}] ℹ️  ${message}`.blue);\n      break;\n  }\n};\n\nconst runCommand = (command, options = {}) => {\n  try {\n    const result = execSync(command, { \n      encoding: 'utf8', \n      stdio: options.silent ? 'pipe' : 'inherit',\n      ...options \n    });\n    return { success: true, output: result };\n  } catch (error) {\n    return { \n      success: false, \n      error: error.message, \n      output: error.stdout || error.stderr || '' \n    };\n  }\n};\n\nconst ensureReportsDir = () => {\n  if (!fs.existsSync(CONFIG.reportsDir)) {\n    fs.mkdirSync(CONFIG.reportsDir, { recursive: true });\n    log(`Created reports directory: ${CONFIG.reportsDir}`, 'info');\n  }\n};\n\nconst generateTimestamp = () => {\n  return new Date().toISOString().replace(/[:.]/g, '-');\n};\n\n// Quality check functions\nconst runESLintCheck = () => {\n  log('Running ESLint analysis...', 'info');\n  \n  const timestamp = generateTimestamp();\n  const reportFile = path.join(CONFIG.reportsDir, `eslint-report-${timestamp}.html`);\n  const jsonReportFile = path.join(CONFIG.reportsDir, `eslint-report-${timestamp}.json`);\n  \n  // Run ESLint with multiple output formats\n  const eslintResult = runCommand(`npx eslint . --ext .js --format json --output-file ${jsonReportFile}`, { silent: true });\n  const htmlResult = runCommand(`npx eslint . --ext .js --format html --output-file ${reportFile}`, { silent: true });\n  \n  let issueCount = 0;\n  let errorCount = 0;\n  let warningCount = 0;\n  \n  if (fs.existsSync(jsonReportFile)) {\n    try {\n      const eslintData = JSON.parse(fs.readFileSync(jsonReportFile, 'utf8'));\n      issueCount = eslintData.reduce((total, file) => total + file.messages.length, 0);\n      errorCount = eslintData.reduce((total, file) => \n        total + file.messages.filter(msg => msg.severity === 2).length, 0);\n      warningCount = eslintData.reduce((total, file) => \n        total + file.messages.filter(msg => msg.severity === 1).length, 0);\n    } catch (error) {\n      log(`Failed to parse ESLint JSON report: ${error.message}`, 'warning');\n    }\n  }\n  \n  const result = {\n    success: eslintResult.success && errorCount === 0,\n    issueCount,\n    errorCount,\n    warningCount,\n    reportFile,\n    jsonReportFile\n  };\n  \n  if (result.success) {\n    log(`ESLint check passed! ${warningCount} warnings found.`, 'success');\n  } else {\n    log(`ESLint check failed! ${errorCount} errors, ${warningCount} warnings found.`, 'error');\n  }\n  \n  if (issueCount > CONFIG.maxIssues.eslint) {\n    log(`Too many ESLint issues (${issueCount} > ${CONFIG.maxIssues.eslint})`, 'warning');\n  }\n  \n  return result;\n};\n\nconst runPrettierCheck = () => {\n  log('Running Prettier format check...', 'info');\n  \n  const result = runCommand('npx prettier --check .', { silent: true });\n  \n  if (result.success) {\n    log('Prettier check passed! All files are properly formatted.', 'success');\n  } else {\n    log('Prettier check failed! Some files need formatting.', 'error');\n    log('Run \"npm run format\" to fix formatting issues.', 'info');\n  }\n  \n  return result;\n};\n\nconst runSecurityAudit = () => {\n  log('Running security audit...', 'info');\n  \n  const timestamp = generateTimestamp();\n  const reportFile = path.join(CONFIG.reportsDir, `security-audit-${timestamp}.json`);\n  \n  // Run npm audit\n  const auditResult = runCommand(`npm audit --json > ${reportFile}`, { silent: true });\n  \n  let vulnerabilityCount = 0;\n  let criticalCount = 0;\n  let highCount = 0;\n  let moderateCount = 0;\n  let lowCount = 0;\n  \n  if (fs.existsSync(reportFile)) {\n    try {\n      const auditData = JSON.parse(fs.readFileSync(reportFile, 'utf8'));\n      if (auditData.metadata && auditData.metadata.vulnerabilities) {\n        const vulns = auditData.metadata.vulnerabilities;\n        criticalCount = vulns.critical || 0;\n        highCount = vulns.high || 0;\n        moderateCount = vulns.moderate || 0;\n        lowCount = vulns.low || 0;\n        vulnerabilityCount = criticalCount + highCount + moderateCount + lowCount;\n      }\n    } catch (error) {\n      log(`Failed to parse security audit report: ${error.message}`, 'warning');\n    }\n  }\n  \n  const result = {\n    success: criticalCount === 0 && highCount === 0,\n    vulnerabilityCount,\n    criticalCount,\n    highCount,\n    moderateCount,\n    lowCount,\n    reportFile\n  };\n  \n  if (result.success) {\n    log(`Security audit passed! ${vulnerabilityCount} total vulnerabilities (${moderateCount} moderate, ${lowCount} low).`, 'success');\n  } else {\n    log(`Security audit failed! ${criticalCount} critical, ${highCount} high vulnerabilities found.`, 'error');\n  }\n  \n  if (vulnerabilityCount > CONFIG.maxIssues.security) {\n    log(`High number of vulnerabilities found (${vulnerabilityCount})`, 'warning');\n  }\n  \n  return result;\n};\n\nconst runTestCoverage = () => {\n  log('Running test coverage analysis...', 'info');\n  \n  const result = runCommand('npm run test:coverage', { silent: true });\n  \n  // Parse coverage from output (simplified)\n  let coveragePercentage = 0;\n  if (result.output) {\n    const coverageMatch = result.output.match(/All files[^|]*\\|[^|]*\\|[^|]*\\|[^|]*\\|[^|]*(\\d+\\.?\\d*)/);\n    if (coverageMatch) {\n      coveragePercentage = parseFloat(coverageMatch[1]);\n    }\n  }\n  \n  const coverageResult = {\n    success: result.success && coveragePercentage >= CONFIG.maxIssues.coverage,\n    coveragePercentage\n  };\n  \n  if (coverageResult.success) {\n    log(`Test coverage passed! ${coveragePercentage}% coverage achieved.`, 'success');\n  } else {\n    log(`Test coverage insufficient! ${coveragePercentage}% < ${CONFIG.maxIssues.coverage}%`, 'error');\n  }\n  \n  return coverageResult;\n};\n\nconst generateSummaryReport = (results) => {\n  const timestamp = generateTimestamp();\n  const summaryFile = path.join(CONFIG.reportsDir, `quality-summary-${timestamp}.json`);\n  \n  const summary = {\n    timestamp: new Date().toISOString(),\n    overall: {\n      success: Object.values(results).every(r => r.success),\n      totalIssues: (results.eslint?.issueCount || 0) + (results.security?.vulnerabilityCount || 0)\n    },\n    eslint: results.eslint,\n    prettier: results.prettier,\n    security: results.security,\n    coverage: results.coverage,\n    recommendations: []\n  };\n  \n  // Generate recommendations\n  if (!results.eslint?.success) {\n    summary.recommendations.push('Fix ESLint errors before deployment');\n  }\n  if (!results.prettier?.success) {\n    summary.recommendations.push('Run \"npm run format\" to fix formatting issues');\n  }\n  if (!results.security?.success) {\n    summary.recommendations.push('Address critical and high security vulnerabilities');\n  }\n  if (!results.coverage?.success) {\n    summary.recommendations.push(`Increase test coverage to at least ${CONFIG.maxIssues.coverage}%`);\n  }\n  \n  fs.writeFileSync(summaryFile, JSON.stringify(summary, null, 2));\n  \n  return { summary, summaryFile };\n};\n\nconst printSummary = (summary) => {\n  console.log('\\n' + '='.repeat(60).cyan);\n  console.log('📊 QUALITY CHECK SUMMARY'.cyan.bold);\n  console.log('='.repeat(60).cyan);\n  \n  const status = summary.overall.success ? '✅ PASSED'.green : '❌ FAILED'.red;\n  console.log(`Overall Status: ${status}`);\n  console.log(`Total Issues: ${summary.overall.totalIssues}`);\n  \n  console.log('\\n📋 DETAILED RESULTS:'.cyan);\n  console.log(`ESLint: ${summary.eslint?.success ? '✅' : '❌'} (${summary.eslint?.errorCount || 0} errors, ${summary.eslint?.warningCount || 0} warnings)`);\n  console.log(`Prettier: ${summary.prettier?.success ? '✅' : '❌'} (formatting check)`);\n  console.log(`Security: ${summary.security?.success ? '✅' : '❌'} (${summary.security?.criticalCount || 0} critical, ${summary.security?.highCount || 0} high)`);\n  console.log(`Coverage: ${summary.coverage?.success ? '✅' : '❌'} (${summary.coverage?.coveragePercentage || 0}%)`);\n  \n  if (summary.recommendations.length > 0) {\n    console.log('\\n💡 RECOMMENDATIONS:'.yellow);\n    summary.recommendations.forEach(rec => console.log(`  • ${rec}`.yellow));\n  }\n  \n  console.log('\\n📁 REPORTS GENERATED:'.blue);\n  if (summary.eslint?.reportFile) console.log(`  • ESLint: ${summary.eslint.reportFile}`.blue);\n  if (summary.security?.reportFile) console.log(`  • Security: ${summary.security.reportFile}`.blue);\n};\n\n// Main execution\nconst main = async () => {\n  console.log('🔍 FloWorx Backend Quality Check'.cyan.bold);\n  console.log('================================'.cyan);\n  \n  ensureReportsDir();\n  \n  const results = {};\n  \n  // Run all quality checks\n  results.eslint = runESLintCheck();\n  results.prettier = runPrettierCheck();\n  results.security = runSecurityAudit();\n  results.coverage = runTestCoverage();\n  \n  // Generate summary report\n  const { summary, summaryFile } = generateSummaryReport(results);\n  \n  // Print summary\n  printSummary(summary);\n  \n  console.log(`\\n📄 Summary report: ${summaryFile}`.blue);\n  \n  // Exit with appropriate code\n  process.exit(summary.overall.success ? 0 : 1);\n};\n\n// Run if called directly\nif (require.main === module) {\n  main().catch(error => {\n    log(`Fatal error: ${error.message}`, 'error');\n    process.exit(1);\n  });\n}\n\nmodule.exports = { main, runESLintCheck, runPrettierCheck, runSecurityAudit, runTestCoverage };\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\scripts\\test-deployment.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'colors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "colors" },
            "fix": { "range": [157, 190], "text": "" },
            "desc": "Remove unused variable 'colors'."
          }
        ]
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 25,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 25,
        "endColumn": 5,
        "fix": { "range": [539, 543], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 26,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 26,
        "endColumn": 7,
        "fix": { "range": [559, 565], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 27,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 27,
        "endColumn": 7,
        "fix": { "range": [615, 621], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 28,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 28,
        "endColumn": 5,
        "fix": { "range": [628, 632], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 29,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 29,
        "endColumn": 7,
        "fix": { "range": [646, 652], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 30,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 30,
        "endColumn": 7,
        "fix": { "range": [700, 706], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 31,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 31,
        "endColumn": 5,
        "fix": { "range": [713, 717], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 32,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 32,
        "endColumn": 7,
        "fix": { "range": [733, 739], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 33,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 33,
        "endColumn": 7,
        "fix": { "range": [792, 798], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 34,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 34,
        "endColumn": 5,
        "fix": { "range": [805, 809], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 2 spaces but found 4.",
        "line": 35,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 35,
        "endColumn": 5,
        "fix": { "range": [822, 826], "text": "  " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 36,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "wrongIndentation",
        "endLine": 36,
        "endColumn": 7,
        "fix": { "range": [835, 841], "text": "    " }
      },
      {
        "ruleId": "indent",
        "severity": 2,
        "message": "Expected indentation of 4 spaces but found 6.",
        "line": 37,
        "column": 1,
        "nodeType": "Keyword",
        "messageId": "wrongIndentation",
        "endLine": 37,
        "endColumn": 7,
        "fix": { "range": [892, 898], "text": "    " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 14,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 13,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\n/**\n * Local Deployment Testing Script\n * Tests error handling and validation in local environment\n */\n\nconst axios = require('axios');\nconst colors = require('colors');\n\n// Configuration\nconst BASE_URL = process.env.TEST_BASE_URL || 'http://localhost:5001';\nconst TIMEOUT = 10000;\n\n// Test results tracking\nlet totalTests = 0;\nlet passedTests = 0;\nlet failedTests = 0;\nconst results = [];\n\n// Utility functions\nconst log = (message, type = 'info') => {\n  const timestamp = new Date().toISOString();\n  switch (type) {\n    case 'success':\n      console.log(`[${timestamp}] ✅ ${message}`.green);\n      break;\n    case 'error':\n      console.log(`[${timestamp}] ❌ ${message}`.red);\n      break;\n    case 'warning':\n      console.log(`[${timestamp}] ⚠️  ${message}`.yellow);\n      break;\n    case 'info':\n    default:\n      console.log(`[${timestamp}] ℹ️  ${message}`.blue);\n      break;\n  }\n};\n\nconst runTest = async (testName, testFunction) => {\n  totalTests++;\n  try {\n    log(`Running: ${testName}`, 'info');\n    await testFunction();\n    passedTests++;\n    results.push({ name: testName, status: 'PASS', error: null });\n    log(`PASSED: ${testName}`, 'success');\n  } catch (error) {\n    failedTests++;\n    results.push({ name: testName, status: 'FAIL', error: error.message });\n    log(`FAILED: ${testName} - ${error.message}`, 'error');\n  }\n};\n\n// Test functions\nconst testServerHealth = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/health`, { timeout: TIMEOUT });\n    if (response.status !== 200) {\n      throw new Error(`Server health check failed: ${response.status}`);\n    }\n  } catch (error) {\n    if (error.code === 'ECONNREFUSED') {\n      throw new Error('Server is not running. Please start the server first.');\n    }\n    throw error;\n  }\n};\n\nconst testValidRegistration = async () => {\n  const testData = {\n    email: `test-${Date.now()}@example.com`,\n    password: 'TestPass123!',\n    firstName: 'John',\n    lastName: 'Doe',\n    companyName: 'Test Company Inc.'\n  };\n\n  const response = await axios.post(`${BASE_URL}/api/auth/register`, testData, { timeout: TIMEOUT });\n  \n  if (![201, 409].includes(response.status)) {\n    throw new Error(`Unexpected status: ${response.status}`);\n  }\n\n  if (response.status === 409) {\n    // User already exists - check error format\n    const { data } = response;\n    if (!data.success || !data.error || !data.error.type) {\n      throw new Error('Error response format is incorrect');\n    }\n  }\n};\n\nconst testInvalidEmail = async () => {\n  const testData = {\n    email: 'invalid-email',\n    password: 'TestPass123!',\n    firstName: 'John',\n    lastName: 'Doe',\n    companyName: 'Test Company'\n  };\n\n  try {\n    const response = await axios.post(`${BASE_URL}/api/auth/register`, testData, { timeout: TIMEOUT });\n    if (response.status !== 400) {\n      throw new Error(`Expected 400, got ${response.status}`);\n    }\n  } catch (error) {\n    if (error.response && error.response.status === 400) {\n      const { data } = error.response;\n      if (data.error?.type !== 'VALIDATION_ERROR') {\n        throw new Error('Validation error type incorrect');\n      }\n      if (!Array.isArray(data.error.details)) {\n        throw new Error('Validation details should be an array');\n      }\n      return; // Test passed\n    }\n    throw error;\n  }\n};\n\nconst testWeakPassword = async () => {\n  const testData = {\n    email: 'test@example.com',\n    password: '123',\n    firstName: 'John',\n    lastName: 'Doe',\n    companyName: 'Test Company'\n  };\n\n  try {\n    await axios.post(`${BASE_URL}/api/auth/register`, testData, { timeout: TIMEOUT });\n    throw new Error('Weak password should be rejected');\n  } catch (error) {\n    if (error.response && error.response.status === 400) {\n      const { data } = error.response;\n      const hasPasswordError = data.error?.details?.some(d => \n        d.field === 'password' && d.message.includes('Password must be between 8 and 128 characters')\n      );\n      if (!hasPasswordError) {\n        throw new Error('Password validation error not found');\n      }\n      return; // Test passed\n    }\n    throw error;\n  }\n};\n\nconst testDisposableEmail = async () => {\n  const testData = {\n    email: 'test@tempmail.org',\n    password: 'TestPass123!',\n    firstName: 'John',\n    lastName: 'Doe',\n    companyName: 'Test Company'\n  };\n\n  try {\n    await axios.post(`${BASE_URL}/api/auth/register`, testData, { timeout: TIMEOUT });\n    throw new Error('Disposable email should be rejected');\n  } catch (error) {\n    if (error.response && error.response.status === 400) {\n      const { data } = error.response;\n      const hasDisposableError = data.error?.details?.some(d => \n        d.message.includes('Disposable email addresses are not allowed')\n      );\n      if (!hasDisposableError) {\n        throw new Error('Disposable email validation error not found');\n      }\n      return; // Test passed\n    }\n    throw error;\n  }\n};\n\nconst testXSSProtection = async () => {\n  const testData = {\n    email: 'test@example.com',\n    password: 'TestPass123!',\n    firstName: '<script>alert(\"xss\")</script>John',\n    lastName: 'Doe<img src=x onerror=alert(1)>',\n    companyName: 'Test Company'\n  };\n\n  const response = await axios.post(`${BASE_URL}/api/auth/register`, testData, { \n    timeout: TIMEOUT,\n    validateStatus: () => true // Accept any status\n  });\n\n  if (response.status === 201) {\n    // Check if XSS was sanitized\n    if (response.data.user.firstName.includes('<script>') || \n        response.data.user.lastName.includes('<img')) {\n      throw new Error('XSS content not sanitized');\n    }\n  } else if (response.status === 400) {\n    // XSS rejected by validation - also acceptable\n    if (response.data.error?.type !== 'VALIDATION_ERROR') {\n      throw new Error('Expected validation error for XSS content');\n    }\n  } else {\n    throw new Error(`Unexpected status for XSS test: ${response.status}`);\n  }\n};\n\nconst testSQLInjection = async () => {\n  const testData = {\n    email: \"admin@example.com'; DROP TABLE users; --\",\n    password: \"' OR '1'='1\",\n    firstName: 'John',\n    lastName: 'Doe',\n    companyName: 'Test Company'\n  };\n\n  try {\n    await axios.post(`${BASE_URL}/api/auth/register`, testData, { timeout: TIMEOUT });\n    throw new Error('SQL injection should be rejected');\n  } catch (error) {\n    if (error.response && error.response.status === 400) {\n      const { data } = error.response;\n      if (data.error?.type !== 'VALIDATION_ERROR') {\n        throw new Error('Expected validation error for SQL injection');\n      }\n      return; // Test passed\n    }\n    throw error;\n  }\n};\n\nconst test404Handling = async () => {\n  try {\n    await axios.get(`${BASE_URL}/api/auth/non-existent-route`, { timeout: TIMEOUT });\n    throw new Error('404 route should not exist');\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      const { data } = error.response;\n      if (data.error?.type !== 'NOT_FOUND_ERROR') {\n        throw new Error('404 error type incorrect');\n      }\n      if (data.error?.code !== 404) {\n        throw new Error('404 error code incorrect');\n      }\n      return; // Test passed\n    }\n    throw error;\n  }\n};\n\nconst testMalformedJSON = async () => {\n  try {\n    await axios.post(`${BASE_URL}/api/auth/register`, '{\"invalid\": json}', {\n      headers: { 'Content-Type': 'application/json' },\n      timeout: TIMEOUT\n    });\n    throw new Error('Malformed JSON should be rejected');\n  } catch (error) {\n    if (error.response && [400, 500].includes(error.response.status)) {\n      const { data } = error.response;\n      if (!data.success && data.error?.type) {\n        return; // Test passed - error handled gracefully\n      }\n    }\n    throw error;\n  }\n};\n\nconst testSecurityHeaders = async () => {\n  const response = await axios.get(`${BASE_URL}/api/auth/test`, { \n    timeout: TIMEOUT,\n    validateStatus: () => true // Accept 404 for this test\n  });\n\n  const headers = response.headers;\n  \n  if (!headers['x-content-type-options']) {\n    throw new Error('Missing x-content-type-options header');\n  }\n  \n  if (!headers['x-frame-options']) {\n    throw new Error('Missing x-frame-options header');\n  }\n  \n  if (headers['x-content-type-options'] !== 'nosniff') {\n    throw new Error('Incorrect x-content-type-options value');\n  }\n};\n\n// Main test runner\nconst runAllTests = async () => {\n  console.log('🚀 Starting FloWorx API Security & Validation Tests'.cyan.bold);\n  console.log(`📍 Testing against: ${BASE_URL}`.cyan);\n  console.log('=' .repeat(60).cyan);\n\n  // Health check first\n  await runTest('Server Health Check', testServerHealth);\n\n  // Authentication tests\n  await runTest('Valid Registration', testValidRegistration);\n  await runTest('Invalid Email Validation', testInvalidEmail);\n  await runTest('Weak Password Rejection', testWeakPassword);\n  await runTest('Disposable Email Rejection', testDisposableEmail);\n  await runTest('XSS Protection', testXSSProtection);\n  await runTest('SQL Injection Protection', testSQLInjection);\n\n  // Error handling tests\n  await runTest('404 Error Handling', test404Handling);\n  await runTest('Malformed JSON Handling', testMalformedJSON);\n  await runTest('Security Headers', testSecurityHeaders);\n\n  // Results summary\n  console.log('\\n' + '='.repeat(60).cyan);\n  console.log('📊 TEST RESULTS SUMMARY'.cyan.bold);\n  console.log('='.repeat(60).cyan);\n  \n  console.log(`Total Tests: ${totalTests}`.white);\n  console.log(`Passed: ${passedTests}`.green);\n  console.log(`Failed: ${failedTests}`.red);\n  console.log(`Success Rate: ${((passedTests / totalTests) * 100).toFixed(1)}%`.yellow);\n\n  if (failedTests > 0) {\n    console.log('\\n❌ FAILED TESTS:'.red.bold);\n    results.filter(r => r.status === 'FAIL').forEach(result => {\n      console.log(`  • ${result.name}: ${result.error}`.red);\n    });\n  }\n\n  console.log('\\n✅ PASSED TESTS:'.green.bold);\n  results.filter(r => r.status === 'PASS').forEach(result => {\n    console.log(`  • ${result.name}`.green);\n  });\n\n  process.exit(failedTests > 0 ? 1 : 0);\n};\n\n// Run tests\nrunAllTests().catch(error => {\n  log(`Fatal error: ${error.message}`, 'error');\n  process.exit(1);\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\server.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\accountRecoveryService.js",
    "messages": [
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async method 'handleEmergencyAccess' has no 'await' expression.",
        "line": 323,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 323,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [9917, 9923], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'client' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 323,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 323,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "client" },
            "fix": { "range": [9945, 9952], "text": "" },
            "desc": "Remove unused variable 'client'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'tokenData' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 323,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 323,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "tokenData" },
            "fix": { "range": [9951, 9962], "text": "" },
            "desc": "Remove unused variable 'tokenData'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'actions' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 323,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 323,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "actions" },
            "fix": { "range": [9962, 9971], "text": "" },
            "desc": "Remove unused variable 'actions'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const crypto = require('crypto');\nconst { pool } = require('../database/connection');\nconst emailService = require('./emailService');\nconst encryptionService = require('./encryptionService');\n\nclass AccountRecoveryService {\n  constructor() {\n    this.tokenExpiry = 24 * 60 * 60 * 1000; // 24 hours for account recovery\n    this.backupCodeExpiry = 90 * 24 * 60 * 60 * 1000; // 90 days for backup codes\n  }\n\n  /**\n   * Generate secure recovery token\n   * @returns {string} Secure random token\n   */\n  generateRecoveryToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Generate backup codes for account recovery\n   * @param {number} count - Number of backup codes to generate\n   * @returns {Array} Array of backup codes\n   */\n  generateBackupCodes(count = 10) {\n    const codes = [];\n    for (let i = 0; i < count; i++) {\n      // Generate 8-character alphanumeric codes\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`);\n    }\n    return codes;\n  }\n\n  /**\n   * Create credential backup for recovery\n   * @param {string} userId - User ID\n   * @param {string} serviceName - Service name (google, etc.)\n   * @param {Object} credentialData - Credential metadata to backup\n   * @returns {Object} Backup result\n   */\n  async createCredentialBackup(userId, serviceName, credentialData) {\n    try {\n      // Encrypt the backup data\n      const encryptedBackup = await encryptionService.encrypt(JSON.stringify(credentialData));\n      const expiresAt = new Date(Date.now() + this.backupCodeExpiry);\n\n      const insertQuery = `\n        INSERT INTO credential_backups (user_id, service_name, backup_data, backup_type, expires_at)\n        VALUES ($1, $2, $3, $4, $5)\n        RETURNING id, created_at\n      `;\n\n      const result = await pool.query(insertQuery, [\n        userId,\n        serviceName,\n        JSON.stringify({ encrypted: encryptedBackup }),\n        'oauth_refresh',\n        expiresAt\n      ]);\n\n      return {\n        success: true,\n        backupId: result.rows[0].id,\n        createdAt: result.rows[0].created_at,\n        expiresAt\n      };\n\n    } catch (error) {\n      console.error('Credential backup creation error:', error);\n      throw new Error('Failed to create credential backup');\n    }\n  }\n\n  /**\n   * Initiate account recovery process\n   * @param {string} email - User email\n   * @param {string} recoveryType - Type of recovery (email_change, account_recovery, emergency_access)\n   * @param {Object} recoveryData - Additional recovery data\n   * @param {string} ipAddress - Client IP address\n   * @param {string} userAgent - Client user agent\n   * @returns {Object} Recovery result\n   */\n  async initiateAccountRecovery(email, recoveryType, recoveryData = {}, ipAddress = null, userAgent = null) {\n    try {\n      // Find user by email\n      const userQuery = 'SELECT id, email, first_name, recovery_email FROM users WHERE email = $1';\n      const userResult = await pool.query(userQuery, [email.toLowerCase()]);\n\n      if (userResult.rows.length === 0) {\n        // Don't reveal if email exists\n        return {\n          success: true,\n          message: 'If an account with this email exists, recovery instructions have been sent.',\n          emailSent: false\n        };\n      }\n\n      const user = userResult.rows[0];\n\n      // Generate recovery token\n      const recoveryToken = this.generateRecoveryToken();\n      const expiresAt = new Date(Date.now() + this.tokenExpiry);\n\n      // Store recovery token\n      const insertTokenQuery = `\n        INSERT INTO account_recovery_tokens (user_id, token, recovery_type, recovery_data, expires_at, ip_address, user_agent)\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING id\n      `;\n\n      await pool.query(insertTokenQuery, [\n        user.id,\n        recoveryToken,\n        recoveryType,\n        JSON.stringify(recoveryData),\n        expiresAt,\n        ipAddress,\n        userAgent\n      ]);\n\n      // Send recovery email based on type\n      await this.sendRecoveryEmail(user, recoveryType, recoveryToken, recoveryData);\n\n      // Log security event\n      await this.logSecurityEvent(user.id, `account_recovery_${recoveryType}_requested`, 'user', user.id, ipAddress, userAgent, true, {\n        email: user.email,\n        recoveryType,\n        tokenExpiry: expiresAt\n      });\n\n      return {\n        success: true,\n        message: 'Recovery instructions have been sent to your email address.',\n        emailSent: true,\n        expiresIn: this.tokenExpiry / 1000 / 60 // minutes\n      };\n\n    } catch (error) {\n      console.error('Account recovery initiation error:', error);\n      throw new Error('Failed to initiate account recovery');\n    }\n  }\n\n  /**\n   * Verify account recovery token\n   * @param {string} token - Recovery token\n   * @returns {Object} Verification result\n   */\n  async verifyRecoveryToken(token) {\n    try {\n      const tokenQuery = `\n        SELECT art.*, u.email, u.first_name \n        FROM account_recovery_tokens art\n        JOIN users u ON art.user_id = u.id\n        WHERE art.token = $1 AND art.used = false AND art.expires_at > CURRENT_TIMESTAMP\n      `;\n      const tokenResult = await pool.query(tokenQuery, [token]);\n\n      if (tokenResult.rows.length === 0) {\n        return {\n          valid: false,\n          error: 'Invalid or expired token',\n          message: 'This recovery link is invalid or has expired.'\n        };\n      }\n\n      const tokenData = tokenResult.rows[0];\n\n      return {\n        valid: true,\n        userId: tokenData.user_id,\n        email: tokenData.email,\n        firstName: tokenData.first_name,\n        recoveryType: tokenData.recovery_type,\n        recoveryData: JSON.parse(tokenData.recovery_data || '{}'),\n        expiresAt: tokenData.expires_at\n      };\n\n    } catch (error) {\n      console.error('Recovery token verification error:', error);\n      throw new Error('Failed to verify recovery token');\n    }\n  }\n\n  /**\n   * Complete account recovery\n   * @param {string} token - Recovery token\n   * @param {Object} recoveryActions - Actions to perform during recovery\n   * @param {string} ipAddress - Client IP address\n   * @param {string} userAgent - Client user agent\n   * @returns {Object} Recovery result\n   */\n  async completeAccountRecovery(token, recoveryActions, ipAddress = null, userAgent = null) {\n    try {\n      // Verify token first\n      const tokenVerification = await this.verifyRecoveryToken(token);\n      if (!tokenVerification.valid) {\n        return tokenVerification;\n      }\n\n      const client = await pool.connect();\n      try {\n        await client.query('BEGIN');\n\n        // Perform recovery actions based on type\n        let result;\n        switch (tokenVerification.recoveryType) {\n        case 'email_change':\n          result = await this.handleEmailChangeRecovery(client, tokenVerification, recoveryActions);\n          break;\n        case 'account_recovery':\n          result = await this.handleAccountRecovery(client, tokenVerification, recoveryActions);\n          break;\n        case 'emergency_access':\n          result = await this.handleEmergencyAccess(client, tokenVerification, recoveryActions);\n          break;\n        default:\n          throw new Error('Unknown recovery type');\n        }\n\n        // Mark token as used\n        const markTokenUsedQuery = `\n          UPDATE account_recovery_tokens \n          SET used = true, used_at = CURRENT_TIMESTAMP \n          WHERE token = $1\n        `;\n        await client.query(markTokenUsedQuery, [token]);\n\n        await client.query('COMMIT');\n\n        // Log security event\n        await this.logSecurityEvent(tokenVerification.userId, `account_recovery_${tokenVerification.recoveryType}_completed`, 'user', tokenVerification.userId, ipAddress, userAgent, true, {\n          email: tokenVerification.email,\n          recoveryType: tokenVerification.recoveryType\n        });\n\n        return {\n          success: true,\n          message: 'Account recovery completed successfully.',\n          result\n        };\n\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      } finally {\n        client.release();\n      }\n\n    } catch (error) {\n      console.error('Account recovery completion error:', error);\n      throw new Error('Failed to complete account recovery');\n    }\n  }\n\n  /**\n   * Handle email change recovery\n   * @private\n   */\n  async handleEmailChangeRecovery(client, tokenData, actions) {\n    const { newEmail } = actions;\n    \n    if (!newEmail) {\n      throw new Error('New email address is required');\n    }\n\n    // Update user email\n    const updateQuery = `\n      UPDATE users \n      SET email = $1, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $2\n      RETURNING email\n    `;\n    const result = await client.query(updateQuery, [newEmail.toLowerCase(), tokenData.userId]);\n\n    return {\n      type: 'email_change',\n      oldEmail: tokenData.email,\n      newEmail: result.rows[0].email\n    };\n  }\n\n  /**\n   * Handle general account recovery\n   * @private\n   */\n  async handleAccountRecovery(client, tokenData, actions) {\n    const { resetPassword, regenerateBackupCodes } = actions;\n    const results = {};\n\n    if (resetPassword) {\n      // Reset password logic would go here\n      results.passwordReset = true;\n    }\n\n    if (regenerateBackupCodes) {\n      const newCodes = this.generateBackupCodes();\n      const encryptedCodes = await Promise.all(\n        newCodes.map(code => encryptionService.encrypt(code))\n      );\n\n      const updateQuery = `\n        UPDATE users \n        SET backup_codes = $1, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $2\n      `;\n      await client.query(updateQuery, [encryptedCodes, tokenData.userId]);\n\n      results.backupCodes = newCodes;\n    }\n\n    return {\n      type: 'account_recovery',\n      actions: results\n    };\n  }\n\n  /**\n   * Handle emergency access recovery\n   * @private\n   */\n  async handleEmergencyAccess(client, tokenData, actions) {\n    // Emergency access logic - provide temporary access with limited permissions\n    return {\n      type: 'emergency_access',\n      temporaryAccess: true,\n      expiresAt: new Date(Date.now() + 60 * 60 * 1000) // 1 hour\n    };\n  }\n\n  /**\n   * Send recovery email based on type\n   * @private\n   */\n  async sendRecoveryEmail(user, recoveryType, token, recoveryData) {\n    const recoveryUrl = `${process.env.FRONTEND_URL}/account-recovery?token=${token}&type=${recoveryType}`;\n    \n    const templates = {\n      email_change: 'email-change-recovery',\n      account_recovery: 'account-recovery',\n      emergency_access: 'emergency-access'\n    };\n\n    await emailService.sendEmail({\n      to: user.recovery_email || user.email,\n      subject: `Floworx Account Recovery - ${recoveryType.replace('_', ' ').toUpperCase()}`,\n      template: templates[recoveryType] || 'account-recovery',\n      data: {\n        firstName: user.first_name,\n        recoveryUrl,\n        recoveryType,\n        ...recoveryData\n      }\n    });\n  }\n\n  /**\n   * Log security event\n   * @private\n   */\n  async logSecurityEvent(userId, action, resourceType, resourceId, ipAddress, userAgent, success, details) {\n    try {\n      const logQuery = `\n        INSERT INTO security_audit_log (user_id, action, resource_type, resource_id, ip_address, user_agent, success, details)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      `;\n      await pool.query(logQuery, [userId, action, resourceType, resourceId, ipAddress, userAgent, success, JSON.stringify(details)]);\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  }\n}\n\nmodule.exports = new AccountRecoveryService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\analyticsService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'userId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 521,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 521,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "userId" },
            "fix": { "range": [16955, 16962], "text": "" },
            "desc": "Remove unused variable 'userId'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'eventType' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 521,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 521,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "eventType" },
            "fix": { "range": [16961, 16972], "text": "" },
            "desc": "Remove unused variable 'eventType'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'eventData' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 521,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 521,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "eventData" },
            "fix": { "range": [16972, 16983], "text": "" },
            "desc": "Remove unused variable 'eventData'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'step' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 526,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 526,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "step" },
            "fix": { "range": [17124, 17129], "text": "" },
            "desc": "Remove unused variable 'step'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'status' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 526,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 526,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "status" },
            "fix": { "range": [17128, 17136], "text": "" },
            "desc": "Remove unused variable 'status'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'duration' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 526,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 526,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "duration" },
            "fix": { "range": [17136, 17146], "text": "" },
            "desc": "Remove unused variable 'duration'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'step' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 531,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 531,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "step" },
            "fix": { "range": [17282, 17286], "text": "" },
            "desc": "Remove unused variable 'step'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { pool } = require('../database/connection');\n\nclass AnalyticsService {\n  constructor() {\n    this.eventTypes = {\n      ONBOARDING_STARTED: 'onboarding_started',\n      STEP_COMPLETED: 'step_completed',\n      STEP_FAILED: 'step_failed',\n      STEP_ABANDONED: 'step_abandoned',\n      OAUTH_CONNECTED: 'oauth_connected',\n      OAUTH_FAILED: 'oauth_failed',\n      WORKFLOW_DEPLOYED: 'workflow_deployed',\n      WORKFLOW_FAILED: 'workflow_failed',\n      ONBOARDING_COMPLETED: 'onboarding_completed',\n      USER_CONVERTED: 'user_converted',\n      TRIAL_STARTED: 'trial_started',\n      TRIAL_EXPIRED: 'trial_expired'\n    };\n  }\n\n  /**\n   * Track an analytics event\n   * @param {string} userId - User ID\n   * @param {string} eventType - Type of event\n   * @param {Object} eventData - Event data\n   * @param {Object} metadata - Additional metadata\n   */\n  async trackEvent(userId, eventType, eventData = {}, metadata = {}) {\n    try {\n      const query = `\n        INSERT INTO analytics_events (\n          user_id, event_type, event_data, metadata, session_id, user_agent, ip_address\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING id, created_at\n      `;\n\n      const result = await pool.query(query, [\n        userId,\n        eventType,\n        JSON.stringify(eventData),\n        JSON.stringify(metadata),\n        metadata.sessionId || null,\n        metadata.userAgent || null,\n        metadata.ipAddress || null\n      ]);\n\n      // Update user's analytics summary\n      await this.updateUserAnalytics(userId, eventType, eventData);\n\n      return {\n        success: true,\n        eventId: result.rows[0].id,\n        timestamp: result.rows[0].created_at\n      };\n\n    } catch (error) {\n      console.error('Error tracking analytics event:', error);\n      throw new Error('Failed to track analytics event');\n    }\n  }\n\n  /**\n   * Track onboarding step completion\n   * @param {string} userId - User ID\n   * @param {string} step - Step name\n   * @param {number} duration - Time spent on step (ms)\n   * @param {Object} stepData - Step-specific data\n   * @param {Object} metadata - Request metadata\n   */\n  async trackStepCompletion(userId, step, duration, stepData = {}, metadata = {}) {\n    const eventData = {\n      step,\n      duration,\n      stepData,\n      completedAt: new Date().toISOString()\n    };\n\n    await this.trackEvent(userId, this.eventTypes.STEP_COMPLETED, eventData, metadata);\n\n    // Update step-specific analytics\n    await this.updateStepAnalytics(step, 'completed', duration);\n  }\n\n  /**\n   * Track onboarding step failure\n   * @param {string} userId - User ID\n   * @param {string} step - Step name\n   * @param {string} error - Error message\n   * @param {number} duration - Time spent before failure (ms)\n   * @param {Object} metadata - Request metadata\n   */\n  async trackStepFailure(userId, step, error, duration, metadata = {}) {\n    const eventData = {\n      step,\n      error,\n      duration,\n      failedAt: new Date().toISOString()\n    };\n\n    await this.trackEvent(userId, this.eventTypes.STEP_FAILED, eventData, metadata);\n\n    // Update step-specific analytics\n    await this.updateStepAnalytics(step, 'failed', duration);\n  }\n\n  /**\n   * Track user drop-off (abandonment)\n   * @param {string} userId - User ID\n   * @param {string} step - Step where user dropped off\n   * @param {number} timeSpent - Total time spent in onboarding (ms)\n   * @param {Object} metadata - Request metadata\n   */\n  async trackDropOff(userId, step, timeSpent, metadata = {}) {\n    const eventData = {\n      dropOffStep: step,\n      timeSpent,\n      abandonedAt: new Date().toISOString()\n    };\n\n    await this.trackEvent(userId, this.eventTypes.STEP_ABANDONED, eventData, metadata);\n\n    // Update drop-off analytics\n    await this.updateDropOffAnalytics(step);\n  }\n\n  /**\n   * Get onboarding funnel analytics\n   * @param {Object} filters - Date range and other filters\n   * @returns {Object} Funnel analytics\n   */\n  async getOnboardingFunnel(filters = {}) {\n    try {\n      const { startDate, endDate } = this.getDateRange(filters);\n\n      // Get step completion counts\n      const stepQuery = `\n        SELECT \n          event_data->>'step' as step,\n          COUNT(*) as completions,\n          AVG((event_data->>'duration')::numeric) as avg_duration,\n          PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY (event_data->>'duration')::numeric) as median_duration\n        FROM analytics_events \n        WHERE event_type = $1 \n          AND created_at >= $2 \n          AND created_at <= $3\n          AND event_data->>'step' IS NOT NULL\n        GROUP BY event_data->>'step'\n        ORDER BY \n          CASE event_data->>'step'\n            WHEN 'welcome' THEN 1\n            WHEN 'google-connection' THEN 2\n            WHEN 'business-categories' THEN 3\n            WHEN 'label-mapping' THEN 4\n            WHEN 'team-setup' THEN 5\n            WHEN 'review' THEN 6\n            WHEN 'workflow-deployment' THEN 7\n            ELSE 8\n          END\n      `;\n\n      const stepResult = await pool.query(stepQuery, [\n        this.eventTypes.STEP_COMPLETED,\n        startDate,\n        endDate\n      ]);\n\n      // Get drop-off counts\n      const dropOffQuery = `\n        SELECT \n          event_data->>'dropOffStep' as step,\n          COUNT(*) as dropoffs\n        FROM analytics_events \n        WHERE event_type = $1 \n          AND created_at >= $2 \n          AND created_at <= $3\n        GROUP BY event_data->>'dropOffStep'\n      `;\n\n      const dropOffResult = await pool.query(dropOffQuery, [\n        this.eventTypes.STEP_ABANDONED,\n        startDate,\n        endDate\n      ]);\n\n      // Get total started count\n      const startedQuery = `\n        SELECT COUNT(*) as started\n        FROM analytics_events \n        WHERE event_type = $1 \n          AND created_at >= $2 \n          AND created_at <= $3\n      `;\n\n      const startedResult = await pool.query(startedQuery, [\n        this.eventTypes.ONBOARDING_STARTED,\n        startDate,\n        endDate\n      ]);\n\n      const totalStarted = parseInt(startedResult.rows[0]?.started || 0);\n\n      // Build funnel data\n      const funnel = this.buildFunnelData(stepResult.rows, dropOffResult.rows, totalStarted);\n\n      return {\n        success: true,\n        funnel,\n        totalStarted,\n        dateRange: { startDate, endDate }\n      };\n\n    } catch (error) {\n      console.error('Error getting onboarding funnel:', error);\n      throw new Error('Failed to get onboarding funnel analytics');\n    }\n  }\n\n  /**\n   * Get conversion rate analytics\n   * @param {Object} filters - Date range and other filters\n   * @returns {Object} Conversion analytics\n   */\n  async getConversionAnalytics(filters = {}) {\n    try {\n      const { startDate, endDate } = this.getDateRange(filters);\n\n      const query = `\n        WITH onboarding_stats AS (\n          SELECT \n            COUNT(CASE WHEN event_type = $1 THEN 1 END) as started,\n            COUNT(CASE WHEN event_type = $2 THEN 1 END) as completed,\n            COUNT(CASE WHEN event_type = $3 THEN 1 END) as converted\n          FROM analytics_events \n          WHERE created_at >= $4 AND created_at <= $5\n        ),\n        step_completion_rates AS (\n          SELECT \n            event_data->>'step' as step,\n            COUNT(*) as completions\n          FROM analytics_events \n          WHERE event_type = $6\n            AND created_at >= $4 \n            AND created_at <= $5\n          GROUP BY event_data->>'step'\n        )\n        SELECT \n          os.*,\n          CASE WHEN os.started > 0 THEN (os.completed::float / os.started * 100) ELSE 0 END as completion_rate,\n          CASE WHEN os.completed > 0 THEN (os.converted::float / os.completed * 100) ELSE 0 END as conversion_rate,\n          CASE WHEN os.started > 0 THEN (os.converted::float / os.started * 100) ELSE 0 END as overall_conversion_rate\n        FROM onboarding_stats os\n      `;\n\n      const result = await pool.query(query, [\n        this.eventTypes.ONBOARDING_STARTED,\n        this.eventTypes.ONBOARDING_COMPLETED,\n        this.eventTypes.USER_CONVERTED,\n        startDate,\n        endDate,\n        this.eventTypes.STEP_COMPLETED\n      ]);\n\n      const stats = result.rows[0];\n\n      return {\n        success: true,\n        conversion: {\n          started: parseInt(stats.started),\n          completed: parseInt(stats.completed),\n          converted: parseInt(stats.converted),\n          completionRate: parseFloat(stats.completion_rate).toFixed(2),\n          conversionRate: parseFloat(stats.conversion_rate).toFixed(2),\n          overallConversionRate: parseFloat(stats.overall_conversion_rate).toFixed(2)\n        },\n        dateRange: { startDate, endDate }\n      };\n\n    } catch (error) {\n      console.error('Error getting conversion analytics:', error);\n      throw new Error('Failed to get conversion analytics');\n    }\n  }\n\n  /**\n   * Get user behavior analytics\n   * @param {Object} filters - Date range and other filters\n   * @returns {Object} Behavior analytics\n   */\n  async getUserBehaviorAnalytics(filters = {}) {\n    try {\n      const { startDate, endDate } = this.getDateRange(filters);\n\n      // Average time to complete onboarding\n      const timeToCompleteQuery = `\n        WITH user_onboarding_times AS (\n          SELECT \n            user_id,\n            MIN(created_at) as started_at,\n            MAX(CASE WHEN event_type = $1 THEN created_at END) as completed_at\n          FROM analytics_events \n          WHERE created_at >= $2 AND created_at <= $3\n            AND event_type IN ($4, $1)\n          GROUP BY user_id\n          HAVING MAX(CASE WHEN event_type = $1 THEN created_at END) IS NOT NULL\n        )\n        SELECT \n          COUNT(*) as completed_users,\n          AVG(EXTRACT(EPOCH FROM (completed_at - started_at))) as avg_completion_time_seconds,\n          PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (completed_at - started_at))) as median_completion_time_seconds\n        FROM user_onboarding_times\n      `;\n\n      const timeResult = await pool.query(timeToCompleteQuery, [\n        this.eventTypes.ONBOARDING_COMPLETED,\n        startDate,\n        endDate,\n        this.eventTypes.ONBOARDING_STARTED\n      ]);\n\n      // Most common failure points\n      const failureQuery = `\n        SELECT \n          event_data->>'step' as step,\n          COUNT(*) as failure_count,\n          COUNT(*) * 100.0 / SUM(COUNT(*)) OVER () as failure_percentage\n        FROM analytics_events \n        WHERE event_type = $1 \n          AND created_at >= $2 \n          AND created_at <= $3\n        GROUP BY event_data->>'step'\n        ORDER BY failure_count DESC\n        LIMIT 5\n      `;\n\n      const failureResult = await pool.query(failureQuery, [\n        this.eventTypes.STEP_FAILED,\n        startDate,\n        endDate\n      ]);\n\n      // Device and browser analytics\n      const deviceQuery = `\n        SELECT \n          metadata->>'userAgent' as user_agent,\n          COUNT(*) as count\n        FROM analytics_events \n        WHERE event_type = $1 \n          AND created_at >= $2 \n          AND created_at <= $3\n          AND metadata->>'userAgent' IS NOT NULL\n        GROUP BY metadata->>'userAgent'\n        ORDER BY count DESC\n        LIMIT 10\n      `;\n\n      const deviceResult = await pool.query(deviceQuery, [\n        this.eventTypes.ONBOARDING_STARTED,\n        startDate,\n        endDate\n      ]);\n\n      const timeStats = timeResult.rows[0];\n\n      return {\n        success: true,\n        behavior: {\n          averageCompletionTime: {\n            seconds: parseFloat(timeStats.avg_completion_time_seconds || 0),\n            minutes: parseFloat(timeStats.avg_completion_time_seconds || 0) / 60,\n            formatted: this.formatDuration(timeStats.avg_completion_time_seconds * 1000)\n          },\n          medianCompletionTime: {\n            seconds: parseFloat(timeStats.median_completion_time_seconds || 0),\n            minutes: parseFloat(timeStats.median_completion_time_seconds || 0) / 60,\n            formatted: this.formatDuration(timeStats.median_completion_time_seconds * 1000)\n          },\n          completedUsers: parseInt(timeStats.completed_users || 0),\n          commonFailurePoints: failureResult.rows.map(row => ({\n            step: row.step,\n            count: parseInt(row.failure_count),\n            percentage: parseFloat(row.failure_percentage).toFixed(2)\n          })),\n          topUserAgents: deviceResult.rows.map(row => ({\n            userAgent: this.parseUserAgent(row.user_agent),\n            count: parseInt(row.count)\n          }))\n        },\n        dateRange: { startDate, endDate }\n      };\n\n    } catch (error) {\n      console.error('Error getting user behavior analytics:', error);\n      throw new Error('Failed to get user behavior analytics');\n    }\n  }\n\n  /**\n   * Get real-time onboarding metrics\n   * @returns {Object} Real-time metrics\n   */\n  async getRealTimeMetrics() {\n    try {\n      const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      const lastHour = new Date(Date.now() - 60 * 60 * 1000);\n\n      const query = `\n        SELECT \n          COUNT(CASE WHEN event_type = $1 AND created_at >= $2 THEN 1 END) as started_24h,\n          COUNT(CASE WHEN event_type = $1 AND created_at >= $3 THEN 1 END) as started_1h,\n          COUNT(CASE WHEN event_type = $4 AND created_at >= $2 THEN 1 END) as completed_24h,\n          COUNT(CASE WHEN event_type = $4 AND created_at >= $3 THEN 1 END) as completed_1h,\n          COUNT(CASE WHEN event_type = $5 AND created_at >= $2 THEN 1 END) as failed_24h,\n          COUNT(CASE WHEN event_type = $5 AND created_at >= $3 THEN 1 END) as failed_1h\n        FROM analytics_events \n        WHERE created_at >= $2\n      `;\n\n      const result = await pool.query(query, [\n        this.eventTypes.ONBOARDING_STARTED,\n        last24Hours,\n        lastHour,\n        this.eventTypes.ONBOARDING_COMPLETED,\n        this.eventTypes.STEP_FAILED\n      ]);\n\n      const metrics = result.rows[0];\n\n      return {\n        success: true,\n        realTime: {\n          last24Hours: {\n            started: parseInt(metrics.started_24h),\n            completed: parseInt(metrics.completed_24h),\n            failed: parseInt(metrics.failed_24h),\n            completionRate: metrics.started_24h > 0 ? \n              (metrics.completed_24h / metrics.started_24h * 100).toFixed(2) : 0\n          },\n          lastHour: {\n            started: parseInt(metrics.started_1h),\n            completed: parseInt(metrics.completed_1h),\n            failed: parseInt(metrics.failed_1h),\n            completionRate: metrics.started_1h > 0 ? \n              (metrics.completed_1h / metrics.started_1h * 100).toFixed(2) : 0\n          }\n        },\n        timestamp: new Date()\n      };\n\n    } catch (error) {\n      console.error('Error getting real-time metrics:', error);\n      throw new Error('Failed to get real-time metrics');\n    }\n  }\n\n  // Helper methods\n  getDateRange(filters) {\n    const endDate = filters.endDate ? new Date(filters.endDate) : new Date();\n    const startDate = filters.startDate ? \n      new Date(filters.startDate) : \n      new Date(endDate.getTime() - 30 * 24 * 60 * 60 * 1000); // 30 days ago\n\n    return { startDate, endDate };\n  }\n\n  buildFunnelData(stepData, dropOffData, totalStarted) {\n    const steps = ['welcome', 'google-connection', 'business-categories', 'label-mapping', 'team-setup', 'review', 'workflow-deployment'];\n    const funnel = [];\n    let previousCount = totalStarted;\n\n    steps.forEach((step, index) => {\n      const stepStats = stepData.find(s => s.step === step);\n      const dropOffs = dropOffData.find(d => d.step === step);\n      \n      const completions = parseInt(stepStats?.completions || 0);\n      const dropOffCount = parseInt(dropOffs?.dropoffs || 0);\n      \n      funnel.push({\n        step,\n        stepNumber: index + 1,\n        completions,\n        dropOffs: dropOffCount,\n        conversionRate: previousCount > 0 ? (completions / previousCount * 100).toFixed(2) : 0,\n        averageDuration: stepStats ? this.formatDuration(stepStats.avg_duration) : null,\n        medianDuration: stepStats ? this.formatDuration(stepStats.median_duration) : null\n      });\n\n      previousCount = completions;\n    });\n\n    return funnel;\n  }\n\n  formatDuration(milliseconds) {\n    if (!milliseconds) {return '0s';}\n    \n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  }\n\n  parseUserAgent(userAgent) {\n    if (!userAgent) {return 'Unknown';}\n    \n    // Simple user agent parsing\n    if (userAgent.includes('Chrome')) {return 'Chrome';}\n    if (userAgent.includes('Firefox')) {return 'Firefox';}\n    if (userAgent.includes('Safari')) {return 'Safari';}\n    if (userAgent.includes('Edge')) {return 'Edge';}\n    \n    return 'Other';\n  }\n\n  async updateUserAnalytics(userId, eventType, eventData) {\n    // Update user-specific analytics summary\n    // This could be implemented for user-level analytics\n  }\n\n  async updateStepAnalytics(step, status, duration) {\n    // Update step-specific analytics\n    // This could be implemented for step-level analytics\n  }\n\n  async updateDropOffAnalytics(step) {\n    // Update drop-off analytics\n    // This could be implemented for drop-off tracking\n  }\n}\n\nmodule.exports = new AnalyticsService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\emailService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'expiryMinutes' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 251,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 251,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "expiryMinutes" },
            "fix": { "range": [8315, 8335], "text": "" },
            "desc": "Remove unused variable 'expiryMinutes'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const nodemailer = require('nodemailer');\nconst crypto = require('crypto');\nconst { pool } = require('../database/connection');\nrequire('dotenv').config();\n\nclass EmailService {\n  constructor() {\n    this.transporter = this.createTransporter();\n  }\n\n  createTransporter() {\n    // Configure email transporter with flexible SMTP settings\n    return nodemailer.createTransport({\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT) || 587,\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS // Use App Password for Gmail\n      }\n    });\n  }\n\n  /**\n   * Generate secure verification token\n   * @returns {string} Verification token\n   */\n  generateVerificationToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Send email verification\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   * @param {string} token - Verification token\n   */\n  async sendVerificationEmail(email, firstName, token) {\n    const verificationUrl = `${process.env.FRONTEND_URL}/verify-email?token=${token}`;\n    \n    const htmlContent = this.getVerificationEmailTemplate(firstName, verificationUrl);\n    \n    const mailOptions = {\n      from: `\"${process.env.FROM_NAME || 'Floworx Team'}\" <${process.env.FROM_EMAIL || process.env.SMTP_USER}>`,\n      to: email,\n      subject: 'Welcome to Floworx - Please Verify Your Email',\n      html: htmlContent\n    };\n\n    try {\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log('Verification email sent:', result.messageId);\n      return { success: true, messageId: result.messageId };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      throw new Error('Failed to send verification email');\n    }\n  }\n\n  /**\n   * Send welcome email after verification\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   */\n  async sendWelcomeEmail(email, firstName) {\n    const dashboardUrl = `${process.env.FRONTEND_URL}/dashboard`;\n    \n    const htmlContent = this.getWelcomeEmailTemplate(firstName, dashboardUrl);\n    \n    const mailOptions = {\n      from: `\"${process.env.FROM_NAME || 'Floworx Team'}\" <${process.env.FROM_EMAIL || process.env.SMTP_USER}>`,\n      to: email,\n      subject: 'Welcome to Floworx - Let\\'s Get Your Email Automation Started!',\n      html: htmlContent\n    };\n\n    try {\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log('Welcome email sent:', result.messageId);\n      return { success: true, messageId: result.messageId };\n    } catch (error) {\n      console.error('Error sending welcome email:', error);\n      throw new Error('Failed to send welcome email');\n    }\n  }\n\n  /**\n   * Send password reset email\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   * @param {string} resetToken - Password reset token\n   */\n  async sendPasswordResetEmail(email, firstName, resetToken) {\n    const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;\n\n    const htmlContent = this.getPasswordResetTemplate(firstName, resetUrl);\n\n    const mailOptions = {\n      from: `\"${process.env.FROM_NAME || 'Floworx Security'}\" <${process.env.FROM_EMAIL || process.env.SMTP_USER}>`,\n      to: email,\n      subject: 'Reset Your Floworx Password - Secure Your Hot Tub Business Account',\n      html: htmlContent\n    };\n\n    try {\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Password reset email sent to: ${email}`);\n    } catch (error) {\n      console.error('Failed to send password reset email:', error);\n      throw new Error('Failed to send password reset email');\n    }\n  }\n\n  /**\n   * Send onboarding reminder email\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   * @param {string} lastStep - Last completed step\n   */\n  async sendOnboardingReminder(email, firstName, lastStep) {\n    const continueUrl = `${process.env.FRONTEND_URL}/dashboard`;\n\n    const htmlContent = this.getOnboardingReminderTemplate(firstName, lastStep, continueUrl);\n\n    const mailOptions = {\n      from: `\"${process.env.FROM_NAME || 'Floworx Team'}\" <${process.env.FROM_EMAIL || process.env.SMTP_USER}>`,\n      to: email,\n      subject: 'Complete Your Floworx Setup - Your Email Automation Awaits!',\n      html: htmlContent\n    };\n\n    try {\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log('Onboarding reminder sent:', result.messageId);\n      return { success: true, messageId: result.messageId };\n    } catch (error) {\n      console.error('Error sending onboarding reminder:', error);\n      throw new Error('Failed to send onboarding reminder');\n    }\n  }\n\n  /**\n   * Send generic email with template support\n   * @param {Object} options - Email options\n   */\n  async sendEmail(options) {\n    const { to, subject, template, data, html } = options;\n\n    let htmlContent = html;\n\n    // Use template if specified\n    if (template && !html) {\n      switch (template) {\n      case 'password-reset':\n        htmlContent = this.getPasswordResetTemplate(data.firstName, data.resetUrl, data.expiryMinutes);\n        break;\n      case 'password-reset-confirmation':\n        htmlContent = this.getPasswordResetConfirmationTemplate(data.firstName, data.loginUrl);\n        break;\n      case 'account-recovery':\n        htmlContent = this.getAccountRecoveryTemplate(data.firstName, data.recoveryUrl, data.recoveryType, data.expiryTime);\n        break;\n      default:\n        throw new Error(`Unknown email template: ${template}`);\n      }\n    }\n\n    const mailOptions = {\n      from: `\"${process.env.FROM_NAME || 'Floworx Team'}\" <${process.env.FROM_EMAIL || process.env.SMTP_USER}>`,\n      to,\n      subject,\n      html: htmlContent\n    };\n\n    try {\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log(`Email sent to ${to}: ${subject}`, result.messageId);\n      return { success: true, messageId: result.messageId };\n    } catch (error) {\n      console.error(`Failed to send email to ${to}:`, error);\n      throw new Error('Failed to send email');\n    }\n  }\n\n  /**\n   * Store verification token in database\n   * @param {string} userId - User ID\n   * @param {string} token - Verification token\n   */\n  async storeVerificationToken(userId, token) {\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    \n    const query = `\n      INSERT INTO email_verification_tokens (user_id, token, expires_at)\n      VALUES ($1, $2, $3)\n      ON CONFLICT (user_id) \n      DO UPDATE SET token = EXCLUDED.token, expires_at = EXCLUDED.expires_at, created_at = CURRENT_TIMESTAMP\n    `;\n    \n    await pool.query(query, [userId, token, expiresAt]);\n  }\n\n  /**\n   * Verify email token\n   * @param {string} token - Verification token\n   * @returns {Object} Verification result\n   */\n  async verifyEmailToken(token) {\n    const query = `\n      SELECT evt.user_id, u.email, u.first_name\n      FROM email_verification_tokens evt\n      JOIN users u ON evt.user_id = u.id\n      WHERE evt.token = $1 AND evt.expires_at > CURRENT_TIMESTAMP\n    `;\n    \n    const result = await pool.query(query, [token]);\n    \n    if (result.rows.length === 0) {\n      return { valid: false, message: 'Invalid or expired verification token' };\n    }\n\n    const { user_id, email, first_name } = result.rows[0];\n\n    // Mark email as verified\n    await pool.query(\n      'UPDATE users SET email_verified = true, updated_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [user_id]\n    );\n\n    // Delete used token\n    await pool.query('DELETE FROM email_verification_tokens WHERE token = $1', [token]);\n\n    // Send welcome email\n    await this.sendWelcomeEmail(email, first_name);\n\n    return { \n      valid: true, \n      userId: user_id, \n      email, \n      firstName: first_name \n    };\n  }\n\n  /**\n   * Get password reset email template\n   * @param {string} firstName - User's first name\n   * @param {string} resetUrl - Password reset URL\n   * @param {number} expiryMinutes - Token expiry time in minutes\n   * @returns {string} HTML email template\n   */\n  getPasswordResetTemplate(firstName, resetUrl, expiryMinutes = 60) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Reset Your Floworx Password</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background: #f5f5f5; }\n            .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #FF6B35, #F7931E); color: white; padding: 30px; text-align: center; }\n            .header h1 { margin: 0; font-size: 28px; }\n            .content { padding: 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #FF6B35, #F7931E); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .security-notice { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 20px 0; }\n            .footer { background: #f8f9fa; padding: 20px 30px; text-align: center; color: #666; border-radius: 0 0 10px 10px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🔒 Password Reset Request</h1>\n                <p>Secure Your Hot Tub Business Account</p>\n            </div>\n            <div class=\"content\">\n                <h2>Hi ${firstName || 'there'}!</h2>\n                <p>We received a request to reset the password for your Floworx account. If you made this request, click the button below to set a new password:</p>\n\n                <div style=\"text-align: center;\">\n                    <a href=\"${resetUrl}\" class=\"button\">Reset My Password</a>\n                </div>\n\n                <div class=\"security-notice\">\n                    <h3>🛡️ Security Notice</h3>\n                    <ul>\n                        <li>This link will expire in <strong>1 hour</strong> for your security</li>\n                        <li>If you didn't request this reset, you can safely ignore this email</li>\n                        <li>Your current password will remain unchanged until you create a new one</li>\n                    </ul>\n                </div>\n\n                <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                <p style=\"word-break: break-all; color: #666; font-size: 14px;\">${resetUrl}</p>\n\n                <p>If you didn't request a password reset, please contact our support team immediately at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a>.</p>\n            </div>\n            <div class=\"footer\">\n                <p><strong>Floworx</strong> - Email AI Built by Hot Tub Pros—For Hot Tub Pros</p>\n                <p>This is an automated security email. Please do not reply to this message.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  /**\n   * Get verification email template\n   */\n  getVerificationEmailTemplate(firstName, verificationUrl) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email - Floworx</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 0 auto; background: white; padding: 0; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 40px 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .footer { background: #f8f9fa; padding: 20px 30px; text-align: center; color: #666; border-radius: 0 0 10px 10px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🚀 Welcome to Floworx!</h1>\n                <p>Your Intelligent Email Automation Platform</p>\n            </div>\n            <div class=\"content\">\n                <h2>Hi ${firstName || 'there'}!</h2>\n                <p>Thank you for signing up for Floworx! We're excited to help you automate your email management and grow your hot tub business.</p>\n                \n                <p>To get started, please verify your email address by clicking the button below:</p>\n                \n                <div style=\"text-align: center;\">\n                    <a href=\"${verificationUrl}\" class=\"button\">Verify My Email Address</a>\n                </div>\n                \n                <p>Once verified, you'll be able to:</p>\n                <ul>\n                    <li>🤖 Set up AI-powered email automation</li>\n                    <li>📧 Automatically categorize and route emails</li>\n                    <li>👥 Configure team notifications</li>\n                    <li>📊 Track email performance and insights</li>\n                </ul>\n                \n                <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                <p style=\"word-break: break-all; color: #666; font-size: 14px;\">${verificationUrl}</p>\n                \n                <p><strong>This verification link expires in 24 hours.</strong></p>\n            </div>\n            <div class=\"footer\">\n                <p>Need help? Contact us at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a></p>\n                <p>© 2024 Floworx. All rights reserved.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  /**\n   * Get welcome email template\n   */\n  getWelcomeEmailTemplate(firstName, dashboardUrl) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to Floworx - Let's Get Started!</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 0 auto; background: white; padding: 0; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 40px 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 40px 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .step { background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #4CAF50; }\n            .footer { background: #f8f9fa; padding: 20px 30px; text-align: center; color: #666; border-radius: 0 0 10px 10px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🎉 Email Verified Successfully!</h1>\n                <p>You're ready to start automating your emails</p>\n            </div>\n            <div class=\"content\">\n                <h2>Great job, ${firstName || 'there'}!</h2>\n                <p>Your email has been verified and your Floworx account is now active. Let's get your email automation set up in just a few minutes!</p>\n                \n                <div style=\"text-align: center;\">\n                    <a href=\"${dashboardUrl}\" class=\"button\">Start My Setup Journey</a>\n                </div>\n                \n                <h3>What happens next?</h3>\n                \n                <div class=\"step\">\n                    <strong>Step 1: Connect Your Google Account</strong>\n                    <p>Securely connect your Gmail to enable email monitoring and automation.</p>\n                </div>\n                \n                <div class=\"step\">\n                    <strong>Step 2: Define Your Email Categories</strong>\n                    <p>Tell us about the types of emails your business receives (leads, support, etc.).</p>\n                </div>\n                \n                <div class=\"step\">\n                    <strong>Step 3: Set Up Team Notifications</strong>\n                    <p>Configure which team members get notified for different email types.</p>\n                </div>\n                \n                <div class=\"step\">\n                    <strong>Step 4: Activate Automation</strong>\n                    <p>Launch your intelligent email automation and start seeing results immediately!</p>\n                </div>\n                \n                <p><strong>The entire setup takes less than 10 minutes and you'll see immediate results.</strong></p>\n            </div>\n            <div class=\"footer\">\n                <p>Questions? We're here to help at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a></p>\n                <p>© 2024 Floworx. All rights reserved.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  /**\n   * Get onboarding reminder template\n   */\n  getOnboardingReminderTemplate(firstName, lastStep, continueUrl) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Complete Your Floworx Setup</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 0 auto; background: white; padding: 0; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #FF6B35, #F7931E); color: white; padding: 40px 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 40px 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #4CAF50, #45a049); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .progress { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #FF6B35; }\n            .footer { background: #f8f9fa; padding: 20px 30px; text-align: center; color: #666; border-radius: 0 0 10px 10px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>⏰ Don't Miss Out!</h1>\n                <p>Your email automation is waiting</p>\n            </div>\n            <div class=\"content\">\n                <h2>Hi ${firstName || 'there'},</h2>\n                <p>You started setting up your Floworx email automation but haven't finished yet. You're so close to having intelligent email management for your business!</p>\n                \n                <div class=\"progress\">\n                    <strong>Your Progress:</strong> You completed the ${lastStep || 'initial'} step.\n                    <br><small>Just a few more minutes and you'll have full email automation running!</small>\n                </div>\n                \n                <p><strong>Why complete your setup now?</strong></p>\n                <ul>\n                    <li>🚀 Start automating emails immediately</li>\n                    <li>⏱️ Save hours of manual email management</li>\n                    <li>📈 Never miss important customer emails again</li>\n                    <li>👥 Keep your team informed automatically</li>\n                </ul>\n                \n                <div style=\"text-align: center;\">\n                    <a href=\"${continueUrl}\" class=\"button\">Continue My Setup</a>\n                </div>\n                \n                <p><em>This will only take a few more minutes, and you'll see the benefits immediately!</em></p>\n            </div>\n            <div class=\"footer\">\n                <p>Need assistance? Reply to this email or contact <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a></p>\n                <p>© 2024 Floworx. All rights reserved.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  /**\n   * Get password reset email template (enhanced version)\n   */\n  getPasswordResetTemplateEnhanced(firstName, resetUrl, expiryMinutes) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Reset Your Password - Floworx</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 0 auto; background: white; padding: 0; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); color: white; padding: 40px 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 40px 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 20px 0; }\n            .footer { background: #f8f9fa; padding: 30px; text-align: center; border-radius: 0 0 10px 10px; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🔐 Password Reset Request</h1>\n                <p>Secure access to your Floworx account</p>\n            </div>\n            <div class=\"content\">\n                <h2>Hello ${firstName},</h2>\n                <p>We received a request to reset your password for your Floworx account. If you made this request, click the button below to reset your password:</p>\n\n                <div style=\"text-align: center;\">\n                    <a href=\"${resetUrl}\" class=\"button\">Reset My Password</a>\n                </div>\n\n                <div class=\"warning\">\n                    <strong>⚠️ Important Security Information:</strong>\n                    <ul>\n                        <li>This link will expire in ${expiryMinutes} minutes</li>\n                        <li>You can only use this link once</li>\n                        <li>If you didn't request this reset, please ignore this email</li>\n                        <li>Your password will remain unchanged until you complete the reset process</li>\n                    </ul>\n                </div>\n\n                <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                <p style=\"word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace;\">${resetUrl}</p>\n\n                <p>If you didn't request a password reset, you can safely ignore this email. Your account remains secure.</p>\n\n                <p>Best regards,<br>The Floworx Team</p>\n            </div>\n            <div class=\"footer\">\n                <p>This is an automated message from Floworx. Please do not reply to this email.</p>\n                <p>If you need help, contact us at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a></p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  /**\n   * Get password reset confirmation email template\n   */\n  getPasswordResetConfirmationTemplate(firstName, loginUrl) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Password Reset Successful - Floworx</title>\n        <style>\n            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 0 auto; background: white; padding: 0; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%); color: white; padding: 40px 30px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 40px 30px; }\n            .button { display: inline-block; background: linear-gradient(135deg, #27ae60, #2ecc71); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 20px 0; }\n            .security-tips { background: #e8f5e8; border: 1px solid #27ae60; padding: 15px; border-radius: 8px; margin: 20px 0; }\n            .footer { background: #f8f9fa; padding: 30px; text-align: center; border-radius: 0 0 10px 10px; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>✅ Password Reset Successful</h1>\n                <p>Your Floworx account is secure</p>\n            </div>\n            <div class=\"content\">\n                <h2>Hello ${firstName},</h2>\n                <p>Your password has been successfully reset. You can now log in to your Floworx account with your new password.</p>\n\n                <div style=\"text-align: center;\">\n                    <a href=\"${loginUrl}\" class=\"button\">Log In to Floworx</a>\n                </div>\n\n                <div class=\"security-tips\">\n                    <strong>🔒 Security Tips:</strong>\n                    <ul>\n                        <li>Keep your password secure and don't share it with anyone</li>\n                        <li>Use a unique password that you don't use for other accounts</li>\n                        <li>Consider enabling two-factor authentication for extra security</li>\n                        <li>If you notice any suspicious activity, contact us immediately</li>\n                    </ul>\n                </div>\n\n                <p>If you didn't reset your password, please contact our support team immediately at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a>.</p>\n\n                <p>Best regards,<br>The Floworx Team</p>\n            </div>\n            <div class=\"footer\">\n                <p>This is an automated message from Floworx. Please do not reply to this email.</p>\n                <p>If you need help, contact us at <a href=\"mailto:support@floworx-iq.com\">support@floworx-iq.com</a></p>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  getAccountRecoveryTemplate(firstName, recoveryUrl, recoveryType, expiryTime) {\n    const recoveryTypeText = {\n      'email_change': 'Email Change Recovery',\n      'account_recovery': 'Account Recovery',\n      'emergency_access': 'Emergency Access',\n      'account_lockout': 'Account Lockout Recovery'\n    };\n\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>FloWorx Account Recovery</title>\n        <style>\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n                line-height: 1.6;\n                color: #333;\n                max-width: 600px;\n                margin: 0 auto;\n                padding: 20px;\n                background-color: #f8fafc;\n            }\n            .container {\n                background: white;\n                border-radius: 12px;\n                padding: 40px;\n                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 30px;\n            }\n            .logo {\n                font-size: 28px;\n                font-weight: bold;\n                color: #2563eb;\n                margin-bottom: 10px;\n            }\n            .title {\n                font-size: 24px;\n                font-weight: 600;\n                color: #1f2937;\n                margin-bottom: 10px;\n            }\n            .recovery-button {\n                display: inline-block;\n                background: #2563eb;\n                color: white;\n                padding: 14px 28px;\n                text-decoration: none;\n                border-radius: 8px;\n                font-weight: 600;\n                margin: 20px 0;\n                text-align: center;\n            }\n            .warning-box {\n                background: #fef3cd;\n                border-left: 4px solid #f59e0b;\n                padding: 16px;\n                margin: 20px 0;\n                border-radius: 4px;\n            }\n            .footer {\n                margin-top: 40px;\n                padding-top: 20px;\n                border-top: 1px solid #e5e7eb;\n                text-align: center;\n                color: #6b7280;\n                font-size: 14px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">FloWorx</div>\n                <h1 class=\"title\">${recoveryTypeText[recoveryType] || 'Account Recovery'}</h1>\n            </div>\n\n            <p>Hello ${firstName},</p>\n\n            <p>We received a request to recover your FloWorx account. If you made this request, click the button below to continue:</p>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n                <a href=\"${recoveryUrl}\" class=\"recovery-button\">Recover My Account</a>\n            </div>\n\n            <div class=\"warning-box\">\n                <strong>⚠️ Security Notice:</strong><br>\n                If you didn't request this account recovery, please ignore this email. Your account remains secure.\n            </div>\n\n            <p><strong>Important:</strong></p>\n            <ul>\n                <li>This recovery link expires ${expiryTime}</li>\n                <li>The link can only be used once</li>\n                <li>Never share this recovery link with anyone</li>\n            </ul>\n\n            <p>If the button above doesn't work, copy and paste this link into your browser:</p>\n            <p style=\"word-break: break-all; background: #f3f4f6; padding: 10px; border-radius: 4px; font-family: monospace;\">\n                ${recoveryUrl}\n            </p>\n\n            <p>If you have any questions, please contact our support team.</p>\n\n            <p>Best regards,<br>The FloWorx Security Team</p>\n        </div>\n        <div class=\"footer\">\n            <p>This email was sent because a recovery request was made for your FloWorx account.</p>\n            <p>FloWorx - Email AI Built by Hot Tub Pros—For Hot Tub Pros</p>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n}\n\nmodule.exports = new EmailService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\encryptionService.js",
    "messages": [
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async method 'encrypt' has no 'await' expression.",
        "line": 47,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 47,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [1387, 1393], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async method 'decrypt' has no 'await' expression.",
        "line": 84,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 84,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [2547, 2553], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 215,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const crypto = require('crypto');\n\nclass EncryptionService {\n  constructor() {\n    this.algorithm = 'aes-256-gcm';\n    this.keyLength = 32; // 256 bits\n    this.ivLength = 16; // 128 bits\n    this.tagLength = 16; // 128 bits\n    this.saltLength = 32; // 256 bits\n    \n    // Get encryption key from environment or generate one\n    this.masterKey = this.getMasterKey();\n  }\n\n  /**\n   * Get or generate master encryption key\n   * @returns {Buffer} Master encryption key\n   */\n  getMasterKey() {\n    const keyFromEnv = process.env.ENCRYPTION_KEY;\n    \n    if (keyFromEnv) {\n      // Use key from environment variable\n      return Buffer.from(keyFromEnv, 'hex');\n    } else {\n      // Generate a new key (for development only)\n      console.warn('⚠️  No ENCRYPTION_KEY found in environment. Generating temporary key.');\n      console.warn('⚠️  This key will not persist across restarts. Set ENCRYPTION_KEY in production.');\n      return crypto.randomBytes(this.keyLength);\n    }\n  }\n\n  /**\n   * Derive encryption key from master key and salt\n   * @param {Buffer} salt - Salt for key derivation\n   * @returns {Buffer} Derived key\n   */\n  deriveKey(salt) {\n    return crypto.pbkdf2Sync(this.masterKey, salt, 100000, this.keyLength, 'sha256');\n  }\n\n  /**\n   * Encrypt data\n   * @param {string} plaintext - Data to encrypt\n   * @returns {Promise<string>} Encrypted data as base64 string\n   */\n  async encrypt(plaintext) {\n    try {\n      // Generate random salt and IV\n      const salt = crypto.randomBytes(this.saltLength);\n      const iv = crypto.randomBytes(this.ivLength);\n      \n      // Derive key from master key and salt\n      const key = this.deriveKey(salt);\n      \n      // Create cipher\n      const cipher = crypto.createCipherGCM(this.algorithm, key, iv);\n      cipher.setAAD(salt); // Use salt as additional authenticated data\n\n      // Encrypt the data\n      let encrypted = cipher.update(plaintext, 'utf8');\n      encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n      // Get authentication tag\n      const tag = cipher.getAuthTag();\n      \n      // Combine salt, iv, tag, and encrypted data\n      const combined = Buffer.concat([salt, iv, tag, encrypted]);\n      \n      // Return as base64 string\n      return combined.toString('base64');\n      \n    } catch (error) {\n      console.error('Encryption error:', error);\n      throw new Error('Failed to encrypt data');\n    }\n  }\n\n  /**\n   * Decrypt data\n   * @param {string} encryptedData - Encrypted data as base64 string\n   * @returns {Promise<string>} Decrypted plaintext\n   */\n  async decrypt(encryptedData) {\n    try {\n      // Convert from base64\n      const combined = Buffer.from(encryptedData, 'base64');\n      \n      // Extract components\n      const salt = combined.slice(0, this.saltLength);\n      const iv = combined.slice(this.saltLength, this.saltLength + this.ivLength);\n      const tag = combined.slice(this.saltLength + this.ivLength, this.saltLength + this.ivLength + this.tagLength);\n      const encrypted = combined.slice(this.saltLength + this.ivLength + this.tagLength);\n      \n      // Derive key from master key and salt\n      const key = this.deriveKey(salt);\n      \n      // Create decipher\n      const decipher = crypto.createDecipherGCM(this.algorithm, key, iv);\n      decipher.setAAD(salt); // Use salt as additional authenticated data\n      decipher.setAuthTag(tag);\n\n      // Decrypt the data\n      let decrypted = decipher.update(encrypted);\n      decrypted = Buffer.concat([decrypted, decipher.final()]);\n      \n      return decrypted.toString('utf8');\n      \n    } catch (error) {\n      console.error('Decryption error:', error);\n      throw new Error('Failed to decrypt data');\n    }\n  }\n\n  /**\n   * Encrypt OAuth tokens for secure storage\n   * @param {Object} tokens - OAuth tokens object\n   * @returns {Promise<Object>} Encrypted tokens object\n   */\n  async encryptOAuthTokens(tokens) {\n    try {\n      const encryptedTokens = {};\n      \n      if (tokens.access_token) {\n        encryptedTokens.access_token = await this.encrypt(tokens.access_token);\n      }\n      \n      if (tokens.refresh_token) {\n        encryptedTokens.refresh_token = await this.encrypt(tokens.refresh_token);\n      }\n      \n      // Copy non-sensitive fields as-is\n      if (tokens.token_type) {encryptedTokens.token_type = tokens.token_type;}\n      if (tokens.scope) {encryptedTokens.scope = tokens.scope;}\n      if (tokens.expiry_date) {encryptedTokens.expiry_date = tokens.expiry_date;}\n      \n      return encryptedTokens;\n      \n    } catch (error) {\n      console.error('OAuth token encryption error:', error);\n      throw new Error('Failed to encrypt OAuth tokens');\n    }\n  }\n\n  /**\n   * Decrypt OAuth tokens for use\n   * @param {Object} encryptedTokens - Encrypted tokens object\n   * @returns {Promise<Object>} Decrypted tokens object\n   */\n  async decryptOAuthTokens(encryptedTokens) {\n    try {\n      const decryptedTokens = {};\n      \n      if (encryptedTokens.access_token) {\n        decryptedTokens.access_token = await this.decrypt(encryptedTokens.access_token);\n      }\n      \n      if (encryptedTokens.refresh_token) {\n        decryptedTokens.refresh_token = await this.decrypt(encryptedTokens.refresh_token);\n      }\n      \n      // Copy non-sensitive fields as-is\n      if (encryptedTokens.token_type) {decryptedTokens.token_type = encryptedTokens.token_type;}\n      if (encryptedTokens.scope) {decryptedTokens.scope = encryptedTokens.scope;}\n      if (encryptedTokens.expiry_date) {decryptedTokens.expiry_date = encryptedTokens.expiry_date;}\n      \n      return decryptedTokens;\n      \n    } catch (error) {\n      console.error('OAuth token decryption error:', error);\n      throw new Error('Failed to decrypt OAuth tokens');\n    }\n  }\n\n  /**\n   * Generate secure random string\n   * @param {number} length - Length of random string\n   * @returns {string} Random string\n   */\n  generateSecureRandom(length = 32) {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Hash data with salt\n   * @param {string} data - Data to hash\n   * @param {string} salt - Salt for hashing (optional)\n   * @returns {Object} Hash result with salt and hash\n   */\n  hashWithSalt(data, salt = null) {\n    if (!salt) {\n      salt = crypto.randomBytes(16).toString('hex');\n    }\n    \n    const hash = crypto.pbkdf2Sync(data, salt, 100000, 64, 'sha256').toString('hex');\n    \n    return {\n      salt,\n      hash,\n      combined: `${salt}:${hash}`\n    };\n  }\n\n  /**\n   * Verify hashed data\n   * @param {string} data - Original data\n   * @param {string} combined - Combined salt:hash string\n   * @returns {boolean} Verification result\n   */\n  verifyHash(data, combined) {\n    try {\n      const [salt, hash] = combined.split(':');\n      const verification = this.hashWithSalt(data, salt);\n      return verification.hash === hash;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Create backup of encryption key (for recovery purposes)\n   * @returns {Object} Key backup information\n   */\n  createKeyBackup() {\n    const keyBackup = {\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      masterKeyHash: crypto.createHash('sha256').update(this.masterKey).digest('hex'),\n      created: new Date().toISOString()\n    };\n    \n    return keyBackup;\n  }\n\n  /**\n   * Validate encryption key\n   * @returns {Promise<boolean>} Key validation result\n   */\n  async validateKey() {\n    try {\n      // Test encryption/decryption with the current key\n      const testData = 'encryption-test-' + Date.now();\n      const encrypted = await this.encrypt(testData);\n      const decrypted = await this.decrypt(encrypted);\n\n      return decrypted === testData;\n    } catch (error) {\n      console.error('Key validation failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nmodule.exports = new EncryptionService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\gmailService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\n8nService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'transactionService' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "transactionService" },
            "fix": { "range": [84, 143], "text": "" },
            "desc": "Remove unused variable 'transactionService'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 111,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [3274, 3351], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'response' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 133,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 133,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "response" },
            "fix": { "range": [3837, 3916], "text": "" },
            "desc": "Remove unused variable 'response'."
          }
        ]
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async method 'getMasterTemplate' has no 'await' expression.",
        "line": 219,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 219,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [6062, 6068], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async method 'customizeWorkflow' has no 'await' expression.",
        "line": 346,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "missingAwait",
        "endLine": 346,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [10130, 10136], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const axios = require('axios');\nconst { pool } = require('../database/connection');\nconst transactionService = require('./transactionService');\n\nclass N8nService {\n  constructor() {\n    this.baseURL = process.env.N8N_API_URL || 'http://localhost:5678/api/v1';\n    this.apiKey = process.env.N8N_API_KEY;\n    this.webhookBaseURL = process.env.N8N_WEBHOOK_URL || 'http://localhost:5678/webhook';\n    \n    // Configure axios instance\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'X-N8N-API-KEY': this.apiKey,\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000 // 30 seconds\n    });\n\n    // Add request/response interceptors for logging\n    this.client.interceptors.request.use(\n      (config) => {\n        console.log(`N8N API Request: ${config.method?.toUpperCase()} ${config.url}`);\n        return config;\n      },\n      (error) => {\n        console.error('N8N API Request Error:', error);\n        return Promise.reject(error);\n      }\n    );\n\n    this.client.interceptors.response.use(\n      (response) => {\n        console.log(`N8N API Response: ${response.status} ${response.config.url}`);\n        return response;\n      },\n      (error) => {\n        console.error('N8N API Response Error:', error.response?.status, error.response?.data);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Test n8n API connection\n   * @returns {Object} Connection status\n   */\n  async testConnection() {\n    try {\n      const response = await this.client.get('/workflows');\n      return {\n        connected: true,\n        status: 'healthy',\n        workflowCount: response.data.data?.length || 0,\n        version: response.headers['x-n8n-version'] || 'unknown'\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        status: 'error',\n        error: error.message,\n        code: error.response?.status\n      };\n    }\n  }\n\n  /**\n   * Create a new workflow from template\n   * @param {string} userId - User ID\n   * @param {Object} config - User's onboarding configuration\n   * @returns {Object} Created workflow information\n   */\n  async createWorkflowFromTemplate(userId, config) {\n    try {\n      // Get the master template\n      const template = await this.getMasterTemplate();\n      \n      // Customize template with user configuration\n      const customizedWorkflow = await this.customizeWorkflow(template, userId, config);\n      \n      // Create workflow in n8n\n      const response = await this.client.post('/workflows', customizedWorkflow);\n      \n      const workflowData = response.data.data;\n      \n      // Store workflow deployment record\n      await this.storeWorkflowDeployment(userId, workflowData, config);\n      \n      return {\n        success: true,\n        workflowId: workflowData.id,\n        workflowName: workflowData.name,\n        webhookUrl: this.generateWebhookUrl(workflowData.id),\n        status: 'created'\n      };\n\n    } catch (error) {\n      console.error('Error creating workflow:', error);\n      throw new Error(`Failed to create workflow: ${error.message}`);\n    }\n  }\n\n  /**\n   * Activate a workflow\n   * @param {string} workflowId - n8n workflow ID\n   * @returns {Object} Activation result\n   */\n  async activateWorkflow(workflowId) {\n    try {\n      const response = await this.client.post(`/workflows/${workflowId}/activate`);\n      \n      return {\n        success: true,\n        workflowId,\n        status: 'active',\n        activatedAt: new Date()\n      };\n\n    } catch (error) {\n      console.error('Error activating workflow:', error);\n      throw new Error(`Failed to activate workflow: ${error.message}`);\n    }\n  }\n\n  /**\n   * Deactivate a workflow\n   * @param {string} workflowId - n8n workflow ID\n   * @returns {Object} Deactivation result\n   */\n  async deactivateWorkflow(workflowId) {\n    try {\n      const response = await this.client.post(`/workflows/${workflowId}/deactivate`);\n      \n      return {\n        success: true,\n        workflowId,\n        status: 'inactive',\n        deactivatedAt: new Date()\n      };\n\n    } catch (error) {\n      console.error('Error deactivating workflow:', error);\n      throw new Error(`Failed to deactivate workflow: ${error.message}`);\n    }\n  }\n\n  /**\n   * Test workflow execution\n   * @param {string} workflowId - n8n workflow ID\n   * @param {Object} testData - Test data to send\n   * @returns {Object} Test execution result\n   */\n  async testWorkflow(workflowId, testData = {}) {\n    try {\n      const response = await this.client.post(`/workflows/${workflowId}/execute`, {\n        data: testData\n      });\n      \n      return {\n        success: true,\n        executionId: response.data.data.executionId,\n        status: response.data.data.status,\n        result: response.data.data\n      };\n\n    } catch (error) {\n      console.error('Error testing workflow:', error);\n      throw new Error(`Failed to test workflow: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get workflow execution status\n   * @param {string} executionId - Execution ID\n   * @returns {Object} Execution status\n   */\n  async getExecutionStatus(executionId) {\n    try {\n      const response = await this.client.get(`/executions/${executionId}`);\n      \n      return {\n        success: true,\n        execution: response.data.data\n      };\n\n    } catch (error) {\n      console.error('Error getting execution status:', error);\n      throw new Error(`Failed to get execution status: ${error.message}`);\n    }\n  }\n\n  /**\n   * Delete a workflow\n   * @param {string} workflowId - n8n workflow ID\n   * @returns {Object} Deletion result\n   */\n  async deleteWorkflow(workflowId) {\n    try {\n      await this.client.delete(`/workflows/${workflowId}`);\n      \n      return {\n        success: true,\n        workflowId,\n        status: 'deleted',\n        deletedAt: new Date()\n      };\n\n    } catch (error) {\n      console.error('Error deleting workflow:', error);\n      throw new Error(`Failed to delete workflow: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get master workflow template\n   * @returns {Object} Master template\n   */\n  async getMasterTemplate() {\n    // This would typically load from a file or database\n    // For now, return a basic email automation template\n    return {\n      name: 'Floworx Email Automation Template',\n      nodes: [\n        {\n          parameters: {},\n          name: 'Gmail Trigger',\n          type: 'n8n-nodes-base.gmailTrigger',\n          typeVersion: 1,\n          position: [250, 300],\n          webhookId: 'gmail-webhook',\n          credentials: {\n            gmailOAuth2: 'gmail_oauth'\n          }\n        },\n        {\n          parameters: {\n            functionCode: \"// Email categorization logic\\nconst email = items[0].json;\\nconst subject = email.subject || '';\\nconst body = email.body || '';\\nconst from = email.from || '';\\n\\n// Simple categorization rules\\nlet category = 'general';\\n\\nif (subject.toLowerCase().includes('quote') || subject.toLowerCase().includes('price')) {\\n  category = 'new-leads';\\n} else if (subject.toLowerCase().includes('support') || subject.toLowerCase().includes('help')) {\\n  category = 'customer-support';\\n} else if (subject.toLowerCase().includes('service') || subject.toLowerCase().includes('repair')) {\\n  category = 'service-requests';\\n} else if (subject.toLowerCase().includes('invoice') || subject.toLowerCase().includes('payment')) {\\n  category = 'invoices-billing';\\n}\\n\\nreturn [{\\n  json: {\\n    ...email,\\n    category,\\n    processed_at: new Date().toISOString()\\n  }\\n}];\"\n          },\n          name: 'Categorize Email',\n          type: 'n8n-nodes-base.function',\n          typeVersion: 1,\n          position: [450, 300]\n        },\n        {\n          parameters: {\n            conditions: {\n              string: [\n                {\n                  value1: '={{$json.category}}',\n                  operation: 'equal',\n                  value2: 'new-leads'\n                }\n              ]\n            }\n          },\n          name: 'Is New Lead?',\n          type: 'n8n-nodes-base.if',\n          typeVersion: 1,\n          position: [650, 300]\n        },\n        {\n          parameters: {\n            labelIds: ['INBOX', 'Label_New_Leads'],\n            messageId: '={{$json.id}}'\n          },\n          name: 'Label as New Lead',\n          type: 'n8n-nodes-base.gmail',\n          typeVersion: 1,\n          position: [850, 200],\n          credentials: {\n            gmailOAuth2: 'gmail_oauth'\n          }\n        },\n        {\n          parameters: {\n            to: 'team@company.com',\n            subject: 'New Lead: {{$json.subject}}',\n            message: 'A new lead email has been received:\\n\\nFrom: {{$json.from}}\\nSubject: {{$json.subject}}\\n\\nPlease review and respond promptly.'\n          },\n          name: 'Notify Team',\n          type: 'n8n-nodes-base.emailSend',\n          typeVersion: 1,\n          position: [1050, 200]\n        }\n      ],\n      connections: {\n        'Gmail Trigger': {\n          main: [\n            [\n              {\n                node: 'Categorize Email',\n                type: 'main',\n                index: 0\n              }\n            ]\n          ]\n        },\n        'Categorize Email': {\n          main: [\n            [\n              {\n                node: 'Is New Lead?',\n                type: 'main',\n                index: 0\n              }\n            ]\n          ]\n        },\n        'Is New Lead?': {\n          main: [\n            [\n              {\n                node: 'Label as New Lead',\n                type: 'main',\n                index: 0\n              }\n            ]\n          ]\n        },\n        'Label as New Lead': {\n          main: [\n            [\n              {\n                node: 'Notify Team',\n                type: 'main',\n                index: 0\n              }\n            ]\n          ]\n        }\n      },\n      active: false,\n      settings: {},\n      staticData: {}\n    };\n  }\n\n  /**\n   * Customize workflow template with user configuration\n   * @param {Object} template - Base template\n   * @param {string} userId - User ID\n   * @param {Object} config - User configuration\n   * @returns {Object} Customized workflow\n   */\n  async customizeWorkflow(template, userId, config) {\n    const customized = JSON.parse(JSON.stringify(template)); // Deep clone\n    \n    // Customize workflow name\n    customized.name = `Floworx Automation - User ${userId}`;\n    \n    // Update categorization logic based on user's categories\n    if (config.businessCategories && config.businessCategories.length > 0) {\n      const categorizeNode = customized.nodes.find(n => n.name === 'Categorize Email');\n      if (categorizeNode) {\n        categorizeNode.parameters.functionCode = this.generateCategorizationCode(config.businessCategories);\n      }\n    }\n    \n    // Update Gmail labels based on user's mappings\n    if (config.labelMappings && config.labelMappings.length > 0) {\n      // This would update the label assignment logic\n      // For now, we'll keep it simple\n    }\n    \n    // Update team notifications\n    if (config.teamMembers && config.teamMembers.length > 0) {\n      const notifyNode = customized.nodes.find(n => n.name === 'Notify Team');\n      if (notifyNode) {\n        const teamEmails = config.teamMembers.map(m => m.email).join(', ');\n        notifyNode.parameters.to = teamEmails;\n      }\n    }\n    \n    return customized;\n  }\n\n  /**\n   * Generate categorization code based on user's categories\n   * @param {Array} categories - User's business categories\n   * @returns {string} JavaScript code for categorization\n   */\n  generateCategorizationCode(categories) {\n    const categoryRules = categories.map(cat => {\n      const keywords = this.generateKeywords(cat.name);\n      return `if (${keywords.map(k => `subject.toLowerCase().includes('${k}') || body.toLowerCase().includes('${k}')`).join(' || ')}) {\n  category = '${cat.name.toLowerCase().replace(/\\s+/g, '-')}';\n}`;\n    }).join(' else ');\n\n    return `// AI-powered email categorization\nconst email = items[0].json;\nconst subject = email.subject || '';\nconst body = email.body || '';\nconst from = email.from || '';\n\n// Default category\nlet category = 'general';\n\n// User-defined categorization rules\n${categoryRules}\n\nreturn [{\n  json: {\n    ...email,\n    category,\n    processed_at: new Date().toISOString(),\n    confidence: 0.8 // Placeholder for AI confidence score\n  }\n}];`;\n  }\n\n  /**\n   * Generate keywords for a category\n   * @param {string} categoryName - Category name\n   * @returns {Array} Keywords for matching\n   */\n  generateKeywords(categoryName) {\n    const keywordMap = {\n      'new leads': ['quote', 'price', 'cost', 'interested', 'inquiry', 'information'],\n      'customer support': ['help', 'support', 'problem', 'issue', 'trouble', 'question'],\n      'service requests': ['service', 'repair', 'maintenance', 'fix', 'broken', 'appointment'],\n      'invoices & billing': ['invoice', 'payment', 'bill', 'charge', 'receipt', 'refund'],\n      'partnerships': ['partner', 'vendor', 'supplier', 'collaboration', 'business'],\n      'appointments': ['appointment', 'schedule', 'booking', 'meeting', 'visit'],\n      'product inquiries': ['product', 'hot tub', 'spa', 'model', 'features', 'specifications'],\n      'warranty claims': ['warranty', 'claim', 'defect', 'replacement', 'coverage']\n    };\n\n    const key = categoryName.toLowerCase();\n    return keywordMap[key] || [key.replace(/\\s+/g, ''), key.split(' ')[0]];\n  }\n\n  /**\n   * Store workflow deployment record\n   * @param {string} userId - User ID\n   * @param {Object} workflowData - n8n workflow data\n   * @param {Object} config - User configuration\n   */\n  async storeWorkflowDeployment(userId, workflowData, config) {\n    const query = `\n      INSERT INTO workflow_deployments (\n        user_id, n8n_workflow_id, workflow_name, workflow_status, deployment_config, deployed_at\n      ) VALUES ($1, $2, $3, $4, $5, $6)\n      ON CONFLICT (user_id) \n      DO UPDATE SET \n        n8n_workflow_id = EXCLUDED.n8n_workflow_id,\n        workflow_name = EXCLUDED.workflow_name,\n        workflow_status = EXCLUDED.workflow_status,\n        deployment_config = EXCLUDED.deployment_config,\n        deployed_at = EXCLUDED.deployed_at,\n        updated_at = CURRENT_TIMESTAMP\n    `;\n\n    await pool.query(query, [\n      userId,\n      workflowData.id.toString(),\n      workflowData.name,\n      'deployed',\n      JSON.stringify(config),\n      new Date()\n    ]);\n  }\n\n  /**\n   * Generate webhook URL for workflow\n   * @param {string} workflowId - n8n workflow ID\n   * @returns {string} Webhook URL\n   */\n  generateWebhookUrl(workflowId) {\n    return `${this.webhookBaseURL}/floworx-${workflowId}`;\n  }\n\n  /**\n   * Get user's deployed workflows\n   * @param {string} userId - User ID\n   * @returns {Array} User's workflows\n   */\n  async getUserWorkflows(userId) {\n    const query = `\n      SELECT n8n_workflow_id, workflow_name, workflow_status, deployed_at, deployment_config\n      FROM workflow_deployments\n      WHERE user_id = $1\n      ORDER BY deployed_at DESC\n    `;\n\n    const result = await pool.query(query, [userId]);\n    return result.rows;\n  }\n\n  /**\n   * Validate workflow configuration before deployment\n   * @param {Object} config - User configuration\n   * @returns {Object} Validation result\n   */\n  validateWorkflowConfig(config) {\n    const errors = [];\n    const warnings = [];\n\n    // Check required fields\n    if (!config.businessCategories || config.businessCategories.length === 0) {\n      errors.push('At least one business category is required');\n    }\n\n    // Validate categories\n    if (config.businessCategories) {\n      config.businessCategories.forEach((category, index) => {\n        if (!category.name || category.name.trim().length === 0) {\n          errors.push(`Category ${index + 1} must have a name`);\n        }\n        if (category.name && category.name.length > 50) {\n          warnings.push(`Category \"${category.name}\" is quite long - consider shortening for better readability`);\n        }\n      });\n    }\n\n    // Check team members\n    if (config.teamMembers && config.teamMembers.length > 10) {\n      warnings.push('Large number of team members may result in many notifications');\n    }\n\n    // Validate email addresses\n    if (config.teamMembers) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      config.teamMembers.forEach((member, index) => {\n        if (member.email && !emailRegex.test(member.email)) {\n          errors.push(`Team member ${index + 1} has invalid email address: ${member.email}`);\n        }\n      });\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      score: this.calculateConfigScore(config)\n    };\n  }\n\n  /**\n   * Calculate configuration quality score\n   * @param {Object} config - User configuration\n   * @returns {number} Score from 0-100\n   */\n  calculateConfigScore(config) {\n    let score = 0;\n\n    // Base score for having categories\n    if (config.businessCategories && config.businessCategories.length > 0) {\n      score += 40;\n\n      // Bonus for multiple categories\n      if (config.businessCategories.length >= 3) {score += 10;}\n      if (config.businessCategories.length >= 5) {score += 10;}\n    }\n\n    // Score for label mappings\n    if (config.labelMappings && config.labelMappings.length > 0) {\n      score += 20;\n    }\n\n    // Score for team setup\n    if (config.teamMembers && config.teamMembers.length > 0) {\n      score += 20;\n\n      // Bonus for multiple team members\n      if (config.teamMembers.length >= 2) {score += 5;}\n      if (config.teamMembers.length >= 3) {score += 5;}\n    }\n\n    return Math.min(score, 100);\n  }\n\n  /**\n   * Get workflow performance metrics\n   * @param {string} workflowId - n8n workflow ID\n   * @returns {Object} Performance metrics\n   */\n  async getWorkflowMetrics(workflowId) {\n    try {\n      // Get recent executions\n      const response = await this.client.get(`/executions?workflowId=${workflowId}&limit=100`);\n      const executions = response.data.data || [];\n\n      const now = new Date();\n      const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n      const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n      const recent24h = executions.filter(e => new Date(e.startedAt) > last24Hours);\n      const recent7d = executions.filter(e => new Date(e.startedAt) > last7Days);\n\n      const successful = executions.filter(e => e.finished && !e.stoppedAt);\n      const failed = executions.filter(e => e.stoppedAt);\n\n      return {\n        total: executions.length,\n        successful: successful.length,\n        failed: failed.length,\n        successRate: executions.length > 0 ? (successful.length / executions.length) * 100 : 0,\n        last24Hours: recent24h.length,\n        last7Days: recent7d.length,\n        averageExecutionTime: this.calculateAverageExecutionTime(successful),\n        lastExecution: executions.length > 0 ? executions[0].startedAt : null\n      };\n\n    } catch (error) {\n      console.error('Error getting workflow metrics:', error);\n      return {\n        total: 0,\n        successful: 0,\n        failed: 0,\n        successRate: 0,\n        last24Hours: 0,\n        last7Days: 0,\n        averageExecutionTime: 0,\n        lastExecution: null,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Calculate average execution time\n   * @param {Array} executions - Successful executions\n   * @returns {number} Average time in milliseconds\n   */\n  calculateAverageExecutionTime(executions) {\n    if (executions.length === 0) {return 0;}\n\n    const totalTime = executions.reduce((sum, execution) => {\n      const start = new Date(execution.startedAt);\n      const end = new Date(execution.finishedAt);\n      return sum + (end - start);\n    }, 0);\n\n    return Math.round(totalTime / executions.length);\n  }\n}\n\nmodule.exports = new N8nService();\n\nmodule.exports = new N8nService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\onboardingSessionService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 300,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "error" },
            "fix": { "range": [8306, 8313], "text": "" },
            "desc": "Remove unused variable 'error'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { pool } = require('../database/connection');\nconst transactionService = require('./transactionService');\nconst crypto = require('crypto');\n\nclass OnboardingSessionService {\n  constructor() {\n    this.activeSessions = new Map();\n    this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n  }\n\n  /**\n   * Create or resume an onboarding session\n   * @param {string} userId - User ID\n   * @param {string} currentStep - Current onboarding step\n   * @returns {Object} Session information\n   */\n  async createOrResumeSession(userId, currentStep = 'welcome') {\n    try {\n      // Check for existing session\n      const existingSession = await this.getExistingSession(userId);\n      \n      if (existingSession && !this.isSessionExpired(existingSession)) {\n        // Resume existing session\n        existingSession.lastActivity = new Date();\n        this.activeSessions.set(userId, existingSession);\n        \n        return {\n          sessionId: existingSession.sessionId,\n          resumed: true,\n          currentStep: existingSession.currentStep,\n          progress: existingSession.progress,\n          lastActivity: existingSession.lastActivity\n        };\n      }\n\n      // Create new session\n      const sessionId = this.generateSessionId();\n      const session = {\n        sessionId,\n        userId,\n        currentStep,\n        progress: {},\n        startTime: new Date(),\n        lastActivity: new Date(),\n        status: 'active',\n        checkpoints: [],\n        errors: []\n      };\n\n      // Store in memory and database\n      this.activeSessions.set(userId, session);\n      await this.persistSession(session);\n\n      return {\n        sessionId,\n        resumed: false,\n        currentStep,\n        progress: {},\n        lastActivity: session.lastActivity\n      };\n\n    } catch (error) {\n      console.error('Error creating/resuming onboarding session:', error);\n      throw new Error('Failed to initialize onboarding session');\n    }\n  }\n\n  /**\n   * Save progress checkpoint\n   * @param {string} userId - User ID\n   * @param {string} step - Completed step\n   * @param {Object} data - Step data\n   * @param {string} transactionId - Optional transaction ID\n   */\n  async saveCheckpoint(userId, step, data, transactionId = null) {\n    const session = this.activeSessions.get(userId);\n    if (!session) {\n      throw new Error('No active onboarding session found');\n    }\n\n    const checkpoint = {\n      step,\n      data,\n      timestamp: new Date(),\n      transactionId,\n      status: 'completed'\n    };\n\n    try {\n      // Add checkpoint to session\n      session.checkpoints.push(checkpoint);\n      session.progress[step] = data;\n      session.currentStep = this.getNextStep(step);\n      session.lastActivity = new Date();\n\n      // Persist to database\n      await this.persistCheckpoint(userId, checkpoint);\n      await this.updateSessionProgress(userId, session);\n\n      return {\n        success: true,\n        checkpoint,\n        nextStep: session.currentStep,\n        totalCheckpoints: session.checkpoints.length\n      };\n\n    } catch (error) {\n      console.error('Error saving checkpoint:', error);\n      \n      // Mark checkpoint as failed\n      checkpoint.status = 'failed';\n      checkpoint.error = error.message;\n      session.errors.push({\n        step,\n        error: error.message,\n        timestamp: new Date(),\n        transactionId\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Handle step failure and initiate recovery\n   * @param {string} userId - User ID\n   * @param {string} step - Failed step\n   * @param {Error} error - Error that occurred\n   * @param {string} transactionId - Transaction ID if applicable\n   */\n  async handleStepFailure(userId, step, error, transactionId = null) {\n    const session = this.activeSessions.get(userId);\n    if (!session) {\n      throw new Error('No active onboarding session found');\n    }\n\n    const failureRecord = {\n      step,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date(),\n      transactionId,\n      recoveryAttempts: 0\n    };\n\n    session.errors.push(failureRecord);\n    session.lastActivity = new Date();\n\n    try {\n      // Rollback transaction if provided\n      if (transactionId) {\n        await transactionService.rollbackTransaction(transactionId);\n        failureRecord.transactionRolledBack = true;\n      }\n\n      // Determine recovery strategy\n      const recoveryStrategy = this.determineRecoveryStrategy(step, error);\n      failureRecord.recoveryStrategy = recoveryStrategy;\n\n      // Persist failure record\n      await this.persistFailure(userId, failureRecord);\n\n      return {\n        success: true,\n        failureId: failureRecord.timestamp.getTime(),\n        recoveryStrategy,\n        canRetry: recoveryStrategy.canRetry,\n        suggestedAction: recoveryStrategy.suggestedAction\n      };\n\n    } catch (recoveryError) {\n      console.error('Error handling step failure:', recoveryError);\n      throw new Error('Failed to handle step failure');\n    }\n  }\n\n  /**\n   * Retry a failed step\n   * @param {string} userId - User ID\n   * @param {string} step - Step to retry\n   * @param {number} failureId - Failure ID\n   */\n  async retryFailedStep(userId, step, failureId) {\n    const session = this.activeSessions.get(userId);\n    if (!session) {\n      throw new Error('No active onboarding session found');\n    }\n\n    const failure = session.errors.find(e => e.timestamp.getTime() === failureId);\n    if (!failure) {\n      throw new Error('Failure record not found');\n    }\n\n    if (failure.recoveryAttempts >= 3) {\n      throw new Error('Maximum retry attempts exceeded');\n    }\n\n    failure.recoveryAttempts++;\n    failure.lastRetryAttempt = new Date();\n\n    // Reset session to the failed step\n    session.currentStep = step;\n    session.lastActivity = new Date();\n\n    await this.updateSessionProgress(userId, session);\n\n    return {\n      success: true,\n      step,\n      retryAttempt: failure.recoveryAttempts,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get session recovery information\n   * @param {string} userId - User ID\n   * @returns {Object} Recovery information\n   */\n  async getRecoveryInfo(userId) {\n    const session = this.activeSessions.get(userId) || await this.getExistingSession(userId);\n    \n    if (!session) {\n      return { hasRecoveryData: false };\n    }\n\n    const lastCheckpoint = session.checkpoints[session.checkpoints.length - 1];\n    const recentErrors = session.errors.filter(e => \n      new Date() - e.timestamp < 24 * 60 * 60 * 1000 // Last 24 hours\n    );\n\n    return {\n      hasRecoveryData: true,\n      sessionId: session.sessionId,\n      lastSuccessfulStep: lastCheckpoint?.step,\n      currentStep: session.currentStep,\n      completedSteps: session.checkpoints.map(c => c.step),\n      recentErrors: recentErrors.map(e => ({\n        step: e.step,\n        error: e.error,\n        timestamp: e.timestamp,\n        canRetry: e.recoveryAttempts < 3,\n        recoveryStrategy: e.recoveryStrategy\n      })),\n      sessionAge: new Date() - session.startTime,\n      isExpired: this.isSessionExpired(session)\n    };\n  }\n\n  /**\n   * Clean up expired sessions\n   */\n  async cleanupExpiredSessions() {\n    const expiredSessions = [];\n    \n    for (const [userId, session] of this.activeSessions.entries()) {\n      if (this.isSessionExpired(session)) {\n        expiredSessions.push(userId);\n      }\n    }\n\n    for (const userId of expiredSessions) {\n      try {\n        await this.archiveSession(userId);\n        this.activeSessions.delete(userId);\n      } catch (error) {\n        console.error(`Failed to cleanup session for user ${userId}:`, error);\n      }\n    }\n\n    return expiredSessions.length;\n  }\n\n  // Helper methods\n  generateSessionId() {\n    return crypto.randomBytes(16).toString('hex');\n  }\n\n  isSessionExpired(session) {\n    return new Date() - session.lastActivity > this.sessionTimeout;\n  }\n\n  getNextStep(currentStep) {\n    const stepOrder = [\n      'welcome',\n      'google-connection',\n      'business-type',\n      'business-categories',\n      'label-mapping',\n      'team-setup',\n      'review',\n      'workflow-deployment',\n      'completion'\n    ];\n\n    const currentIndex = stepOrder.indexOf(currentStep);\n    return currentIndex < stepOrder.length - 1 ? stepOrder[currentIndex + 1] : 'completion';\n  }\n\n  determineRecoveryStrategy(step, error) {\n    const strategies = {\n      'google-connection': {\n        canRetry: true,\n        suggestedAction: 'retry_oauth',\n        message: 'Please try connecting your Google account again',\n        autoRetry: false\n      },\n      'business-categories': {\n        canRetry: true,\n        suggestedAction: 'retry_step',\n        message: 'Please try saving your categories again',\n        autoRetry: true\n      },\n      'label-mapping': {\n        canRetry: true,\n        suggestedAction: 'refresh_labels',\n        message: 'We\\'ll refresh your Gmail labels and try again',\n        autoRetry: true\n      },\n      'team-setup': {\n        canRetry: true,\n        suggestedAction: 'retry_step',\n        message: 'Please try saving your team setup again',\n        autoRetry: true\n      },\n      'workflow-deployment': {\n        canRetry: true,\n        suggestedAction: 'retry_deployment',\n        message: 'We\\'ll attempt to deploy your workflow again',\n        autoRetry: false\n      }\n    };\n\n    return strategies[step] || {\n      canRetry: true,\n      suggestedAction: 'retry_step',\n      message: 'Please try this step again',\n      autoRetry: false\n    };\n  }\n\n  async getExistingSession(userId) {\n    const query = `\n      SELECT session_id, current_step, progress, start_time, last_activity, status\n      FROM onboarding_sessions \n      WHERE user_id = $1 AND status = 'active'\n      ORDER BY last_activity DESC \n      LIMIT 1\n    `;\n    \n    const result = await pool.query(query, [userId]);\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n\n    const row = result.rows[0];\n    return {\n      sessionId: row.session_id,\n      userId,\n      currentStep: row.current_step,\n      progress: row.progress || {},\n      startTime: row.start_time,\n      lastActivity: row.last_activity,\n      status: row.status,\n      checkpoints: [],\n      errors: []\n    };\n  }\n\n  async persistSession(session) {\n    const query = `\n      INSERT INTO onboarding_sessions (\n        session_id, user_id, current_step, progress, start_time, last_activity, status\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n      ON CONFLICT (user_id) \n      DO UPDATE SET \n        session_id = EXCLUDED.session_id,\n        current_step = EXCLUDED.current_step,\n        progress = EXCLUDED.progress,\n        last_activity = EXCLUDED.last_activity,\n        status = EXCLUDED.status\n    `;\n    \n    await pool.query(query, [\n      session.sessionId,\n      session.userId,\n      session.currentStep,\n      JSON.stringify(session.progress),\n      session.startTime,\n      session.lastActivity,\n      session.status\n    ]);\n  }\n\n  async persistCheckpoint(userId, checkpoint) {\n    const query = `\n      INSERT INTO onboarding_checkpoints (\n        user_id, step, data, timestamp, transaction_id, status\n      ) VALUES ($1, $2, $3, $4, $5, $6)\n    `;\n    \n    await pool.query(query, [\n      userId,\n      checkpoint.step,\n      JSON.stringify(checkpoint.data),\n      checkpoint.timestamp,\n      checkpoint.transactionId,\n      checkpoint.status\n    ]);\n  }\n\n  async persistFailure(userId, failure) {\n    const query = `\n      INSERT INTO onboarding_failures (\n        user_id, step, error_message, error_stack, timestamp, transaction_id, recovery_attempts\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n    `;\n    \n    await pool.query(query, [\n      userId,\n      failure.step,\n      failure.error,\n      failure.stack,\n      failure.timestamp,\n      failure.transactionId,\n      failure.recoveryAttempts\n    ]);\n  }\n\n  async updateSessionProgress(userId, session) {\n    const query = `\n      UPDATE onboarding_sessions \n      SET current_step = $1, progress = $2, last_activity = $3\n      WHERE user_id = $4\n    `;\n    \n    await pool.query(query, [\n      session.currentStep,\n      JSON.stringify(session.progress),\n      session.lastActivity,\n      userId\n    ]);\n  }\n\n  async archiveSession(userId) {\n    const query = `\n      UPDATE onboarding_sessions \n      SET status = 'archived', archived_at = CURRENT_TIMESTAMP\n      WHERE user_id = $1\n    `;\n    \n    await pool.query(query, [userId]);\n  }\n}\n\n// Singleton instance\nconst onboardingSessionService = new OnboardingSessionService();\n\n// Cleanup expired sessions every 10 minutes\nsetInterval(() => {\n  onboardingSessionService.cleanupExpiredSessions().catch(console.error);\n}, 10 * 60 * 1000);\n\nmodule.exports = onboardingSessionService;\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\passwordResetService.js",
    "messages": [
      {
        "ruleId": "no-dupe-class-members",
        "severity": 2,
        "message": "Duplicate name 'logSecurityEvent'.",
        "line": 569,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "unexpected",
        "endLine": 579,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const crypto = require('crypto');\nconst bcrypt = require('bcryptjs');\nconst { pool } = require('../database/connection');\nconst emailService = require('./emailService');\n\nclass PasswordResetService {\n  constructor() {\n    this.tokenExpiry = 60 * 60 * 1000; // 1 hour in milliseconds\n    this.maxResetAttempts = 5; // Max reset attempts per hour\n    this.lockoutDuration = 60 * 60 * 1000; // 1 hour lockout\n    this.maxFailedLogins = 5; // Max failed login attempts before lockout\n    this.accountLockoutDuration = 15 * 60 * 1000; // 15 minutes account lockout\n    this.progressiveLockoutMultiplier = 2; // Multiplier for progressive lockout\n  }\n\n  /**\n   * Generate secure password reset token\n   * @returns {string} Secure random token\n   */\n  generateResetToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Initiate password reset process\n   * @param {string} email - User email address\n   * @param {string} ipAddress - Client IP address\n   * @param {string} userAgent - Client user agent\n   * @returns {Object} Result object\n   */\n  async initiatePasswordReset(email, ipAddress = null, userAgent = null) {\n    try {\n      // Find user by email\n      const userQuery = 'SELECT id, email, first_name, failed_login_attempts, account_locked_until FROM users WHERE email = $1';\n      const userResult = await pool.query(userQuery, [email.toLowerCase()]);\n\n      if (userResult.rows.length === 0) {\n        // Don't reveal if email exists - return success for security\n        return {\n          success: true,\n          message: 'If an account with this email exists, you will receive a password reset link.',\n          emailSent: false\n        };\n      }\n\n      const user = userResult.rows[0];\n\n      // Check if account is locked\n      if (user.account_locked_until && new Date(user.account_locked_until) > new Date()) {\n        return {\n          success: false,\n          error: 'Account temporarily locked',\n          message: 'Too many failed attempts. Please try again later.',\n          lockedUntil: user.account_locked_until\n        };\n      }\n\n      // Check rate limiting - max 5 reset attempts per hour\n      const recentAttemptsQuery = `\n        SELECT COUNT(*) as attempt_count \n        FROM password_reset_tokens \n        WHERE user_id = $1 AND created_at > $2\n      `;\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      const attemptsResult = await pool.query(recentAttemptsQuery, [user.id, oneHourAgo]);\n\n      if (parseInt(attemptsResult.rows[0].attempt_count) >= this.maxResetAttempts) {\n        return {\n          success: false,\n          error: 'Rate limit exceeded',\n          message: 'Too many password reset attempts. Please try again in an hour.',\n          rateLimited: true\n        };\n      }\n\n      // Generate reset token\n      const resetToken = this.generateResetToken();\n      const expiresAt = new Date(Date.now() + this.tokenExpiry);\n\n      // Store reset token\n      const insertTokenQuery = `\n        INSERT INTO password_reset_tokens (user_id, token, expires_at, ip_address, user_agent)\n        VALUES ($1, $2, $3, $4, $5)\n        RETURNING id\n      `;\n      await pool.query(insertTokenQuery, [user.id, resetToken, expiresAt, ipAddress, userAgent]);\n\n      // Send password reset email\n      await this.sendPasswordResetEmail(user.email, user.first_name, resetToken);\n\n      // Log security event\n      await this.logSecurityEvent(user.id, 'password_reset_requested', 'user', user.id, ipAddress, userAgent, true, {\n        email: user.email,\n        tokenExpiry: expiresAt\n      });\n\n      return {\n        success: true,\n        message: 'Password reset link sent to your email address.',\n        emailSent: true,\n        expiresIn: this.tokenExpiry / 1000 / 60 // minutes\n      };\n\n    } catch (error) {\n      console.error('Password reset initiation error:', error);\n      throw new Error('Failed to initiate password reset');\n    }\n  }\n\n  /**\n   * Verify password reset token\n   * @param {string} token - Reset token\n   * @returns {Object} Verification result\n   */\n  async verifyResetToken(token) {\n    try {\n      const tokenQuery = `\n        SELECT prt.*, u.email, u.first_name \n        FROM password_reset_tokens prt\n        JOIN users u ON prt.user_id = u.id\n        WHERE prt.token = $1 AND prt.used = false AND prt.expires_at > CURRENT_TIMESTAMP\n      `;\n      const tokenResult = await pool.query(tokenQuery, [token]);\n\n      if (tokenResult.rows.length === 0) {\n        return {\n          valid: false,\n          error: 'Invalid or expired token',\n          message: 'This password reset link is invalid or has expired.'\n        };\n      }\n\n      const tokenData = tokenResult.rows[0];\n\n      return {\n        valid: true,\n        userId: tokenData.user_id,\n        email: tokenData.email,\n        firstName: tokenData.first_name,\n        expiresAt: tokenData.expires_at\n      };\n\n    } catch (error) {\n      console.error('Token verification error:', error);\n      throw new Error('Failed to verify reset token');\n    }\n  }\n\n  /**\n   * Reset user password\n   * @param {string} token - Reset token\n   * @param {string} newPassword - New password\n   * @param {string} ipAddress - Client IP address\n   * @param {string} userAgent - Client user agent\n   * @returns {Object} Reset result\n   */\n  async resetPassword(token, newPassword, ipAddress = null, userAgent = null) {\n    try {\n      // Verify token first\n      const tokenVerification = await this.verifyResetToken(token);\n      if (!tokenVerification.valid) {\n        return tokenVerification;\n      }\n\n      // Validate password strength\n      const passwordValidation = this.validatePassword(newPassword);\n      if (!passwordValidation.valid) {\n        return {\n          success: false,\n          error: 'Invalid password',\n          message: passwordValidation.message,\n          requirements: passwordValidation.requirements\n        };\n      }\n\n      // Hash new password\n      const saltRounds = 12;\n      const passwordHash = await bcrypt.hash(newPassword, saltRounds);\n\n      // Begin transaction\n      const client = await pool.connect();\n      try {\n        await client.query('BEGIN');\n\n        // Update user password\n        const updatePasswordQuery = `\n          UPDATE users \n          SET password_hash = $1, \n              last_password_reset = CURRENT_TIMESTAMP,\n              failed_login_attempts = 0,\n              account_locked_until = NULL\n          WHERE id = $2\n        `;\n        await client.query(updatePasswordQuery, [passwordHash, tokenVerification.userId]);\n\n        // Mark token as used\n        const markTokenUsedQuery = `\n          UPDATE password_reset_tokens \n          SET used = true, used_at = CURRENT_TIMESTAMP \n          WHERE token = $1\n        `;\n        await client.query(markTokenUsedQuery, [token]);\n\n        // Invalidate all other reset tokens for this user\n        const invalidateTokensQuery = `\n          UPDATE password_reset_tokens \n          SET used = true, used_at = CURRENT_TIMESTAMP \n          WHERE user_id = $1 AND used = false AND token != $2\n        `;\n        await client.query(invalidateTokensQuery, [tokenVerification.userId, token]);\n\n        await client.query('COMMIT');\n\n        // Log security event\n        await this.logSecurityEvent(tokenVerification.userId, 'password_reset_completed', 'user', tokenVerification.userId, ipAddress, userAgent, true, {\n          email: tokenVerification.email\n        });\n\n        // Send confirmation email\n        await this.sendPasswordResetConfirmationEmail(tokenVerification.email, tokenVerification.firstName);\n\n        return {\n          success: true,\n          message: 'Password reset successfully. You can now log in with your new password.',\n          userId: tokenVerification.userId\n        };\n\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      } finally {\n        client.release();\n      }\n\n    } catch (error) {\n      console.error('Password reset error:', error);\n      \n      // Log failed attempt\n      if (token) {\n        const tokenData = await this.verifyResetToken(token);\n        if (tokenData.valid) {\n          await this.logSecurityEvent(tokenData.userId, 'password_reset_failed', 'user', tokenData.userId, ipAddress, userAgent, false, {\n            error: error.message\n          });\n        }\n      }\n\n      throw new Error('Failed to reset password');\n    }\n  }\n\n  /**\n   * Validate password strength\n   * @param {string} password - Password to validate\n   * @returns {Object} Validation result\n   */\n  validatePassword(password) {\n    const requirements = {\n      minLength: 8,\n      hasUpperCase: /[A-Z]/.test(password),\n      hasLowerCase: /[a-z]/.test(password),\n      hasNumbers: /\\d/.test(password),\n      hasSpecialChars: /[!@#$%^&*(),.?\":{}|<>]/.test(password)\n    };\n\n    const isValid = password.length >= requirements.minLength &&\n                   requirements.hasUpperCase &&\n                   requirements.hasLowerCase &&\n                   requirements.hasNumbers;\n\n    return {\n      valid: isValid,\n      requirements,\n      message: isValid ? 'Password meets requirements' : 'Password must be at least 8 characters long and contain uppercase, lowercase, and numbers'\n    };\n  }\n\n  /**\n   * Send password reset email\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   * @param {string} token - Reset token\n   */\n  async sendPasswordResetEmail(email, firstName, token) {\n    const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${token}`;\n    const expiryMinutes = this.tokenExpiry / 1000 / 60;\n    \n    await emailService.sendEmail({\n      to: email,\n      subject: 'Reset Your Floworx Password',\n      template: 'password-reset',\n      data: {\n        firstName,\n        resetUrl,\n        expiryMinutes\n      }\n    });\n  }\n\n  /**\n   * Send password reset confirmation email\n   * @param {string} email - User email\n   * @param {string} firstName - User first name\n   */\n  async sendPasswordResetConfirmationEmail(email, firstName) {\n    await emailService.sendEmail({\n      to: email,\n      subject: 'Your Floworx Password Has Been Reset',\n      template: 'password-reset-confirmation',\n      data: {\n        firstName,\n        loginUrl: `${process.env.FRONTEND_URL}/login`\n      }\n    });\n  }\n\n  /**\n   * Log security event\n   * @param {string} userId - User ID\n   * @param {string} action - Action performed\n   * @param {string} resourceType - Resource type\n   * @param {string} resourceId - Resource ID\n   * @param {string} ipAddress - IP address\n   * @param {string} userAgent - User agent\n   * @param {boolean} success - Success status\n   * @param {Object} details - Additional details\n   */\n  async logSecurityEvent(userId, action, resourceType, resourceId, ipAddress, userAgent, success, details) {\n    try {\n      const logQuery = `\n        INSERT INTO security_audit_log (user_id, action, resource_type, resource_id, ip_address, user_agent, success, details)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      `;\n      await pool.query(logQuery, [userId, action, resourceType, resourceId, ipAddress, userAgent, success, JSON.stringify(details)]);\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n      // Don't throw - logging failure shouldn't break the main flow\n    }\n  }\n\n  /**\n   * Clean up expired tokens\n   * @returns {number} Number of tokens cleaned up\n   */\n  async cleanupExpiredTokens() {\n    try {\n      const cleanupQuery = 'SELECT cleanup_expired_tokens()';\n      const result = await pool.query(cleanupQuery);\n      return result.rows[0].cleanup_expired_tokens;\n    } catch (error) {\n      console.error('Token cleanup error:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Handle failed login attempt and implement progressive lockout\n   * @param {string} email - User email address\n   * @param {string} ipAddress - Client IP address\n   * @param {string} userAgent - Client user agent\n   * @returns {Object} Result object with lockout information\n   */\n  async handleFailedLogin(email, ipAddress = null, userAgent = null) {\n    try {\n      const client = await pool.connect();\n      try {\n        await client.query('BEGIN');\n\n        // Get current user data\n        const userQuery = `\n          SELECT id, email, failed_login_attempts, account_locked_until, last_failed_login\n          FROM users\n          WHERE email = $1\n        `;\n        const userResult = await client.query(userQuery, [email.toLowerCase()]);\n\n        if (userResult.rows.length === 0) {\n          return { success: true, accountLocked: false }; // Don't reveal if user exists\n        }\n\n        const user = userResult.rows[0];\n        const now = new Date();\n        let failedAttempts = (user.failed_login_attempts || 0) + 1;\n        let lockoutUntil = null;\n\n        // Check if we should reset failed attempts (after successful login or lockout expiry)\n        if (user.account_locked_until && new Date(user.account_locked_until) <= now) {\n          failedAttempts = 1; // Reset to 1 for this new failed attempt\n        }\n\n        // Calculate lockout duration with progressive increase\n        if (failedAttempts >= this.maxFailedLogins) {\n          const lockoutMultiplier = Math.pow(this.progressiveLockoutMultiplier, Math.floor(failedAttempts / this.maxFailedLogins) - 1);\n          const lockoutDuration = this.accountLockoutDuration * lockoutMultiplier;\n          lockoutUntil = new Date(now.getTime() + lockoutDuration);\n        }\n\n        // Update user record\n        const updateQuery = `\n          UPDATE users\n          SET failed_login_attempts = $1,\n              account_locked_until = $2,\n              last_failed_login = $3,\n              updated_at = CURRENT_TIMESTAMP\n          WHERE id = $4\n        `;\n        await client.query(updateQuery, [failedAttempts, lockoutUntil, now, user.id]);\n\n        // Log security event\n        await this.logSecurityEvent(client, user.id, 'failed_login_attempt', 'user', user.id, ipAddress, userAgent, false, {\n          email: user.email,\n          failedAttempts,\n          accountLocked: !!lockoutUntil,\n          lockoutUntil\n        });\n\n        await client.query('COMMIT');\n\n        return {\n          success: true,\n          accountLocked: !!lockoutUntil,\n          failedAttempts,\n          lockoutUntil,\n          remainingAttempts: Math.max(0, this.maxFailedLogins - failedAttempts)\n        };\n\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      } finally {\n        client.release();\n      }\n\n    } catch (error) {\n      console.error('Failed login handling error:', error);\n      throw new Error('Failed to process login attempt');\n    }\n  }\n\n  /**\n   * Check if account is currently locked\n   * @param {string} email - User email address\n   * @returns {Object} Lockout status\n   */\n  async checkAccountLockout(email) {\n    try {\n      const userQuery = `\n        SELECT id, email, failed_login_attempts, account_locked_until\n        FROM users\n        WHERE email = $1\n      `;\n      const userResult = await pool.query(userQuery, [email.toLowerCase()]);\n\n      if (userResult.rows.length === 0) {\n        return { locked: false, exists: false };\n      }\n\n      const user = userResult.rows[0];\n      const now = new Date();\n      const lockedUntil = user.account_locked_until ? new Date(user.account_locked_until) : null;\n\n      if (lockedUntil && lockedUntil > now) {\n        return {\n          locked: true,\n          exists: true,\n          lockedUntil,\n          remainingTime: Math.ceil((lockedUntil - now) / 1000 / 60), // minutes\n          failedAttempts: user.failed_login_attempts\n        };\n      }\n\n      return {\n        locked: false,\n        exists: true,\n        failedAttempts: user.failed_login_attempts || 0\n      };\n\n    } catch (error) {\n      console.error('Account lockout check error:', error);\n      throw new Error('Failed to check account lockout status');\n    }\n  }\n\n  /**\n   * Unlock account (admin function or after successful recovery)\n   * @param {string} userId - User ID\n   * @param {string} reason - Reason for unlock\n   * @param {string} adminId - Admin user ID (if applicable)\n   * @returns {Object} Result object\n   */\n  async unlockAccount(userId, reason = 'manual_unlock', adminId = null) {\n    try {\n      const client = await pool.connect();\n      try {\n        await client.query('BEGIN');\n\n        // Reset failed login attempts and remove lockout\n        const updateQuery = `\n          UPDATE users\n          SET failed_login_attempts = 0,\n              account_locked_until = NULL,\n              updated_at = CURRENT_TIMESTAMP\n          WHERE id = $1\n          RETURNING email\n        `;\n        const result = await client.query(updateQuery, [userId]);\n\n        if (result.rows.length === 0) {\n          throw new Error('User not found');\n        }\n\n        // Log security event\n        await this.logSecurityEvent(client, userId, 'account_unlocked', 'user', userId, null, null, true, {\n          reason,\n          adminId,\n          email: result.rows[0].email\n        });\n\n        await client.query('COMMIT');\n\n        return {\n          success: true,\n          message: 'Account unlocked successfully',\n          email: result.rows[0].email\n        };\n\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      } finally {\n        client.release();\n      }\n\n    } catch (error) {\n      console.error('Account unlock error:', error);\n      throw new Error('Failed to unlock account');\n    }\n  }\n\n  /**\n   * Reset failed login attempts after successful login\n   * @param {string} userId - User ID\n   * @returns {Object} Result object\n   */\n  async resetFailedLoginAttempts(userId) {\n    try {\n      const updateQuery = `\n        UPDATE users\n        SET failed_login_attempts = 0,\n            account_locked_until = NULL,\n            last_successful_login = CURRENT_TIMESTAMP,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n      `;\n      await pool.query(updateQuery, [userId]);\n\n      return { success: true };\n\n    } catch (error) {\n      console.error('Reset failed login attempts error:', error);\n      throw new Error('Failed to reset failed login attempts');\n    }\n  }\n\n  /**\n   * Log security event\n   * @private\n   */\n  async logSecurityEvent(client, userId, action, resourceType, resourceId, ipAddress, userAgent, success, details) {\n    try {\n      const logQuery = `\n        INSERT INTO security_audit_log (user_id, action, resource_type, resource_id, ip_address, user_agent, success, details)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      `;\n      await client.query(logQuery, [userId, action, resourceType, resourceId, ipAddress, userAgent, success, JSON.stringify(details)]);\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  }\n}\n\nmodule.exports = new PasswordResetService();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\services\\transactionService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\test-db.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\tests\\middleware\\errorHandler.test.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'AuthorizationError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "AuthorizationError" },
            "fix": { "range": [270, 292], "text": "" },
            "desc": "Remove unused variable 'AuthorizationError'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'NotFoundError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "NotFoundError" },
            "fix": { "range": [292, 309], "text": "" },
            "desc": "Remove unused variable 'NotFoundError'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ConflictError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ConflictError" },
            "fix": { "range": [309, 326], "text": "" },
            "desc": "Remove unused variable 'ConflictError'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'RateLimitError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "RateLimitError" },
            "fix": { "range": [326, 344], "text": "" },
            "desc": "Remove unused variable 'RateLimitError'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 22,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 22,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 25,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 25,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 30,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 31,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 31,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 34,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 34,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 35,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 35,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 36,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 36,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 37,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 37,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 38,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 41,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 41,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 44,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 44,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 45,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 46,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 46,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 49,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 49,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 52,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 52,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 53,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 53,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 54,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 54,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 57,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 57,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 60,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 60,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 61,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 61,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 65,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 65,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 66,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 66,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 88,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 88,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 93,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 93,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 104,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 104,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 109,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 109,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 119,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 119,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 124,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 124,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 134,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 134,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 142,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 142,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 155,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 155,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 156,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 156,
        "endColumn": 15
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 157,
        "column": 68,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 157,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [4431, 4437], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'req' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 161,
        "column": 56,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "req" },
            "fix": { "range": [4595, 4599], "text": "" },
            "desc": "Remove unused variable 'req'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'res' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 161,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "res" },
            "fix": { "range": [4598, 4603], "text": "" },
            "desc": "Remove unused variable 'res'."
          }
        ]
      },
      {
        "ruleId": "require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 161,
        "column": 66,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 161,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [4588, 4594], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'req' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 165,
        "column": 68,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "req" },
            "fix": { "range": [4751, 4755], "text": "" },
            "desc": "Remove unused variable 'req'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'res' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 165,
        "column": 73,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "res" },
            "fix": { "range": [4754, 4759], "text": "" },
            "desc": "Remove unused variable 'res'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 172,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 172,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 177,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 177,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 183,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 183,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 188,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 188,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 189,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 189,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 192,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 192,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 197,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 197,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 201,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 201,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 202,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 202,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 207,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 207,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 212,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 212,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 223,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 223,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 226,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 226,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 227,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 227,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'afterEach' is not defined.",
        "line": 239,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 239,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 243,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 243,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 249,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 249,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 250,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 250,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 256,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 256,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 259,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 259,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 268,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 268,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 282,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 282,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 283,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 283,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 284,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 284,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 66,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Error Handler Middleware Tests\n * Tests centralized error handling and security features\n */\n\nconst request = require('supertest');\nconst express = require('express');\nconst {\n  errorHandler,\n  notFoundHandler,\n  AppError,\n  ValidationError,\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError,\n  ConflictError,\n  RateLimitError,\n  DatabaseError,\n  asyncHandler\n} = require('../../middleware/errorHandler');\n\ndescribe('Error Handler Middleware', () => {\n  let app;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n  });\n\n  describe('Custom Error Classes', () => {\n    test('AppError should create error with correct properties', () => {\n      const error = new AppError('Test message', 400, 'TEST_ERROR', { detail: 'test' });\n      \n      expect(error.message).toBe('Test message');\n      expect(error.statusCode).toBe(400);\n      expect(error.errorType).toBe('TEST_ERROR');\n      expect(error.details).toEqual({ detail: 'test' });\n      expect(error.isOperational).toBe(true);\n    });\n\n    test('ValidationError should have correct defaults', () => {\n      const error = new ValidationError('Validation failed');\n      \n      expect(error.statusCode).toBe(400);\n      expect(error.errorType).toBe('VALIDATION_ERROR');\n      expect(error.isOperational).toBe(true);\n    });\n\n    test('AuthenticationError should have correct defaults', () => {\n      const error = new AuthenticationError();\n      \n      expect(error.statusCode).toBe(401);\n      expect(error.errorType).toBe('AUTHENTICATION_ERROR');\n      expect(error.message).toBe('Authentication required');\n    });\n\n    test('DatabaseError should handle PostgreSQL error codes', () => {\n      const error = new DatabaseError('Database error');\n      \n      expect(error.statusCode).toBe(500);\n      expect(error.errorType).toBe('DATABASE_ERROR');\n    });\n  });\n\n  describe('Error Handler Response Format', () => {\n    beforeEach(() => {\n      app.get('/test-validation-error', (req, res, next) => {\n        next(new ValidationError('Invalid input', [{ field: 'email', message: 'Invalid email' }]));\n      });\n\n      app.get('/test-auth-error', (req, res, next) => {\n        next(new AuthenticationError('Token expired'));\n      });\n\n      app.get('/test-database-error', (req, res, next) => {\n        const dbError = new Error('Connection failed');\n        dbError.code = '08006'; // PostgreSQL connection failure\n        next(dbError);\n      });\n\n      app.get('/test-generic-error', (req, res, next) => {\n        next(new Error('Generic error'));\n      });\n\n      app.use(errorHandler);\n    });\n\n    test('should format validation errors correctly', async () => {\n      const response = await request(app)\n        .get('/test-validation-error')\n        .expect(400);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          type: 'VALIDATION_ERROR',\n          message: 'Invalid input',\n          code: 400,\n          details: [{ field: 'email', message: 'Invalid email' }]\n        }\n      });\n    });\n\n    test('should format authentication errors correctly', async () => {\n      const response = await request(app)\n        .get('/test-auth-error')\n        .expect(401);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          type: 'AUTHENTICATION_ERROR',\n          message: 'Token expired',\n          code: 401\n        }\n      });\n    });\n\n    test('should convert database errors to safe messages', async () => {\n      const response = await request(app)\n        .get('/test-database-error')\n        .expect(500);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          type: 'DATABASE_ERROR',\n          message: 'Database connection failed',\n          code: 500\n        }\n      });\n    });\n\n    test('should handle generic errors safely in production', async () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      const response = await request(app)\n        .get('/test-generic-error')\n        .expect(500);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          type: 'INTERNAL_ERROR',\n          message: 'Internal server error',\n          code: 500\n        }\n      });\n\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n\n  describe('Async Handler Wrapper', () => {\n    beforeEach(() => {\n      app.get('/test-async-success', asyncHandler(async (req, res) => {\n        res.json({ success: true, message: 'Async operation completed' });\n      }));\n\n      app.get('/test-async-error', asyncHandler(async (req, res) => {\n        throw new ValidationError('Async validation failed');\n      }));\n\n      app.get('/test-async-promise-rejection', asyncHandler(async (req, res) => {\n        await Promise.reject(new Error('Promise rejected'));\n      }));\n\n      app.use(errorHandler);\n    });\n\n    test('should handle successful async operations', async () => {\n      const response = await request(app)\n        .get('/test-async-success')\n        .expect(200);\n\n      expect(response.body).toEqual({\n        success: true,\n        message: 'Async operation completed'\n      });\n    });\n\n    test('should catch async errors and forward to error handler', async () => {\n      const response = await request(app)\n        .get('/test-async-error')\n        .expect(400);\n\n      expect(response.body.error.type).toBe('VALIDATION_ERROR');\n      expect(response.body.error.message).toBe('Async validation failed');\n    });\n\n    test('should catch promise rejections', async () => {\n      const response = await request(app)\n        .get('/test-async-promise-rejection')\n        .expect(500);\n\n      expect(response.body.error.type).toBe('INTERNAL_ERROR');\n    });\n  });\n\n  describe('Not Found Handler', () => {\n    beforeEach(() => {\n      app.use(notFoundHandler);\n      app.use(errorHandler);\n    });\n\n    test('should handle 404 errors with correct format', async () => {\n      const response = await request(app)\n        .get('/non-existent-route')\n        .expect(404);\n\n      expect(response.body).toEqual({\n        success: false,\n        error: {\n          type: 'NOT_FOUND_ERROR',\n          message: 'Route /non-existent-route not found',\n          code: 404\n        }\n      });\n    });\n  });\n\n  describe('Security Features', () => {\n    let consoleSpy;\n\n    beforeEach(() => {\n      consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      \n      app.get('/test-security-logging', (req, res, next) => {\n        const error = new AuthenticationError('Invalid token');\n        req.user = { id: 'test-user-123' };\n        req.ip = '192.168.1.1';\n        next(error);\n      });\n\n      app.use(errorHandler);\n    });\n\n    afterEach(() => {\n      consoleSpy.mockRestore();\n    });\n\n    test('should log errors with security context', async () => {\n      await request(app)\n        .get('/test-security-logging')\n        .set('User-Agent', 'Test-Agent/1.0')\n        .expect(401);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Error:')\n      );\n\n      const logCall = consoleSpy.mock.calls[0][0];\n      const logData = JSON.parse(logCall.replace('Error: ', ''));\n\n      expect(logData).toMatchObject({\n        method: 'GET',\n        url: '/test-security-logging',\n        ip: expect.any(String),\n        userAgent: 'Test-Agent/1.0',\n        userId: 'test-user-123',\n        errorType: 'AUTHENTICATION_ERROR',\n        statusCode: 401,\n        message: 'Invalid token'\n      });\n    });\n\n    test('should not expose sensitive information in production', async () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      app.get('/test-sensitive-error', (req, res, next) => {\n        const error = new Error('Database password is: secret123');\n        error.stack = 'Error: Database password is: secret123\\n    at /app/database.js:42:15';\n        next(error);\n      });\n\n      const response = await request(app)\n        .get('/test-sensitive-error')\n        .expect(500);\n\n      expect(response.body.error.message).toBe('Internal server error');\n      expect(response.body.error.stack).toBeUndefined();\n      expect(response.body.error.details).toBeUndefined();\n\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\tests\\middleware\\validation.test.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'validateLoginSecure' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "validateLoginSecure" },
            "fix": { "range": [192, 215], "text": "" },
            "desc": "Remove unused variable 'validateLoginSecure'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 18,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 21,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 21,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 26,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 26,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 27,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 27,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 34,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 34,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 48,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 48,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 49,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 49,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 53,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 53,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 69,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 69,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 70,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 70,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 71,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 71,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 75,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 75,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 88,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 88,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 89,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 89,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 90,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 90,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 98,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 98,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 106,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 106,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 107,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 107,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 108,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 108,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 116,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 116,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 117,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 117,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 124,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 124,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 138,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 138,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 142,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 142,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 158,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 158,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 159,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 159,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 160,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 160,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 169,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 169,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 170,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 170,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 177,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 177,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 191,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 191,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 192,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 192,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 195,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 195,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 209,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 209,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 210,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 210,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 213,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 213,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 236,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 236,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 237,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 237,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 238,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 238,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 239,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 239,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 241,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 241,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 246,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 246,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 252,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 252,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 253,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 253,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 260,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 260,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 272,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 272,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 273,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 273,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 277,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 277,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 290,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 290,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 291,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 291,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 292,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 292,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 293,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 293,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 302,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 302,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 303,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 303,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 310,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 310,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 319,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 319,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 320,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 320,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 324,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 324,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 333,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 333,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 334,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 334,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 335,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 335,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 336,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 336,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 345,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 345,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeEach' is not defined.",
        "line": 346,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 346,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 353,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 353,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 368,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 368,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 369,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 369,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 68,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Validation Middleware Tests\n * Tests input validation and security features\n */\n\nconst request = require('supertest');\nconst express = require('express');\nconst {\n  validateRegistration,\n  validateLoginSecure,\n  validateEmailSecure,\n  validatePasswordSecure,\n  validateUUID,\n  validateBusinessType\n} = require('../../middleware/validation');\nconst { errorHandler } = require('../../middleware/errorHandler');\n\ndescribe('Validation Middleware', () => {\n  let app;\n\n  beforeEach(() => {\n    app = express();\n    app.use(express.json());\n  });\n\n  describe('Email Validation', () => {\n    beforeEach(() => {\n      app.post('/test-email', validateEmailSecure(), (req, res) => {\n        res.json({ success: true, email: req.body.email });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should accept valid email addresses', async () => {\n      const validEmails = [\n        'test@example.com',\n        'user.name@domain.co.uk',\n        'test+tag@gmail.com',\n        'user123@test-domain.com'\n      ];\n\n      for (const email of validEmails) {\n        const response = await request(app)\n          .post('/test-email')\n          .send({ email })\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.email).toBe(email.toLowerCase());\n      }\n    });\n\n    test('should reject invalid email formats', async () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@domain.com',\n        'user@',\n        'user..name@domain.com',\n        'user@domain',\n        ''\n      ];\n\n      for (const email of invalidEmails) {\n        const response = await request(app)\n          .post('/test-email')\n          .send({ email })\n          .expect(400);\n\n        expect(response.body.success).toBe(false);\n        expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        expect(response.body.error.message).toBe('Validation failed');\n      }\n    });\n\n    test('should reject disposable email domains', async () => {\n      const disposableEmails = [\n        'test@tempmail.org',\n        'user@10minutemail.com',\n        'fake@guerrillamail.com'\n      ];\n\n      for (const email of disposableEmails) {\n        const response = await request(app)\n          .post('/test-email')\n          .send({ email })\n          .expect(400);\n\n        expect(response.body.error.details).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              message: 'Disposable email addresses are not allowed'\n            })\n          ])\n        );\n      }\n    });\n\n    test('should reject emails that are too long', async () => {\n      const longEmail = 'a'.repeat(250) + '@example.com';\n\n      const response = await request(app)\n        .post('/test-email')\n        .send({ email: longEmail })\n        .expect(400);\n\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            message: 'Email must be less than 254 characters'\n          })\n        ])\n      );\n    });\n  });\n\n  describe('Password Validation', () => {\n    beforeEach(() => {\n      app.post('/test-password', validatePasswordSecure(), (req, res) => {\n        res.json({ success: true });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should accept strong passwords', async () => {\n      const strongPasswords = [\n        'TestPass123!',\n        'MySecure@Password1',\n        'Complex#Pass99',\n        'Strong$Password2024'\n      ];\n\n      for (const password of strongPasswords) {\n        const response = await request(app)\n          .post('/test-password')\n          .send({ password })\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n      }\n    });\n\n    test('should reject weak passwords', async () => {\n      const weakPasswords = [\n        { password: '123', expectedError: 'Password must be between 8 and 128 characters' },\n        { password: 'password', expectedError: 'Password must contain at least one uppercase letter' },\n        { password: 'PASSWORD', expectedError: 'Password must contain at least one lowercase letter' },\n        { password: 'Password', expectedError: 'Password must contain at least one number' },\n        { password: 'Password123', expectedError: 'Password must contain at least one special character' },\n        { password: 'a'.repeat(129), expectedError: 'Password must be between 8 and 128 characters' }\n      ];\n\n      for (const { password, expectedError } of weakPasswords) {\n        const response = await request(app)\n          .post('/test-password')\n          .send({ password })\n          .expect(400);\n\n        expect(response.body.error.details).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              message: expectedError\n            })\n          ])\n        );\n      }\n    });\n  });\n\n  describe('Registration Validation', () => {\n    beforeEach(() => {\n      app.post('/test-registration', validateRegistration, (req, res) => {\n        res.json({ success: true, user: req.body });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should accept valid registration data', async () => {\n      const validData = {\n        email: 'test@example.com',\n        password: 'TestPass123!',\n        firstName: 'John',\n        lastName: 'Doe',\n        companyName: 'Test Company Inc.'\n      };\n\n      const response = await request(app)\n        .post('/test-registration')\n        .send(validData)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.user.email).toBe('test@example.com');\n    });\n\n    test('should reject invalid registration data', async () => {\n      const invalidData = {\n        email: 'invalid-email',\n        password: '123',\n        firstName: '',\n        lastName: 'Doe123',\n        companyName: 'A'\n      };\n\n      const response = await request(app)\n        .post('/test-registration')\n        .send(invalidData)\n        .expect(400);\n\n      expect(response.body.error.type).toBe('VALIDATION_ERROR');\n      expect(response.body.error.details).toHaveLength(5); // All fields should have errors\n    });\n\n    test('should sanitize and validate names', async () => {\n      const testCases = [\n        { name: 'John123', field: 'firstName', shouldFail: true },\n        { name: 'John@Doe', field: 'lastName', shouldFail: true },\n        { name: \"O'Connor\", field: 'firstName', shouldFail: false },\n        { name: 'Mary-Jane', field: 'lastName', shouldFail: false },\n        { name: 'Dr. Smith', field: 'firstName', shouldFail: false }\n      ];\n\n      for (const { name, field, shouldFail } of testCases) {\n        const data = {\n          email: 'test@example.com',\n          password: 'TestPass123!',\n          firstName: field === 'firstName' ? name : 'John',\n          lastName: field === 'lastName' ? name : 'Doe',\n          companyName: 'Test Company'\n        };\n\n        const response = await request(app)\n          .post('/test-registration')\n          .send(data);\n\n        if (shouldFail) {\n          expect(response.status).toBe(400);\n          expect(response.body.error.details).toEqual(\n            expect.arrayContaining([\n              expect.objectContaining({\n                field: field,\n                message: expect.stringContaining('can only contain letters')\n              })\n            ])\n          );\n        } else {\n          expect(response.status).toBe(200);\n        }\n      }\n    });\n  });\n\n  describe('UUID Validation', () => {\n    beforeEach(() => {\n      app.get('/test-uuid/:id', validateUUID('id'), (req, res) => {\n        res.json({ success: true, id: req.params.id });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should accept valid UUIDs', async () => {\n      const validUUIDs = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        'f47ac10b-58cc-4372-a567-0e02b2c3d479',\n        '6ba7b810-9dad-11d1-80b4-00c04fd430c8'\n      ];\n\n      for (const uuid of validUUIDs) {\n        const response = await request(app)\n          .get(`/test-uuid/${uuid}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.id).toBe(uuid);\n      }\n    });\n\n    test('should reject invalid UUIDs', async () => {\n      const invalidUUIDs = [\n        'not-a-uuid',\n        '123',\n        '123e4567-e89b-12d3-a456',\n        '123e4567-e89b-12d3-a456-426614174000-extra'\n      ];\n\n      for (const uuid of invalidUUIDs) {\n        const response = await request(app)\n          .get(`/test-uuid/${uuid}`)\n          .expect(400);\n\n        expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        expect(response.body.error.details).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              message: 'id must be a valid UUID'\n            })\n          ])\n        );\n      }\n    });\n  });\n\n  describe('Business Type Validation', () => {\n    beforeEach(() => {\n      app.post('/test-business-type', validateBusinessType(), (req, res) => {\n        res.json({ success: true, businessTypeId: req.body.businessTypeId });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should accept valid business type IDs', async () => {\n      const validIds = [1, 5, 100, 999];\n\n      for (const id of validIds) {\n        const response = await request(app)\n          .post('/test-business-type')\n          .send({ businessTypeId: id })\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.businessTypeId).toBe(id);\n      }\n    });\n\n    test('should reject invalid business type IDs', async () => {\n      const invalidIds = [0, -1, 'string', null, undefined, 1.5];\n\n      for (const id of invalidIds) {\n        const response = await request(app)\n          .post('/test-business-type')\n          .send({ businessTypeId: id })\n          .expect(400);\n\n        expect(response.body.error.type).toBe('VALIDATION_ERROR');\n        expect(response.body.error.details).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              message: 'Business type ID must be a positive integer'\n            })\n          ])\n        );\n      }\n    });\n  });\n\n  describe('XSS Protection', () => {\n    beforeEach(() => {\n      app.post('/test-xss', validateRegistration, (req, res) => {\n        res.json({ success: true, data: req.body });\n      });\n      app.use(errorHandler);\n    });\n\n    test('should sanitize XSS attempts in input', async () => {\n      const maliciousData = {\n        email: 'test@example.com',\n        password: 'TestPass123!',\n        firstName: '<script>alert(\"xss\")</script>John',\n        lastName: 'Doe<img src=x onerror=alert(1)>',\n        companyName: 'Test Company'\n      };\n\n      const response = await request(app)\n        .post('/test-xss')\n        .send(maliciousData)\n        .expect(200);\n\n      // XSS should be sanitized\n      expect(response.body.data.firstName).not.toContain('<script>');\n      expect(response.body.data.lastName).not.toContain('<img');\n    });\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\tests\\routes\\auth.test.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 15,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 15,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeAll' is not defined.",
        "line": 18,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 18,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 34,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 34,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 35,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 35,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 44,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 44,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 45,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 46,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 46,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 52,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 52,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 55,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 55,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 58,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 58,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 59,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 59,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 66,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 66,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 77,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 77,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 83,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 83,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 84,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 84,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 93,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 93,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 104,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 104,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 105,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 105,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 106,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 106,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 108,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 108,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 114,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 114,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 125,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 125,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 126,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 126,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 127,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 127,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 135,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 135,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 147,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 147,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 148,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 148,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 149,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 149,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 151,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 151,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 153,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 153,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 155,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 155,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 161,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 161,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 172,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 172,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 173,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 173,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 176,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 176,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 190,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 190,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 191,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 191,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 193,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 193,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 194,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 194,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 199,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 199,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 200,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 200,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 211,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 211,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 217,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 217,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 218,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 218,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 227,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 227,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 238,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 238,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 239,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 239,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 240,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 240,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 248,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 248,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 260,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 260,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 264,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 264,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 269,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 269,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 273,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 273,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 284,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 284,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 288,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 288,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 289,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 289,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 296,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 296,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 299,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 299,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 300,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 300,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 306,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 306,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 320,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 320,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 321,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 321,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 324,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 324,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 329,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 329,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 333,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 333,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 340,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 340,
        "endColumn": 11
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 341,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 341,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 347,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 347,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 348,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 348,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 349,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 349,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'test' is not defined.",
        "line": 352,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 352,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 359,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 359,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 360,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 360,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 73,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Authentication Routes Integration Tests\n * Tests complete auth flow with error handling and validation\n */\n\nconst request = require('supertest');\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\n\n// Import the actual server components\nconst authRoutes = require('../../routes/auth');\nconst { errorHandler, notFoundHandler } = require('../../middleware/errorHandler');\n\ndescribe('Authentication Routes Integration', () => {\n  let app;\n\n  beforeAll(() => {\n    // Create test app with same middleware as main server\n    app = express();\n    app.use(helmet());\n    app.use(cors());\n    app.use(express.json({ limit: '10mb' }));\n    app.use(express.urlencoded({ extended: true }));\n    \n    // Use auth routes\n    app.use('/api/auth', authRoutes);\n    \n    // Use error handlers\n    app.use(notFoundHandler);\n    app.use(errorHandler);\n  });\n\n  describe('POST /api/auth/register', () => {\n    test('should register user with valid data', async () => {\n      const userData = global.testUtils.createTestUser();\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData);\n\n      // May succeed or fail depending on database availability\n      if (response.status === 201) {\n        expect(response.body).toMatchObject({\n          message: expect.stringContaining('registered successfully'),\n          user: expect.objectContaining({\n            email: userData.email.toLowerCase(),\n            firstName: userData.firstName,\n            lastName: userData.lastName\n          })\n        });\n        expect(response.body.user.password).toBeUndefined();\n      } else if (response.status === 500) {\n        // Database not available - check error format\n        expect(response.body).toMatchObject({\n          success: false,\n          error: {\n            type: expect.any(String),\n            message: expect.any(String),\n            code: 500\n          }\n        });\n      }\n    });\n\n    test('should reject registration with invalid email', async () => {\n      const invalidData = {\n        ...global.testUtils.createTestUser(),\n        email: 'invalid-email'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(invalidData)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          type: 'VALIDATION_ERROR',\n          message: 'Validation failed',\n          code: 400,\n          details: expect.arrayContaining([\n            expect.objectContaining({\n              field: 'email',\n              message: 'Must be a valid email address'\n            })\n          ])\n        }\n      });\n    });\n\n    test('should reject registration with weak password', async () => {\n      const weakPasswordData = {\n        ...global.testUtils.createTestUser(),\n        password: '123'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(weakPasswordData)\n        .expect(400);\n\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'password',\n            message: expect.stringContaining('Password must be between 8 and 128 characters')\n          })\n        ])\n      );\n    });\n\n    test('should reject registration with disposable email', async () => {\n      const disposableEmailData = {\n        ...global.testUtils.createTestUser(),\n        email: 'test@tempmail.org'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(disposableEmailData)\n        .expect(400);\n\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'email',\n            message: 'Disposable email addresses are not allowed'\n          })\n        ])\n      );\n    });\n\n    test('should reject registration with invalid names', async () => {\n      const invalidNameData = {\n        ...global.testUtils.createTestUser(),\n        firstName: 'John123',\n        lastName: 'Doe@Invalid'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(invalidNameData)\n        .expect(400);\n\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'firstName',\n            message: expect.stringContaining('can only contain letters')\n          }),\n          expect.objectContaining({\n            field: 'lastName',\n            message: expect.stringContaining('can only contain letters')\n          })\n        ])\n      );\n    });\n\n    test('should handle missing required fields', async () => {\n      const incompleteData = {\n        email: 'test@example.com'\n        // Missing password, firstName, lastName, companyName\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(incompleteData)\n        .expect(400);\n\n      expect(response.body.error.type).toBe('VALIDATION_ERROR');\n      expect(response.body.error.details.length).toBeGreaterThan(1);\n    });\n\n    test('should sanitize XSS attempts in registration', async () => {\n      const xssData = {\n        ...global.testUtils.createTestUser(),\n        firstName: '<script>alert(\"xss\")</script>John',\n        lastName: 'Doe<img src=x onerror=alert(1)>',\n        companyName: 'Company<script>alert(\"hack\")</script>'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(xssData);\n\n      // Should either succeed with sanitized data or fail validation\n      if (response.status === 201) {\n        expect(response.body.user.firstName).not.toContain('<script>');\n        expect(response.body.user.lastName).not.toContain('<img');\n      } else {\n        expect(response.status).toBe(400);\n        expect(response.body.error.type).toBe('VALIDATION_ERROR');\n      }\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    test('should reject login with invalid email format', async () => {\n      const invalidLoginData = {\n        email: 'invalid-email',\n        password: 'TestPass123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(invalidLoginData)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          type: 'VALIDATION_ERROR',\n          message: 'Validation failed',\n          code: 400,\n          details: expect.arrayContaining([\n            expect.objectContaining({\n              field: 'email',\n              message: 'Must be a valid email address'\n            })\n          ])\n        }\n      });\n    });\n\n    test('should reject login with empty password', async () => {\n      const emptyPasswordData = {\n        email: 'test@example.com',\n        password: ''\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(emptyPasswordData)\n        .expect(400);\n\n      expect(response.body.error.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'password',\n            message: 'Password is required'\n          })\n        ])\n      );\n    });\n\n    test('should handle non-existent user gracefully', async () => {\n      const nonExistentUserData = {\n        email: 'nonexistent@example.com',\n        password: 'TestPass123!'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(nonExistentUserData);\n\n      // Should either return 401 (user not found) or 500 (database error)\n      if (response.status === 401) {\n        expect(response.body).toMatchObject({\n          success: false,\n          error: {\n            type: 'AUTHENTICATION_ERROR',\n            message: expect.stringContaining('incorrect'),\n            code: 401\n          }\n        });\n      } else if (response.status === 500) {\n        expect(response.body.error.type).toBe('DATABASE_ERROR');\n      }\n    });\n\n    test('should reject login with SQL injection attempts', async () => {\n      const sqlInjectionData = {\n        email: \"admin@example.com'; DROP TABLE users; --\",\n        password: \"' OR '1'='1\"\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(sqlInjectionData)\n        .expect(400);\n\n      expect(response.body.error.type).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Error Handling Integration', () => {\n    test('should handle malformed JSON gracefully', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .set('Content-Type', 'application/json')\n        .send('{\"invalid\": json}')\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          type: expect.any(String),\n          message: expect.any(String),\n          code: 400\n        }\n      });\n    });\n\n    test('should handle oversized payloads', async () => {\n      const oversizedData = {\n        email: 'test@example.com',\n        password: 'TestPass123!',\n        firstName: 'A'.repeat(10000), // Very long string\n        lastName: 'Doe',\n        companyName: 'Test Company'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(oversizedData);\n\n      // Should either reject due to validation or payload size\n      expect([400, 413]).toContain(response.status);\n      expect(response.body.success).toBe(false);\n    });\n\n    test('should return 404 for non-existent routes', async () => {\n      const response = await request(app)\n        .get('/api/auth/non-existent-route')\n        .expect(404);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          type: 'NOT_FOUND_ERROR',\n          message: expect.stringContaining('not found'),\n          code: 404\n        }\n      });\n    });\n  });\n\n  describe('Security Headers and CORS', () => {\n    test('should include security headers', async () => {\n      const response = await request(app)\n        .get('/api/auth/non-existent')\n        .expect(404);\n\n      // Check for security headers added by helmet\n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n      expect(response.headers['x-frame-options']).toBe('DENY');\n      expect(response.headers['x-xss-protection']).toBe('0');\n    });\n\n    test('should handle CORS preflight requests', async () => {\n      const response = await request(app)\n        .options('/api/auth/register')\n        .set('Origin', 'http://localhost:3000')\n        .set('Access-Control-Request-Method', 'POST')\n        .set('Access-Control-Request-Headers', 'Content-Type');\n\n      expect(response.status).toBe(204);\n      expect(response.headers['access-control-allow-origin']).toBeDefined();\n    });\n  });\n});\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\tests\\setup.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'beforeAll' is not defined.",
        "line": 26,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 26,
        "endColumn": 10
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 31,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'afterAll' is not defined.",
        "line": 38,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Setup Configuration for FloWorx Backend\n * Configures test environment and database connections\n */\n\nconst { initialize: initializeDatabase } = require('../database/unified-connection');\n\n// Set test environment\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';\nprocess.env.ENCRYPTION_KEY = 'test-encryption-key-32-chars-long';\n\n// Test database configuration (use separate test DB)\nprocess.env.DATABASE_URL = process.env.TEST_DATABASE_URL || 'postgresql://localhost:5432/floworx_test';\n\n// Security configuration for testing (using production values)\nprocess.env.ACCOUNT_RECOVERY_TOKEN_EXPIRY = '86400000'; // 24 hours\nprocess.env.MAX_FAILED_LOGIN_ATTEMPTS = '5';\nprocess.env.ACCOUNT_LOCKOUT_DURATION = '900000'; // 15 minutes\nprocess.env.PROGRESSIVE_LOCKOUT_MULTIPLIER = '2';\n\n// Disable rate limiting in tests\nprocess.env.DISABLE_RATE_LIMITING = 'true';\n\n// Global test setup\nbeforeAll(async () => {\n  // Initialize database connection for tests\n  try {\n    await initializeDatabase();\n    console.log('✅ Test database initialized');\n  } catch (error) {\n    console.warn('⚠️ Test database not available - some tests may fail');\n    console.warn('Configure TEST_DATABASE_URL environment variable for full testing');\n  }\n});\n\n// Global test teardown\nafterAll(async () => {\n  // Close database connections\n  const { databaseManager } = require('../database/unified-connection');\n  if (databaseManager && databaseManager.pool) {\n    await databaseManager.pool.end();\n    console.log('✅ Test database connections closed');\n  }\n});\n\n// Global test utilities\nglobal.testUtils = {\n  // Create test user data\n  createTestUser: () => ({\n    email: `test-${Date.now()}@example.com`,\n    password: 'TestPass123!',\n    firstName: 'Test',\n    lastName: 'User',\n    companyName: 'Test Company'\n  }),\n\n  // Create invalid user data for validation testing\n  createInvalidUser: () => ({\n    email: 'invalid-email',\n    password: '123', // Too short\n    firstName: '', // Empty\n    lastName: 'User123', // Contains numbers\n    companyName: 'A' // Too short\n  }),\n\n  // Generate JWT token for testing\n  generateTestToken: (userId = 'test-user-id') => {\n    const jwt = require('jsonwebtoken');\n    return jwt.sign(\n      { id: userId, email: 'test@example.com' },\n      process.env.JWT_SECRET,\n      { expiresIn: '1h' }\n    );\n  },\n\n  // Common test headers\n  getAuthHeaders: (token) => ({\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }),\n\n  // Validation test cases\n  validationTestCases: {\n    email: [\n      { value: '', expected: 'email is required' },\n      { value: 'invalid', expected: 'Must be a valid email address' },\n      { value: 'test@tempmail.org', expected: 'Disposable email addresses are not allowed' },\n      { value: 'a'.repeat(250) + '@example.com', expected: 'Email must be less than 254 characters' }\n    ],\n    password: [\n      { value: '', expected: 'Password is required' },\n      { value: '123', expected: 'Password must be between 8 and 128 characters' },\n      { value: 'password', expected: 'Password must contain at least one uppercase letter' },\n      { value: 'PASSWORD', expected: 'Password must contain at least one lowercase letter' },\n      { value: 'Password', expected: 'Password must contain at least one number' },\n      { value: 'Password123', expected: 'Password must contain at least one special character' }\n    ],\n    name: [\n      { value: '', expected: 'must be between 1 and 100 characters' },\n      { value: 'A'.repeat(101), expected: 'must be between 1 and 100 characters' },\n      { value: 'Test123', expected: 'can only contain letters, spaces, hyphens, apostrophes, and periods' },\n      { value: 'Test@Name', expected: 'can only contain letters, spaces, hyphens, apostrophes, and periods' }\n    ]\n  }\n};\n\n// Jest configuration\nmodule.exports = {\n  testEnvironment: 'node',\n  setupFilesAfterEnv: [__filename],\n  testTimeout: 10000,\n  collectCoverageFrom: [\n    'routes/**/*.js',\n    'middleware/**/*.js',\n    'services/**/*.js',\n    'utils/**/*.js',\n    '!**/*.test.js',\n    '!**/node_modules/**'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 70,\n      functions: 70,\n      lines: 70,\n      statements: 70\n    }\n  }\n};\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\utils\\encryption.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  },
  {
    "filePath": "C:\\FloworxInvite\\backend\\utils\\security.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "indent",
        "replacedBy": ["@stylistic/indent"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        }
      },
      {
        "ruleId": "quotes",
        "replacedBy": ["@stylistic/quotes"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        }
      },
      {
        "ruleId": "semi",
        "replacedBy": ["@stylistic/semi"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        }
      },
      {
        "ruleId": "comma-dangle",
        "replacedBy": ["@stylistic/comma-dangle"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        }
      },
      {
        "ruleId": "object-curly-spacing",
        "replacedBy": ["@stylistic/object-curly-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "array-bracket-spacing",
        "replacedBy": ["@stylistic/array-bracket-spacing"],
        "info": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        }
      },
      {
        "ruleId": "no-return-await",
        "replacedBy": [],
        "info": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        }
      }
    ]
  }
]
