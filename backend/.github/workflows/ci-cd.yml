name: FloWorx Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  NODE_VERSION: "18.x"
  POSTGRES_VERSION: "15"

jobs:
  # Code Quality & Security Checks
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create reports directory
        working-directory: ./backend
        run: mkdir -p reports

      - name: Run ESLint
        working-directory: ./backend
        run: |
          npm run lint
          npm run lint:report || true

      - name: Run Prettier check
        working-directory: ./backend
        run: npm run format:check

      - name: Run security audit
        working-directory: ./backend
        run: |
          npm run security:audit
          npm run security:audit:report || true

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: backend/reports/eslint-report.html
          retention-days: 30

      - name: Upload security audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: backend/reports/npm-audit.json
          retention-days: 30

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: floworx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          ENCRYPTION_KEY: test-encryption-key-32-chars-long
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          directory: ./backend/coverage/
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Security Scanning
  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: floworx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Start server for integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          PORT: 5001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/floworx_test
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          ENCRYPTION_KEY: test-encryption-key-32-chars-long
        run: |
          npm start &
          sleep 10

      - name: Run integration tests
        working-directory: ./backend
        env:
          TEST_BASE_URL: http://localhost:5001
        run: node scripts/test-deployment.js

  # Build Verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Verify build
        working-directory: ./backend
        run: npm run build:check

  # Deployment Check (runs on main branch only)
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality-check, test, security-scan, integration-test, build-check]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run deployment checks
        working-directory: ./backend
        run: npm run deploy:check

      - name: Notify deployment readiness
        if: success()
        run: |
          echo "âœ… Backend is ready for deployment!"
          echo "All quality checks, tests, and security scans passed."
