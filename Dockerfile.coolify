# ---- Frontend build stage ----
FROM node:20-alpine AS frontend-builder
WORKDIR /app/frontend

COPY frontend/package*.json ./
# Install ALL dependencies for build (dev included)
RUN npm ci

COPY frontend/ ./
# Build the React application with memory optimization
RUN NODE_OPTIONS="--max-old-space-size=2048" npm run build

# Verify build was created
RUN ls -la build/ && echo "✅ Frontend build created successfully"


# ---- Production stage ----
FROM node:20-alpine AS production
WORKDIR /app

# Set explicit PORT environment variable for Coolify
ENV PORT=5001
ENV NODE_ENV=production

# Cache busting - force rebuild with timestamp (needed to force Coolify to rebuild sometimes)
ARG CACHEBUST=1
ARG BUILD_DATE
RUN echo "Build timestamp: $(date)" > /tmp/buildtime && \
    echo "Build date arg: ${BUILD_DATE}" >> /tmp/buildtime

# Install dependencies needed as root
RUN apk add --no-cache dumb-init

# Create non-root user (create BEFORE copying app files, as root)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S floworx -u 1001

# Copy all application files as root first (before changing ownership)
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY --from=frontend-builder /app/frontend/build ./frontend/build
COPY backend/ ./backend/
COPY shared/ ./shared/
COPY database/ ./database/
COPY start.sh ./start.sh

# Verify frontend build was copied correctly
RUN ls -la ./frontend/build/ && echo "✅ Frontend build copied to production stage"

# Install all dependencies as root (npm ci does not care about user, but some global bins might)
RUN npm ci --only=production && npm cache clean --force
RUN cd backend && \
    npm pkg delete scripts.prepare && \
    npm ci --omit=dev && \
    npm cache clean --force

# Set correct permissions and ownership for all files (as root)
RUN chmod +x /app/start.sh # Make startup script executable
RUN chown -R floworx:nodejs /app # Give ownership to non-root user

# ---- Switch to non-root user for security ----
USER floworx

EXPOSE 5001

# Health check - Use /health endpoint for Docker/Traefik compatibility
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:5001/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application using the startup script
CMD ["/app/start.sh"]
