-- Floworx Email Provider Selection Migration - FIXED VERSION
-- Run this to add email provider selection and user configurations support
-- This version handles existing policies and constraints gracefully

-- =====================================================
-- 1. ADD EMAIL PROVIDER TO USERS TABLE
-- =====================================================
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS email_provider VARCHAR(20);

-- Create index for email provider lookups
CREATE INDEX IF NOT EXISTS idx_users_email_provider ON users (email_provider);

-- =====================================================
-- 2. CREATE USER CONFIGURATIONS TABLE
-- =====================================================
CREATE TABLE IF NOT EXISTS user_configurations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  email_provider VARCHAR(20),
  business_type_id BIGINT REFERENCES business_types(id),
  custom_settings JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Ensure one configuration per user
  UNIQUE(user_id)
);

-- Create indexes for user_configurations
CREATE INDEX IF NOT EXISTS idx_user_configurations_user_id ON user_configurations (user_id);
CREATE INDEX IF NOT EXISTS idx_user_configurations_email_provider ON user_configurations (email_provider);
CREATE INDEX IF NOT EXISTS idx_user_configurations_business_type ON user_configurations (business_type_id);
CREATE INDEX IF NOT EXISTS idx_user_configurations_custom_settings ON user_configurations USING GIN (custom_settings);

-- =====================================================
-- 3. ENABLE RLS ON USER CONFIGURATIONS
-- =====================================================
ALTER TABLE user_configurations ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist (to avoid conflicts)
DROP POLICY IF EXISTS "Users can view their own configuration" ON user_configurations;
DROP POLICY IF EXISTS "Users can insert their own configuration" ON user_configurations;
DROP POLICY IF EXISTS "Users can update their own configuration" ON user_configurations;
DROP POLICY IF EXISTS "Users can delete their own configuration" ON user_configurations;

-- Create RLS policies for user_configurations
CREATE POLICY "Users can view their own configuration" ON user_configurations
    FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own configuration" ON user_configurations
    FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own configuration" ON user_configurations
    FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own configuration" ON user_configurations
    FOR DELETE USING (user_id = auth.uid());

-- =====================================================
-- 4. CREATE TRIGGER FOR UPDATED_AT
-- =====================================================
CREATE OR REPLACE FUNCTION update_user_configurations_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop existing trigger if it exists
DROP TRIGGER IF EXISTS trigger_update_user_configurations_updated_at ON user_configurations;

CREATE TRIGGER trigger_update_user_configurations_updated_at
    BEFORE UPDATE ON user_configurations
    FOR EACH ROW
    EXECUTE FUNCTION update_user_configurations_updated_at();

-- =====================================================
-- 5. MIGRATE EXISTING DATA
-- =====================================================
-- Migrate existing business_type_id from users table to user_configurations
INSERT INTO user_configurations (user_id, business_type_id, email_provider)
SELECT 
    id as user_id,
    business_type_id,
    email_provider
FROM users 
WHERE business_type_id IS NOT NULL OR email_provider IS NOT NULL
ON CONFLICT (user_id) DO UPDATE SET
    business_type_id = EXCLUDED.business_type_id,
    email_provider = EXCLUDED.email_provider,
    updated_at = NOW();

-- =====================================================
-- 6. ADD VALIDATION CONSTRAINTS (SAFELY)
-- =====================================================
-- Drop existing constraints if they exist
ALTER TABLE users DROP CONSTRAINT IF EXISTS check_email_provider_values;
ALTER TABLE user_configurations DROP CONSTRAINT IF EXISTS check_user_config_email_provider_values;

-- Add check constraint for email_provider values
ALTER TABLE users 
ADD CONSTRAINT check_email_provider_values 
CHECK (email_provider IS NULL OR email_provider IN ('gmail', 'outlook'));

ALTER TABLE user_configurations 
ADD CONSTRAINT check_user_config_email_provider_values 
CHECK (email_provider IS NULL OR email_provider IN ('gmail', 'outlook'));

-- =====================================================
-- 7. CREATE HELPER FUNCTIONS
-- =====================================================
-- Function to get user's complete onboarding configuration
CREATE OR REPLACE FUNCTION get_user_onboarding_config(p_user_id UUID)
RETURNS TABLE (
    user_id UUID,
    email_provider VARCHAR(20),
    business_type_id BIGINT,
    business_type_name VARCHAR(255),
    custom_settings JSONB,
    onboarding_complete BOOLEAN
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        uc.user_id,
        uc.email_provider,
        uc.business_type_id,
        bt.name as business_type_name,
        uc.custom_settings,
        (uc.email_provider IS NOT NULL AND uc.business_type_id IS NOT NULL) as onboarding_complete
    FROM user_configurations uc
    LEFT JOIN business_types bt ON uc.business_type_id = bt.id
    WHERE uc.user_id = p_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 8. VERIFICATION QUERIES
-- =====================================================
-- Verify the migration
DO $$
BEGIN
    -- Check if email_provider column was added
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' 
        AND column_name = 'email_provider'
    ) THEN
        RAISE NOTICE 'SUCCESS: email_provider column added to users table';
    ELSE
        RAISE EXCEPTION 'ERROR: Failed to add email_provider column to users table';
    END IF;

    -- Check if user_configurations table was created
    IF EXISTS (
        SELECT 1 FROM information_schema.tables
        WHERE table_name = 'user_configurations'
    ) THEN
        RAISE NOTICE 'SUCCESS: user_configurations table created';
    ELSE
        RAISE EXCEPTION 'ERROR: Failed to create user_configurations table';
    END IF;

    -- Check if RLS is enabled
    IF EXISTS (
        SELECT 1 FROM pg_tables
        WHERE tablename = 'user_configurations'
        AND rowsecurity = true
    ) THEN
        RAISE NOTICE 'SUCCESS: RLS enabled on user_configurations table';
    ELSE
        RAISE NOTICE 'WARNING: RLS may not be enabled on user_configurations table';
    END IF;

    -- Check if policies exist
    IF EXISTS (
        SELECT 1 FROM pg_policies
        WHERE tablename = 'user_configurations'
        AND policyname = 'Users can view their own configuration'
    ) THEN
        RAISE NOTICE 'SUCCESS: RLS policies created successfully';
    ELSE
        RAISE NOTICE 'WARNING: RLS policies may not be created';
    END IF;

    RAISE NOTICE 'SUCCESS: Email provider migration completed successfully';
    RAISE NOTICE 'INFO: You can now test the email provider functionality';
END $$;
